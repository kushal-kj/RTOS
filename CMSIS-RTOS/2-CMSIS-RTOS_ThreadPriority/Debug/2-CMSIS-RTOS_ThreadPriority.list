
2-CMSIS-RTOS_ThreadPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f4  080052f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052fc  080052fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  20000060  08005364  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  08005364  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173b5  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ab  00000000  00000000  00037488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  0003b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034b1  00000000  00000000  0003c93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157c6  00000000  00000000  0003fdee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000977b1  00000000  00000000  000555b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005628  00000000  00000000  000ecd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000f2390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005280 	.word	0x08005280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005280 	.word	0x08005280

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
TaskProfiler_t Orange_TaskProfiler,Red_TaskProfiler,Green_TaskProfiler,Blue_TaskProfiler;

osThreadId_t  red_id,green_id,blue_id,orange_id;

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 80004e2:	f000 faf5 	bl	8000ad0 <HAL_Init>
  SystemClock_Config();		/* Configure the system clock */
 80004e6:	f000 f8e9 	bl	80006bc <SystemClock_Config>
  MX_GPIO_Init();		    /* Initialize all configured peripherals */
 80004ea:	f000 f97d 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f951 	bl	8000794 <MX_USART2_UART_Init>

  //Initialize the kernel
  osKernelInitialize();
 80004f2:	f001 ffe5 	bl	80024c0 <osKernelInitialize>

  //Create Threads

  osThreadAttr_t greenThreadAtrribs={
 80004f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fdd4 	bl	80050ac <memset>
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xe0>)
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000510:	2318      	movs	r3, #24
 8000512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 8000516:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051a:	461a      	mov	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <main+0xe4>)
 8000520:	f002 f818 	bl	8002554 <osThreadNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <main+0xe8>)
 8000528:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs={
 800052a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800052e:	2224      	movs	r2, #36	; 0x24
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fdba 	bl	80050ac <memset>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <main+0xec>)
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
 800053c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000542:	2318      	movs	r3, #24
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xf0>)
 8000550:	f002 f800 	bl	8002554 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xf4>)
 8000558:	6013      	str	r3, [r2, #0]

  osThreadAttr_t orangeThreadAtrribs={
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fda2 	bl	80050ac <memset>
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xf8>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
 8000572:	2318      	movs	r3, #24
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAtrribs);
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xfc>)
 8000580:	f001 ffe8 	bl	8002554 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x100>)
 8000588:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs={
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fd8b 	bl	80050ac <memset>
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	2318      	movs	r3, #24
 80005a2:	61bb      	str	r3, [r7, #24]
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005a4:	463b      	mov	r3, r7
 80005a6:	461a      	mov	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x108>)
 80005ac:	f001 ffd2 	bl	8002554 <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x10c>)
 80005b4:	6013      	str	r3, [r2, #0]

  //Start the kernel
  osKernelStart();
 80005b6:	f001 ffa7 	bl	8002508 <osKernelStart>

  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xde>
 80005bc:	08005298 	.word	0x08005298
 80005c0:	080005ed 	.word	0x080005ed
 80005c4:	200000d4 	.word	0x200000d4
 80005c8:	080052a4 	.word	0x080052a4
 80005cc:	0800061d 	.word	0x0800061d
 80005d0:	200000d0 	.word	0x200000d0
 80005d4:	080052ac 	.word	0x080052ac
 80005d8:	0800064d 	.word	0x0800064d
 80005dc:	200000dc 	.word	0x200000dc
 80005e0:	080052b8 	.word	0x080052b8
 80005e4:	0800068d 	.word	0x0800068d
 80005e8:	200000d8 	.word	0x200000d8

080005ec <vGreenLedControllerTask>:

}


void vGreenLedControllerTask(void *pvParameters)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Green_TaskProfiler++;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <vGreenLedControllerTask+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vGreenLedControllerTask+0x28>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vGreenLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a02      	ldr	r2, [pc, #8]	; (8000618 <vGreenLedControllerTask+0x2c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	ddf8      	ble.n	8000604 <vGreenLedControllerTask+0x18>
		Green_TaskProfiler++;
 8000612:	e7ef      	b.n	80005f4 <vGreenLedControllerTask+0x8>
 8000614:	200000c8 	.word	0x200000c8
 8000618:	000c34ff 	.word	0x000c34ff

0800061c <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Red_TaskProfiler++;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <vRedLedControllerTask+0x28>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <vRedLedControllerTask+0x28>)
 800062c:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e002      	b.n	800063a <vRedLedControllerTask+0x1e>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4a02      	ldr	r2, [pc, #8]	; (8000648 <vRedLedControllerTask+0x2c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	ddf8      	ble.n	8000634 <vRedLedControllerTask+0x18>
		Red_TaskProfiler++;
 8000642:	e7ef      	b.n	8000624 <vRedLedControllerTask+0x8>
 8000644:	200000c4 	.word	0x200000c4
 8000648:	000c34ff 	.word	0x000c34ff

0800064c <vOrangeLedControllerTask>:
	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Orange_TaskProfiler++;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <vOrangeLedControllerTask+0x34>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <vOrangeLedControllerTask+0x34>)
 800065c:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e002      	b.n	800066a <vOrangeLedControllerTask+0x1e>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <vOrangeLedControllerTask+0x38>)
 800066e:	4293      	cmp	r3, r2
 8000670:	ddf8      	ble.n	8000664 <vOrangeLedControllerTask+0x18>
		osThreadSetPriority(green_id, osPriorityAboveNormal1);		//Changing the priority of the green thread at runtime
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <vOrangeLedControllerTask+0x3c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2121      	movs	r1, #33	; 0x21
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fffd 	bl	8002678 <osThreadSetPriority>
		Orange_TaskProfiler++;
 800067e:	e7e9      	b.n	8000654 <vOrangeLedControllerTask+0x8>
 8000680:	200000c0 	.word	0x200000c0
 8000684:	000c34ff 	.word	0x000c34ff
 8000688:	200000d4 	.word	0x200000d4

0800068c <vBlueLedControllerTask>:
	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Blue_TaskProfiler++;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <vBlueLedControllerTask+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <vBlueLedControllerTask+0x28>)
 800069c:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e002      	b.n	80006aa <vBlueLedControllerTask+0x1e>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4a02      	ldr	r2, [pc, #8]	; (80006b8 <vBlueLedControllerTask+0x2c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	ddf8      	ble.n	80006a4 <vBlueLedControllerTask+0x18>
		Blue_TaskProfiler++;
 80006b2:	e7ef      	b.n	8000694 <vBlueLedControllerTask+0x8>
 80006b4:	200000cc 	.word	0x200000cc
 80006b8:	000c34ff 	.word	0x000c34ff

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fcee 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <SystemClock_Config+0xd0>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd4>)
 800070a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000730:	2310      	movs	r3, #16
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073a:	2304      	movs	r3, #4
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073e:	2307      	movs	r3, #7
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fc6a 	bl	8001020 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 f875 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fecc 	bl	8001510 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800077e:	f000 f85f 	bl	8000840 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fb72 	bl	8001eb4 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f833 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000007c 	.word	0x2000007c
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_GPIO_Init+0x30>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0x30>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0x30>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 f971 	bl	8000b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010000 	.word	0x40010000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_MspInit+0x54>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <HAL_MspInit+0x54>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x54>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_MspInit+0x54>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_MspInit+0x54>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_MspInit+0x54>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	210f      	movs	r1, #15
 800088e:	f06f 0001 	mvn.w	r0, #1
 8000892:	f000 fa17 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_UART_MspInit+0x84>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d12b      	bne.n	800091e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_MspInit+0x88>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_UART_MspInit+0x88>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_UART_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_UART_MspInit+0x88>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_UART_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_UART_MspInit+0x8c>)
 800091a:	f000 f9fd 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40004400 	.word	0x40004400
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_InitTick+0xd0>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094c:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <HAL_InitTick+0xd0>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6453      	str	r3, [r2, #68]	; 0x44
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_InitTick+0xd0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fff0 	bl	8001950 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000970:	f000 ffda 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 8000974:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <HAL_InitTick+0xd4>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	0c9b      	lsrs	r3, r3, #18
 8000980:	3b01      	subs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <HAL_InitTick+0xd8>)
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_InitTick+0xdc>)
 8000988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_InitTick+0xd8>)
 800098c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_InitTick+0xd8>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_InitTick+0xd8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_InitTick+0xd8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_InitTick+0xd8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <HAL_InitTick+0xd8>)
 80009ac:	f001 f802 	bl	80019b4 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11b      	bne.n	80009f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <HAL_InitTick+0xd8>)
 80009c0:	f001 f852 	bl	8001a68 <HAL_TIM_Base_Start_IT>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d111      	bne.n	80009f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 f992 	bl	8000cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d808      	bhi.n	80009f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	2019      	movs	r0, #25
 80009e4:	f000 f96e 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_InitTick+0xe0>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e002      	b.n	80009f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	200000e0 	.word	0x200000e0
 8000a10:	40010000 	.word	0x40010000
 8000a14:	20000004 	.word	0x20000004

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a4a:	f001 f86f 	bl	8001b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000e0 	.word	0x200000e0

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a98:	4c0b      	ldr	r4, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa6:	f7ff ffd7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f004 fb5d 	bl	8005168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd15 	bl	80004dc <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ac0:	08005304 	.word	0x08005304
  ldr r2, =_sbss
 8000ac4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ac8:	20004c54 	.word	0x20004c54

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f8d8 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f7ff ff18 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fea2 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000128 	.word	0x20000128

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000128 	.word	0x20000128

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd6:	f7ff ff61 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f7ff ffb1 	bl	8000c48 <NVIC_EncodePriority>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff80 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff54 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e159      	b.n	8000fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8148 	bne.w	8000fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d017      	beq.n	8000e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a56      	ldr	r2, [pc, #344]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a52      	ldr	r2, [pc, #328]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x202>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2f4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1fe>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1fa>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2fc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1f6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1f2>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a24      	ldr	r2, [pc, #144]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_GPIO_Init+0x304>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	; (800101c <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f aea2 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40013800 	.word	0x40013800
 8001008:	40020000 	.word	0x40020000
 800100c:	40020400 	.word	0x40020400
 8001010:	40020800 	.word	0x40020800
 8001014:	40020c00 	.word	0x40020c00
 8001018:	40021000 	.word	0x40021000
 800101c:	40013c00 	.word	0x40013c00

08001020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e267      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d075      	beq.n	800112a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103e:	4b88      	ldr	r3, [pc, #544]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b04      	cmp	r3, #4
 8001048:	d00c      	beq.n	8001064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800104a:	4b85      	ldr	r3, [pc, #532]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001052:	2b08      	cmp	r3, #8
 8001054:	d112      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001056:	4b82      	ldr	r3, [pc, #520]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001062:	d10b      	bne.n	800107c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4b7e      	ldr	r3, [pc, #504]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d05b      	beq.n	8001128 <HAL_RCC_OscConfig+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d157      	bne.n	8001128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e242      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x74>
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a75      	ldr	r2, [pc, #468]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e01d      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x98>
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a6f      	ldr	r2, [pc, #444]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a6c      	ldr	r2, [pc, #432]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_RCC_OscConfig+0xb0>
 80010b8:	4b69      	ldr	r3, [pc, #420]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a68      	ldr	r2, [pc, #416]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b66      	ldr	r3, [pc, #408]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a65      	ldr	r2, [pc, #404]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fd30 	bl	8000b3c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fd2c 	bl	8000b3c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e207      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0xc0>
 80010fe:	e014      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd1c 	bl	8000b3c <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fd18 	bl	8000b3c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e1f3      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	4b51      	ldr	r3, [pc, #324]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0xe8>
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d063      	beq.n	80011fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001136:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001142:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d11c      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d116      	bne.n	8001188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d001      	beq.n	8001172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e1c7      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	e03a      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d020      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_RCC_OscConfig+0x244>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fcd1 	bl	8000b3c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fccd 	bl	8000b3c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1a8      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4925      	ldr	r1, [pc, #148]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]
 80011d0:	e015      	b.n	80011fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x244>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fcb0 	bl	8000b3c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fcac 	bl	8000b3c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e187      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d036      	beq.n	8001278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d016      	beq.n	8001240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_RCC_OscConfig+0x248>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fc90 	bl	8000b3c <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fc8c 	bl	8000b3c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e167      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x240>)
 8001234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0x200>
 800123e:	e01b      	b.n	8001278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_OscConfig+0x248>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fc79 	bl	8000b3c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124c:	e00e      	b.n	800126c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff fc75 	bl	8000b3c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d907      	bls.n	800126c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e150      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
 8001260:	40023800 	.word	0x40023800
 8001264:	42470000 	.word	0x42470000
 8001268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126c:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800126e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ea      	bne.n	800124e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8097 	beq.w	80013b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b7d      	ldr	r3, [pc, #500]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a7c      	ldr	r2, [pc, #496]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b7a      	ldr	r3, [pc, #488]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x474>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <HAL_RCC_OscConfig+0x474>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a73      	ldr	r2, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x474>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fc35 	bl	8000b3c <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fc31 	bl	8000b3c <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e10c      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b6a      	ldr	r3, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x474>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x2ea>
 80012fc:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a63      	ldr	r2, [pc, #396]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e01c      	b.n	8001344 <HAL_RCC_OscConfig+0x324>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x30c>
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	4a5e      	ldr	r2, [pc, #376]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6713      	str	r3, [r2, #112]	; 0x70
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a5b      	ldr	r2, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0x324>
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	4b55      	ldr	r3, [pc, #340]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a54      	ldr	r2, [pc, #336]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800133e:	f023 0304 	bic.w	r3, r3, #4
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d015      	beq.n	8001378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff fbf6 	bl	8000b3c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff fbf2 	bl	8000b3c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e0cb      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0ee      	beq.n	8001354 <HAL_RCC_OscConfig+0x334>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fbe0 	bl	8000b3c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	e00a      	b.n	8001396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001380:	f7ff fbdc 	bl	8000b3c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f241 3288 	movw	r2, #5000	; 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0b5      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ee      	bne.n	8001380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a38      	ldr	r2, [pc, #224]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80013ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a1 	beq.w	8001500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d05c      	beq.n	8001484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d141      	bne.n	8001456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_RCC_OscConfig+0x478>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fbb0 	bl	8000b3c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fbac 	bl	8000b3c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e087      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69da      	ldr	r2, [r3, #28]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	3b01      	subs	r3, #1
 8001418:	041b      	lsls	r3, r3, #16
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	491b      	ldr	r1, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x478>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fb85 	bl	8000b3c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff fb81 	bl	8000b3c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e05c      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x416>
 8001454:	e054      	b.n	8001500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb6e 	bl	8000b3c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fb6a 	bl	8000b3c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e045      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x444>
 8001482:	e03d      	b.n	8001500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d107      	bne.n	800149c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e038      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000
 8001498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x4ec>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d028      	beq.n	80014fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d121      	bne.n	80014fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d11a      	bne.n	80014fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014cc:	4013      	ands	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d111      	bne.n	80014fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	3b01      	subs	r3, #1
 80014e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0cc      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001524:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d90c      	bls.n	800154c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b63      	ldr	r3, [pc, #396]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0b8      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001564:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a58      	ldr	r2, [pc, #352]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800156e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	494d      	ldr	r1, [pc, #308]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d044      	beq.n	8001630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e067      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 0203 	bic.w	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4934      	ldr	r1, [pc, #208]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001600:	f7ff fa9c 	bl	8000b3c <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff fa98 	bl	8000b3c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e04f      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d20c      	bcs.n	8001658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e032      	b.n	80016be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4916      	ldr	r1, [pc, #88]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	490e      	ldr	r1, [pc, #56]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001696:	f000 f821 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 800169a:	4602      	mov	r2, r0
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	490a      	ldr	r1, [pc, #40]	; (80016d0 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	5ccb      	ldrb	r3, [r1, r3]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f93c 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	080052dc 	.word	0x080052dc
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e0:	b094      	sub	sp, #80	; 0x50
 80016e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016ec:	2300      	movs	r3, #0
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d00d      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x40>
 8001700:	2b08      	cmp	r3, #8
 8001702:	f200 80e1 	bhi.w	80018c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x34>
 800170a:	2b04      	cmp	r3, #4
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x3a>
 800170e:	e0db      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001714:	e0db      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001716:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800171a:	e0d8      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001726:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	2200      	movs	r2, #0
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
 800173c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
 800174a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800174e:	4622      	mov	r2, r4
 8001750:	462b      	mov	r3, r5
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	0159      	lsls	r1, r3, #5
 800175c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001760:	0150      	lsls	r0, r2, #5
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4621      	mov	r1, r4
 8001768:	1a51      	subs	r1, r2, r1
 800176a:	6139      	str	r1, [r7, #16]
 800176c:	4629      	mov	r1, r5
 800176e:	eb63 0301 	sbc.w	r3, r3, r1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001780:	4659      	mov	r1, fp
 8001782:	018b      	lsls	r3, r1, #6
 8001784:	4651      	mov	r1, sl
 8001786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800178a:	4651      	mov	r1, sl
 800178c:	018a      	lsls	r2, r1, #6
 800178e:	4651      	mov	r1, sl
 8001790:	ebb2 0801 	subs.w	r8, r2, r1
 8001794:	4659      	mov	r1, fp
 8001796:	eb63 0901 	sbc.w	r9, r3, r1
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ae:	4690      	mov	r8, r2
 80017b0:	4699      	mov	r9, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	eb18 0303 	adds.w	r3, r8, r3
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	462b      	mov	r3, r5
 80017bc:	eb49 0303 	adc.w	r3, r9, r3
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017ce:	4629      	mov	r1, r5
 80017d0:	024b      	lsls	r3, r1, #9
 80017d2:	4621      	mov	r1, r4
 80017d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017d8:	4621      	mov	r1, r4
 80017da:	024a      	lsls	r2, r1, #9
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e2:	2200      	movs	r2, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017ec:	f7fe fcf8 	bl	80001e0 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f8:	e058      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	4618      	mov	r0, r3
 8001804:	4611      	mov	r1, r2
 8001806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001814:	4642      	mov	r2, r8
 8001816:	464b      	mov	r3, r9
 8001818:	f04f 0000 	mov.w	r0, #0
 800181c:	f04f 0100 	mov.w	r1, #0
 8001820:	0159      	lsls	r1, r3, #5
 8001822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001826:	0150      	lsls	r0, r2, #5
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4641      	mov	r1, r8
 800182e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001832:	4649      	mov	r1, r9
 8001834:	eb63 0b01 	sbc.w	fp, r3, r1
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800184c:	ebb2 040a 	subs.w	r4, r2, sl
 8001850:	eb63 050b 	sbc.w	r5, r3, fp
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	00eb      	lsls	r3, r5, #3
 800185e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001862:	00e2      	lsls	r2, r4, #3
 8001864:	4614      	mov	r4, r2
 8001866:	461d      	mov	r5, r3
 8001868:	4643      	mov	r3, r8
 800186a:	18e3      	adds	r3, r4, r3
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	464b      	mov	r3, r9
 8001870:	eb45 0303 	adc.w	r3, r5, r3
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001882:	4629      	mov	r1, r5
 8001884:	028b      	lsls	r3, r1, #10
 8001886:	4621      	mov	r1, r4
 8001888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800188c:	4621      	mov	r1, r4
 800188e:	028a      	lsls	r2, r1, #10
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001896:	2200      	movs	r2, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	61fa      	str	r2, [r7, #28]
 800189c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a0:	f7fe fc9e 	bl	80001e0 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	3301      	adds	r3, #1
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3750      	adds	r7, #80	; 0x50
 80018d4:	46bd      	mov	sp, r7
 80018d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	007a1200 	.word	0x007a1200

080018e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000

08001900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001904:	f7ff fff0 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	080052ec 	.word	0x080052ec

08001928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800192c:	f7ff ffdc 	bl	80018e8 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0b5b      	lsrs	r3, r3, #13
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK2Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	080052ec 	.word	0x080052ec

08001950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	220f      	movs	r2, #15
 800195e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_GetClockConfig+0x5c>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_RCC_GetClockConfig+0x60>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0207 	and.w	r2, r3, #7
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e041      	b.n	8001a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f839 	bl	8001a52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3304      	adds	r3, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f000 f9ca 	bl	8001d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e044      	b.n	8001b0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d018      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d013      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_TIM_Base_Start_IT+0xb8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d009      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d004      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x6c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d111      	bne.n	8001af8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d010      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af6:	e007      	b.n	8001b08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40000800 	.word	0x40000800
 8001b24:	40000c00 	.word	0x40000c00
 8001b28:	40014000 	.word	0x40014000

08001b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0202 	mvn.w	r2, #2
 8001b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8ee 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8e0 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8f1 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0204 	mvn.w	r2, #4
 8001bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8c4 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8b6 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8c7 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0208 	mvn.w	r2, #8
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2204      	movs	r2, #4
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f89a 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f88c 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f89d 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d122      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d11b      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0210 	mvn.w	r2, #16
 8001c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f870 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001c70:	e005      	b.n	8001c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f862 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f873 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0201 	mvn.w	r2, #1
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fdb6 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b80      	cmp	r3, #128	; 0x80
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b80      	cmp	r3, #128	; 0x80
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8e2 	bl	8001ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d10e      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d107      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f838 	bl	8001d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d107      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0220 	mvn.w	r2, #32
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8ac 	bl	8001e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <TIM_Base_SetConfig+0xe4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00f      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001daa:	d00b      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <TIM_Base_SetConfig+0xe8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <TIM_Base_SetConfig+0xec>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <TIM_Base_SetConfig+0xf0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <TIM_Base_SetConfig+0xe4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01b      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d017      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <TIM_Base_SetConfig+0xe8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <TIM_Base_SetConfig+0xec>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00f      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <TIM_Base_SetConfig+0xf0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <TIM_Base_SetConfig+0xf4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <TIM_Base_SetConfig+0xf8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <TIM_Base_SetConfig+0xfc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <TIM_Base_SetConfig+0xe4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d103      	bne.n	8001e5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	615a      	str	r2, [r3, #20]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800

08001e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e03f      	b.n	8001f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fce2 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f829 	bl	8001f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f54:	b0c0      	sub	sp, #256	; 0x100
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	ea40 0301 	orr.w	r3, r0, r1
 8001f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fa8:	f021 010c 	bic.w	r1, r1, #12
 8001fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	6999      	ldr	r1, [r3, #24]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	ea40 0301 	orr.w	r3, r0, r1
 8001fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b8f      	ldr	r3, [pc, #572]	; (800221c <UART_SetConfig+0x2cc>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <UART_SetConfig+0xa0>
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b8d      	ldr	r3, [pc, #564]	; (8002220 <UART_SetConfig+0x2d0>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d104      	bne.n	8001ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff0:	f7ff fc9a 	bl	8001928 <HAL_RCC_GetPCLK2Freq>
 8001ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ff8:	e003      	b.n	8002002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffa:	f7ff fc81 	bl	8001900 <HAL_RCC_GetPCLK1Freq>
 8001ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200c:	f040 810c 	bne.w	8002228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800201a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800201e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002022:	4622      	mov	r2, r4
 8002024:	462b      	mov	r3, r5
 8002026:	1891      	adds	r1, r2, r2
 8002028:	65b9      	str	r1, [r7, #88]	; 0x58
 800202a:	415b      	adcs	r3, r3
 800202c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800202e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002032:	4621      	mov	r1, r4
 8002034:	eb12 0801 	adds.w	r8, r2, r1
 8002038:	4629      	mov	r1, r5
 800203a:	eb43 0901 	adc.w	r9, r3, r1
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002052:	4690      	mov	r8, r2
 8002054:	4699      	mov	r9, r3
 8002056:	4623      	mov	r3, r4
 8002058:	eb18 0303 	adds.w	r3, r8, r3
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002060:	462b      	mov	r3, r5
 8002062:	eb49 0303 	adc.w	r3, r9, r3
 8002066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800206a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800207a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800207e:	460b      	mov	r3, r1
 8002080:	18db      	adds	r3, r3, r3
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
 8002084:	4613      	mov	r3, r2
 8002086:	eb42 0303 	adc.w	r3, r2, r3
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
 800208c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002094:	f7fe f8a4 	bl	80001e0 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4b61      	ldr	r3, [pc, #388]	; (8002224 <UART_SetConfig+0x2d4>)
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	011c      	lsls	r4, r3, #4
 80020a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	1891      	adds	r1, r2, r2
 80020be:	64b9      	str	r1, [r7, #72]	; 0x48
 80020c0:	415b      	adcs	r3, r3
 80020c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020c8:	4641      	mov	r1, r8
 80020ca:	eb12 0a01 	adds.w	sl, r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	eb43 0b01 	adc.w	fp, r3, r1
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	4692      	mov	sl, r2
 80020ea:	469b      	mov	fp, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	eb1a 0303 	adds.w	r3, sl, r3
 80020f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020f6:	464b      	mov	r3, r9
 80020f8:	eb4b 0303 	adc.w	r3, fp, r3
 80020fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800210c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002114:	460b      	mov	r3, r1
 8002116:	18db      	adds	r3, r3, r3
 8002118:	643b      	str	r3, [r7, #64]	; 0x40
 800211a:	4613      	mov	r3, r2
 800211c:	eb42 0303 	adc.w	r3, r2, r3
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
 8002122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800212a:	f7fe f859 	bl	80001e0 <__aeabi_uldivmod>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4611      	mov	r1, r2
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <UART_SetConfig+0x2d4>)
 8002136:	fba3 2301 	umull	r2, r3, r3, r1
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <UART_SetConfig+0x2d4>)
 800214c:	fba3 2302 	umull	r2, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002158:	441c      	add	r4, r3
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	1891      	adds	r1, r2, r2
 8002172:	63b9      	str	r1, [r7, #56]	; 0x38
 8002174:	415b      	adcs	r3, r3
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800217c:	4641      	mov	r1, r8
 800217e:	1851      	adds	r1, r2, r1
 8002180:	6339      	str	r1, [r7, #48]	; 0x30
 8002182:	4649      	mov	r1, r9
 8002184:	414b      	adcs	r3, r1
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002194:	4659      	mov	r1, fp
 8002196:	00cb      	lsls	r3, r1, #3
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219e:	4651      	mov	r1, sl
 80021a0:	00ca      	lsls	r2, r1, #3
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	4642      	mov	r2, r8
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021b0:	464b      	mov	r3, r9
 80021b2:	460a      	mov	r2, r1
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021d0:	460b      	mov	r3, r1
 80021d2:	18db      	adds	r3, r3, r3
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d6:	4613      	mov	r3, r2
 80021d8:	eb42 0303 	adc.w	r3, r2, r3
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021e6:	f7fd fffb 	bl	80001e0 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <UART_SetConfig+0x2d4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	3332      	adds	r3, #50	; 0x32
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <UART_SetConfig+0x2d4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 0207 	and.w	r2, r3, #7
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4422      	add	r2, r4
 8002216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002218:	e106      	b.n	8002428 <UART_SetConfig+0x4d8>
 800221a:	bf00      	nop
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800222c:	2200      	movs	r2, #0
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800223a:	4642      	mov	r2, r8
 800223c:	464b      	mov	r3, r9
 800223e:	1891      	adds	r1, r2, r2
 8002240:	6239      	str	r1, [r7, #32]
 8002242:	415b      	adcs	r3, r3
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224a:	4641      	mov	r1, r8
 800224c:	1854      	adds	r4, r2, r1
 800224e:	4649      	mov	r1, r9
 8002250:	eb43 0501 	adc.w	r5, r3, r1
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	00eb      	lsls	r3, r5, #3
 800225e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002262:	00e2      	lsls	r2, r4, #3
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	4643      	mov	r3, r8
 800226a:	18e3      	adds	r3, r4, r3
 800226c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002270:	464b      	mov	r3, r9
 8002272:	eb45 0303 	adc.w	r3, r5, r3
 8002276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002296:	4629      	mov	r1, r5
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	4621      	mov	r1, r4
 800229c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a0:	4621      	mov	r1, r4
 80022a2:	008a      	lsls	r2, r1, #2
 80022a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022a8:	f7fd ff9a 	bl	80001e0 <__aeabi_uldivmod>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4b60      	ldr	r3, [pc, #384]	; (8002434 <UART_SetConfig+0x4e4>)
 80022b2:	fba3 2302 	umull	r2, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	011c      	lsls	r4, r3, #4
 80022ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022cc:	4642      	mov	r2, r8
 80022ce:	464b      	mov	r3, r9
 80022d0:	1891      	adds	r1, r2, r2
 80022d2:	61b9      	str	r1, [r7, #24]
 80022d4:	415b      	adcs	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	4641      	mov	r1, r8
 80022de:	1851      	adds	r1, r2, r1
 80022e0:	6139      	str	r1, [r7, #16]
 80022e2:	4649      	mov	r1, r9
 80022e4:	414b      	adcs	r3, r1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f4:	4659      	mov	r1, fp
 80022f6:	00cb      	lsls	r3, r1, #3
 80022f8:	4651      	mov	r1, sl
 80022fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022fe:	4651      	mov	r1, sl
 8002300:	00ca      	lsls	r2, r1, #3
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4603      	mov	r3, r0
 8002308:	4642      	mov	r2, r8
 800230a:	189b      	adds	r3, r3, r2
 800230c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002310:	464b      	mov	r3, r9
 8002312:	460a      	mov	r2, r1
 8002314:	eb42 0303 	adc.w	r3, r2, r3
 8002318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	67bb      	str	r3, [r7, #120]	; 0x78
 8002326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002334:	4649      	mov	r1, r9
 8002336:	008b      	lsls	r3, r1, #2
 8002338:	4641      	mov	r1, r8
 800233a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233e:	4641      	mov	r1, r8
 8002340:	008a      	lsls	r2, r1, #2
 8002342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002346:	f7fd ff4b 	bl	80001e0 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4611      	mov	r1, r2
 8002350:	4b38      	ldr	r3, [pc, #224]	; (8002434 <UART_SetConfig+0x4e4>)
 8002352:	fba3 2301 	umull	r2, r3, r3, r1
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2264      	movs	r2, #100	; 0x64
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	4a33      	ldr	r2, [pc, #204]	; (8002434 <UART_SetConfig+0x4e4>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	441c      	add	r4, r3
 8002372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002376:	2200      	movs	r2, #0
 8002378:	673b      	str	r3, [r7, #112]	; 0x70
 800237a:	677a      	str	r2, [r7, #116]	; 0x74
 800237c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	1891      	adds	r1, r2, r2
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	415b      	adcs	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002390:	4641      	mov	r1, r8
 8002392:	1851      	adds	r1, r2, r1
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	4649      	mov	r1, r9
 8002398:	414b      	adcs	r3, r1
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023a8:	4659      	mov	r1, fp
 80023aa:	00cb      	lsls	r3, r1, #3
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b2:	4651      	mov	r1, sl
 80023b4:	00ca      	lsls	r2, r1, #3
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	4642      	mov	r2, r8
 80023be:	189b      	adds	r3, r3, r2
 80023c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80023c2:	464b      	mov	r3, r9
 80023c4:	460a      	mov	r2, r1
 80023c6:	eb42 0303 	adc.w	r3, r2, r3
 80023ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60
 80023d6:	667a      	str	r2, [r7, #100]	; 0x64
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023e4:	4649      	mov	r1, r9
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	4641      	mov	r1, r8
 80023ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ee:	4641      	mov	r1, r8
 80023f0:	008a      	lsls	r2, r1, #2
 80023f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023f6:	f7fd fef3 	bl	80001e0 <__aeabi_uldivmod>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <UART_SetConfig+0x4e4>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	; 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	3332      	adds	r3, #50	; 0x32
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <UART_SetConfig+0x4e4>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 020f 	and.w	r2, r3, #15
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4422      	add	r2, r4
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002434:	51eb851f 	.word	0x51eb851f

08002438 <__NVIC_SetPriority>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <SysTick_Handler+0x1c>)
 8002492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002494:	f001 fda0 	bl	8003fd8 <xTaskGetSchedulerState>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800249e:	f002 fb8b 	bl	8004bb8 <xPortSysTickHandler>
  }
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80024b0:	2100      	movs	r1, #0
 80024b2:	f06f 0004 	mvn.w	r0, #4
 80024b6:	f7ff ffbf 	bl	8002438 <__NVIC_SetPriority>
#endif
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024c6:	f3ef 8305 	mrs	r3, IPSR
 80024ca:	603b      	str	r3, [r7, #0]
  return(result);
 80024cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80024d2:	f06f 0305 	mvn.w	r3, #5
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	e00c      	b.n	80024f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <osKernelInitialize+0x44>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <osKernelInitialize+0x44>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e002      	b.n	80024f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024ee:	f04f 33ff 	mov.w	r3, #4294967295
 80024f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024f4:	687b      	ldr	r3, [r7, #4]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000012c 	.word	0x2000012c

08002508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800250e:	f3ef 8305 	mrs	r3, IPSR
 8002512:	603b      	str	r3, [r7, #0]
  return(result);
 8002514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <osKernelStart+0x1a>
    stat = osErrorISR;
 800251a:	f06f 0305 	mvn.w	r3, #5
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	e010      	b.n	8002544 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <osKernelStart+0x48>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d109      	bne.n	800253e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800252a:	f7ff ffbf 	bl	80024ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <osKernelStart+0x48>)
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002534:	f001 f8f4 	bl	8003720 <vTaskStartScheduler>
      stat = osOK;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	e002      	b.n	8002544 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000012c 	.word	0x2000012c

08002554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	; 0x38
 8002558:	af04      	add	r7, sp, #16
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002564:	f3ef 8305 	mrs	r3, IPSR
 8002568:	617b      	str	r3, [r7, #20]
  return(result);
 800256a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800256c:	2b00      	cmp	r3, #0
 800256e:	d17e      	bne.n	800266e <osThreadNew+0x11a>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d07b      	beq.n	800266e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800257a:	2318      	movs	r3, #24
 800257c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d045      	beq.n	800261a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <osThreadNew+0x48>
        name = attr->name;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <osThreadNew+0x6e>
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b38      	cmp	r3, #56	; 0x38
 80025b4:	d805      	bhi.n	80025c2 <osThreadNew+0x6e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <osThreadNew+0x72>
        return (NULL);
 80025c2:	2300      	movs	r3, #0
 80025c4:	e054      	b.n	8002670 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <osThreadNew+0xa8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2ba7      	cmp	r3, #167	; 0xa7
 80025e4:	d90a      	bls.n	80025fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <osThreadNew+0xa8>
        mem = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	e010      	b.n	800261e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <osThreadNew+0xca>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d108      	bne.n	800261e <osThreadNew+0xca>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <osThreadNew+0xca>
          mem = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e001      	b.n	800261e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d110      	bne.n	8002646 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800262c:	9202      	str	r2, [sp, #8]
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fe1a 	bl	8003274 <xTaskCreateStatic>
 8002640:	4603      	mov	r3, r0
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e013      	b.n	800266e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	b29a      	uxth	r2, r3
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fe65 	bl	800332e <xTaskCreate>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d001      	beq.n	800266e <osThreadNew+0x11a>
            hTask = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800266e:	693b      	ldr	r3, [r7, #16]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3728      	adds	r7, #40	; 0x28
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002686:	f3ef 8305 	mrs	r3, IPSR
 800268a:	60fb      	str	r3, [r7, #12]
  return(result);
 800268c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8002692:	f06f 0305 	mvn.w	r3, #5
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e013      	b.n	80026c2 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <osThreadSetPriority+0x34>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	dd02      	ble.n	80026ac <osThreadSetPriority+0x34>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b38      	cmp	r3, #56	; 0x38
 80026aa:	dd03      	ble.n	80026b4 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 80026ac:	f06f 0303 	mvn.w	r3, #3
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e006      	b.n	80026c2 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f000 ff91 	bl	80035e4 <vTaskPrioritySet>
  }

  return (stat);
 80026c2:	697b      	ldr	r3, [r7, #20]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80026dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4a06      	ldr	r2, [pc, #24]	; (80026fc <vApplicationGetIdleTaskMemory+0x30>)
 80026e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000130 	.word	0x20000130
 80026fc:	200001d8 	.word	0x200001d8

08002700 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <vApplicationGetTimerTaskMemory+0x2c>)
 8002710:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <vApplicationGetTimerTaskMemory+0x30>)
 8002716:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	200003d8 	.word	0x200003d8
 8002730:	20000480 	.word	0x20000480

08002734 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f103 0208 	add.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f04f 32ff 	mov.w	r2, #4294967295
 800274c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f103 0208 	add.w	r2, r3, #8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0208 	add.w	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027d6:	b480      	push	{r7}
 80027d8:	b085      	sub	sp, #20
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d103      	bne.n	80027f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e00c      	b.n	8002810 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3308      	adds	r3, #8
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e002      	b.n	8002804 <vListInsert+0x2e>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d2f6      	bcs.n	80027fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6892      	ldr	r2, [r2, #8]
 800285e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6852      	ldr	r2, [r2, #4]
 8002868:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d103      	bne.n	800287c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028c6:	f002 f8e5 	bl	8004a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	441a      	add	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	3b01      	subs	r3, #1
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	441a      	add	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	22ff      	movs	r2, #255	; 0xff
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d114      	bne.n	8002946 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01a      	beq.n	800295a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3310      	adds	r3, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f993 	bl	8003c54 <xTaskRemoveFromEventList>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <xQueueGenericReset+0xcc>)
 8002936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	e009      	b.n	800295a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3310      	adds	r3, #16
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fef2 	bl	8002734 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff feed 	bl	8002734 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800295a:	f002 f8cb 	bl	8004af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <xQueueGenericCreateStatic+0x52>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <xQueueGenericCreateStatic+0x56>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <xQueueGenericCreateStatic+0x58>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	623b      	str	r3, [r7, #32]
}
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <xQueueGenericCreateStatic+0x7e>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueGenericCreateStatic+0x82>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueGenericCreateStatic+0x84>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61fb      	str	r3, [r7, #28]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a0a:	2350      	movs	r3, #80	; 0x50
 8002a0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b50      	cmp	r3, #80	; 0x50
 8002a12:	d00a      	beq.n	8002a2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	61bb      	str	r3, [r7, #24]
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f805 	bl	8002a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3730      	adds	r7, #48	; 0x30
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e002      	b.n	8002a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	69b8      	ldr	r0, [r7, #24]
 8002a8e:	f7ff ff05 	bl	800289c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	; 0x38
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericSend+0x32>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <xQueueGenericSend+0x40>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <xQueueGenericSend+0x44>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <xQueueGenericSend+0x46>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <xQueueGenericSend+0x60>
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b00:	bf00      	nop
 8002b02:	e7fe      	b.n	8002b02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d103      	bne.n	8002b12 <xQueueGenericSend+0x6e>
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <xQueueGenericSend+0x72>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueGenericSend+0x74>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	623b      	str	r3, [r7, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b32:	f001 fa51 	bl	8003fd8 <xTaskGetSchedulerState>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <xQueueGenericSend+0x9e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0xa2>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0xa4>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	61fb      	str	r3, [r7, #28]
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b62:	f001 ff97 	bl	8004a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <xQueueGenericSend+0xd4>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d129      	bne.n	8002bcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fa0b 	bl	8002f98 <prvCopyDataToQueue>
 8002b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	3324      	adds	r3, #36	; 0x24
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 f85f 	bl	8003c54 <xTaskRemoveFromEventList>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	e00a      	b.n	8002bc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bc4:	f001 ff96 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e063      	b.n	8002c94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bd2:	f001 ff8f 	bl	8004af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e05c      	b.n	8002c94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 f899 	bl	8003d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bea:	2301      	movs	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bee:	f001 ff81 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bf2:	f000 fe05 	bl	8003800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bf6:	f001 ff4d 	bl	8004a94 <vPortEnterCritical>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d103      	bne.n	8002c10 <xQueueGenericSend+0x16c>
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d103      	bne.n	8002c26 <xQueueGenericSend+0x182>
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c26:	f001 ff65 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c2a:	1d3a      	adds	r2, r7, #4
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f888 	bl	8003d48 <xTaskCheckForTimeOut>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d124      	bne.n	8002c88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c40:	f000 faa2 	bl	8003188 <prvIsQueueFull>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 ffae 	bl	8003bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c5a:	f000 fa2d 	bl	80030b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c5e:	f000 fddd 	bl	800381c <xTaskResumeAll>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af7c 	bne.w	8002b62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <xQueueGenericSend+0x1f8>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	e772      	b.n	8002b62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c7e:	f000 fa1b 	bl	80030b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c82:	f000 fdcb 	bl	800381c <xTaskResumeAll>
 8002c86:	e76c      	b.n	8002b62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c8a:	f000 fa15 	bl	80030b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c8e:	f000 fdc5 	bl	800381c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3738      	adds	r7, #56	; 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b090      	sub	sp, #64	; 0x40
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <xQueueGenericSendFromISR+0x3c>
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericSendFromISR+0x40>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueGenericSendFromISR+0x42>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cf8:	bf00      	nop
 8002cfa:	e7fe      	b.n	8002cfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSendFromISR+0x6a>
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSendFromISR+0x6e>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSendFromISR+0x70>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	623b      	str	r3, [r7, #32]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d2a:	f001 ff95 	bl	8004c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	61fa      	str	r2, [r7, #28]
 8002d44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <xQueueGenericSendFromISR+0xbc>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d12f      	bne.n	8002dbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d72:	f000 f911 	bl	8002f98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d112      	bne.n	8002da6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8a:	3324      	adds	r3, #36	; 0x24
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 ff61 	bl	8003c54 <xTaskRemoveFromEventList>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e007      	b.n	8002db6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002daa:	3301      	adds	r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	b25a      	sxtb	r2, r3
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002db6:	2301      	movs	r3, #1
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002dba:	e001      	b.n	8002dc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3740      	adds	r7, #64	; 0x40
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <xQueueReceive+0x30>
	__asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	623b      	str	r3, [r7, #32]
}
 8002e04:	bf00      	nop
 8002e06:	e7fe      	b.n	8002e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <xQueueReceive+0x3e>
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <xQueueReceive+0x42>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueReceive+0x44>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueReceive+0x5e>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	61fb      	str	r3, [r7, #28]
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e36:	f001 f8cf 	bl	8003fd8 <xTaskGetSchedulerState>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <xQueueReceive+0x6e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <xQueueReceive+0x72>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueReceive+0x74>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueReceive+0x8e>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61bb      	str	r3, [r7, #24]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e66:	f001 fe15 	bl	8004a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01f      	beq.n	8002eb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7a:	f000 f8f7 	bl	800306c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00f      	beq.n	8002eae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	3310      	adds	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fede 	bl	8003c54 <xTaskRemoveFromEventList>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <xQueueReceive+0x1bc>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eae:	f001 fe21 	bl	8004af4 <vPortExitCritical>
				return pdPASS;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e069      	b.n	8002f8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ebc:	f001 fe1a 	bl	8004af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e062      	b.n	8002f8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 ff24 	bl	8003d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed8:	f001 fe0c 	bl	8004af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002edc:	f000 fc90 	bl	8003800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ee0:	f001 fdd8 	bl	8004a94 <vPortEnterCritical>
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d103      	bne.n	8002efa <xQueueReceive+0x122>
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d103      	bne.n	8002f10 <xQueueReceive+0x138>
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f10:	f001 fdf0 	bl	8004af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f14:	1d3a      	adds	r2, r7, #4
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ff13 	bl	8003d48 <xTaskCheckForTimeOut>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d123      	bne.n	8002f70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f917 	bl	800315c <prvIsQueueEmpty>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d017      	beq.n	8002f64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	3324      	adds	r3, #36	; 0x24
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fe39 	bl	8003bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f44:	f000 f8b8 	bl	80030b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f48:	f000 fc68 	bl	800381c <xTaskResumeAll>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d189      	bne.n	8002e66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <xQueueReceive+0x1bc>)
 8002f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	e780      	b.n	8002e66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f66:	f000 f8a7 	bl	80030b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f6a:	f000 fc57 	bl	800381c <xTaskResumeAll>
 8002f6e:	e77a      	b.n	8002e66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f72:	f000 f8a1 	bl	80030b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f76:	f000 fc51 	bl	800381c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f000 f8ee 	bl	800315c <prvIsQueueEmpty>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f43f af6f 	beq.w	8002e66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d14d      	bne.n	800305a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f826 	bl	8004014 <xTaskPriorityDisinherit>
 8002fc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	e043      	b.n	800305a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d119      	bne.n	800300c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6858      	ldr	r0, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	f002 f8e6 	bl	80051b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d32b      	bcc.n	800305a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e026      	b.n	800305a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68d8      	ldr	r0, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	461a      	mov	r2, r3
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	f002 f8cc 	bl	80051b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	425b      	negs	r3, r3
 8003026:	441a      	add	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d207      	bcs.n	8003048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	425b      	negs	r3, r3
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d105      	bne.n	800305a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	3b01      	subs	r3, #1
 8003058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003062:	697b      	ldr	r3, [r7, #20]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d018      	beq.n	80030b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	441a      	add	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	429a      	cmp	r2, r3
 8003096:	d303      	bcc.n	80030a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	461a      	mov	r2, r3
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f002 f882 	bl	80051b4 <memcpy>
	}
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030c0:	f001 fce8 	bl	8004a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030cc:	e011      	b.n	80030f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fdba 	bl	8003c54 <xTaskRemoveFromEventList>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030e6:	f000 fe91 	bl	8003e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	dce9      	bgt.n	80030ce <prvUnlockQueue+0x16>
 80030fa:	e000      	b.n	80030fe <prvUnlockQueue+0x46>
					break;
 80030fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fcf5 	bl	8004af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800310a:	f001 fcc3 	bl	8004a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003116:	e011      	b.n	800313c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3310      	adds	r3, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fd95 	bl	8003c54 <xTaskRemoveFromEventList>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003130:	f000 fe6c 	bl	8003e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	3b01      	subs	r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800313c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003140:	2b00      	cmp	r3, #0
 8003142:	dce9      	bgt.n	8003118 <prvUnlockQueue+0x60>
 8003144:	e000      	b.n	8003148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003150:	f001 fcd0 	bl	8004af4 <vPortExitCritical>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003164:	f001 fc96 	bl	8004a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e001      	b.n	800317a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f001 fcbb 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003190:	f001 fc80 	bl	8004a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	429a      	cmp	r2, r3
 800319e:	d102      	bne.n	80031a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e001      	b.n	80031aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031aa:	f001 fca3 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e014      	b.n	80031f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031c8:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <vQueueAddToRegistry+0x50>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <vQueueAddToRegistry+0x50>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031de:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <vQueueAddToRegistry+0x50>)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031ea:	e006      	b.n	80031fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	d9e7      	bls.n	80031c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000880 	.word	0x20000880

0800320c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800321c:	f001 fc3a 	bl	8004a94 <vPortEnterCritical>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003226:	b25b      	sxtb	r3, r3
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d103      	bne.n	8003236 <vQueueWaitForMessageRestricted+0x2a>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323c:	b25b      	sxtb	r3, r3
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d103      	bne.n	800324c <vQueueWaitForMessageRestricted+0x40>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800324c:	f001 fc52 	bl	8004af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fccb 	bl	8003bfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003266:	6978      	ldr	r0, [r7, #20]
 8003268:	f7ff ff26 	bl	80030b8 <prvUnlockQueue>
	}
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08e      	sub	sp, #56	; 0x38
 8003278:	af04      	add	r7, sp, #16
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <xTaskCreateStatic+0x46>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	61fb      	str	r3, [r7, #28]
}
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032ba:	23a8      	movs	r3, #168	; 0xa8
 80032bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2ba8      	cmp	r3, #168	; 0xa8
 80032c2:	d00a      	beq.n	80032da <xTaskCreateStatic+0x66>
	__asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61bb      	str	r3, [r7, #24]
}
 80032d6:	bf00      	nop
 80032d8:	e7fe      	b.n	80032d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01e      	beq.n	8003320 <xTaskCreateStatic+0xac>
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032fa:	2300      	movs	r3, #0
 80032fc:	9303      	str	r3, [sp, #12]
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	9302      	str	r3, [sp, #8]
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f850 	bl	80033b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800331a:	f000 f8f3 	bl	8003504 <prvAddNewTaskToReadyList>
 800331e:	e001      	b.n	8003324 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003324:	697b      	ldr	r3, [r7, #20]
	}
 8003326:	4618      	mov	r0, r3
 8003328:	3728      	adds	r7, #40	; 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08c      	sub	sp, #48	; 0x30
 8003332:	af04      	add	r7, sp, #16
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fcc8 	bl	8004cd8 <pvPortMalloc>
 8003348:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003350:	20a8      	movs	r0, #168	; 0xa8
 8003352:	f001 fcc1 	bl	8004cd8 <pvPortMalloc>
 8003356:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
 8003364:	e005      	b.n	8003372 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	f001 fd82 	bl	8004e70 <vPortFree>
 800336c:	e001      	b.n	8003372 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	2300      	movs	r3, #0
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	9302      	str	r3, [sp, #8]
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f80e 	bl	80033b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800339c:	69f8      	ldr	r0, [r7, #28]
 800339e:	f000 f8b1 	bl	8003504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e002      	b.n	80033ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033ae:	69bb      	ldr	r3, [r7, #24]
	}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	21a5      	movs	r1, #165	; 0xa5
 80033d2:	f001 fe6b 	bl	80050ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033e0:	3b01      	subs	r3, #1
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <prvInitialiseNewTask+0x58>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	617b      	str	r3, [r7, #20]
}
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01f      	beq.n	8003456 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e012      	b.n	8003442 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	7819      	ldrb	r1, [r3, #0]
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	3334      	adds	r3, #52	; 0x34
 800342c:	460a      	mov	r2, r1
 800342e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d006      	beq.n	800344a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d9e9      	bls.n	800341c <prvInitialiseNewTask+0x64>
 8003448:	e000      	b.n	800344c <prvInitialiseNewTask+0x94>
			{
				break;
 800344a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003454:	e003      	b.n	800345e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	2b37      	cmp	r3, #55	; 0x37
 8003462:	d901      	bls.n	8003468 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003464:	2337      	movs	r3, #55	; 0x37
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003472:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff f978 	bl	8002774 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	3318      	adds	r3, #24
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff f973 	bl	8002774 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	3354      	adds	r3, #84	; 0x54
 80034b8:	224c      	movs	r2, #76	; 0x4c
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fdf5 	bl	80050ac <memset>
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <prvInitialiseNewTask+0x140>)
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <prvInitialiseNewTask+0x144>)
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <prvInitialiseNewTask+0x148>)
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	69b8      	ldr	r0, [r7, #24]
 80034da:	f001 f9ab 	bl	8004834 <pxPortInitialiseStack>
 80034de:	4602      	mov	r2, r0
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20004b14 	.word	0x20004b14
 80034fc:	20004b7c 	.word	0x20004b7c
 8003500:	20004be4 	.word	0x20004be4

08003504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800350c:	f001 fac2 	bl	8004a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003510:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <prvAddNewTaskToReadyList+0xc4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <prvAddNewTaskToReadyList+0xc4>)
 8003518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003522:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <prvAddNewTaskToReadyList+0xc4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d110      	bne.n	8003552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003530:	f000 fc90 	bl	8003e54 <prvInitialiseTaskLists>
 8003534:	e00d      	b.n	8003552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <prvAddNewTaskToReadyList+0xcc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d802      	bhi.n	8003552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <prvAddNewTaskToReadyList+0xd0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <prvAddNewTaskToReadyList+0xd0>)
 800355a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <prvAddNewTaskToReadyList+0xd0>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <prvAddNewTaskToReadyList+0xd4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d903      	bls.n	8003578 <prvAddNewTaskToReadyList+0x74>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <prvAddNewTaskToReadyList+0xd4>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <prvAddNewTaskToReadyList+0xd8>)
 8003586:	441a      	add	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f7ff f8fd 	bl	800278e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003594:	f001 faae 	bl	8004af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <prvAddNewTaskToReadyList+0xcc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00e      	beq.n	80035be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <prvAddNewTaskToReadyList+0xc8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d207      	bcs.n	80035be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <prvAddNewTaskToReadyList+0xdc>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000d94 	.word	0x20000d94
 80035cc:	200008c0 	.word	0x200008c0
 80035d0:	20000da0 	.word	0x20000da0
 80035d4:	20000db0 	.word	0x20000db0
 80035d8:	20000d9c 	.word	0x20000d9c
 80035dc:	200008c4 	.word	0x200008c4
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b37      	cmp	r3, #55	; 0x37
 80035f6:	d90a      	bls.n	800360e <vTaskPrioritySet+0x2a>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b37      	cmp	r3, #55	; 0x37
 8003612:	d901      	bls.n	8003618 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003614:	2337      	movs	r3, #55	; 0x37
 8003616:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003618:	f001 fa3c 	bl	8004a94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <vTaskPrioritySet+0x44>
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <vTaskPrioritySet+0x12c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e000      	b.n	800362a <vTaskPrioritySet+0x46>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d063      	beq.n	8003702 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	429a      	cmp	r2, r3
 8003640:	d90d      	bls.n	800365e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <vTaskPrioritySet+0x12c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d00f      	beq.n	800366c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <vTaskPrioritySet+0x12c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d309      	bcc.n	800366c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e006      	b.n	800366c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800365e:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <vTaskPrioritySet+0x12c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d101      	bne.n	800366c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d102      	bne.n	8003684 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db04      	blt.n	800369c <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <vTaskPrioritySet+0x130>)
 80036ac:	4413      	add	r3, r2
 80036ae:	4299      	cmp	r1, r3
 80036b0:	d11c      	bne.n	80036ec <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff f8c6 	bl	8002848 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <vTaskPrioritySet+0x134>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d903      	bls.n	80036d0 <vTaskPrioritySet+0xec>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <vTaskPrioritySet+0x134>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <vTaskPrioritySet+0x130>)
 80036de:	441a      	add	r2, r3
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7ff f851 	bl	800278e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <vTaskPrioritySet+0x138>)
 80036f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003702:	f001 f9f7 	bl	8004af4 <vPortExitCritical>
	}
 8003706:	bf00      	nop
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200008c0 	.word	0x200008c0
 8003714:	200008c4 	.word	0x200008c4
 8003718:	20000d9c 	.word	0x20000d9c
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800372e:	463a      	mov	r2, r7
 8003730:	1d39      	adds	r1, r7, #4
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe ffc8 	bl	80026cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	9202      	str	r2, [sp, #8]
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	460a      	mov	r2, r1
 800374e:	4924      	ldr	r1, [pc, #144]	; (80037e0 <vTaskStartScheduler+0xc0>)
 8003750:	4824      	ldr	r0, [pc, #144]	; (80037e4 <vTaskStartScheduler+0xc4>)
 8003752:	f7ff fd8f 	bl	8003274 <xTaskCreateStatic>
 8003756:	4603      	mov	r3, r0
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <vTaskStartScheduler+0xc8>)
 800375a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <vTaskStartScheduler+0xc8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e001      	b.n	800376e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d102      	bne.n	800377a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003774:	f000 fd10 	bl	8004198 <xTimerCreateTimerTask>
 8003778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d11b      	bne.n	80037b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <vTaskStartScheduler+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3354      	adds	r3, #84	; 0x54
 800379a:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <vTaskStartScheduler+0xd0>)
 800379c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <vTaskStartScheduler+0xd4>)
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <vTaskStartScheduler+0xd8>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <vTaskStartScheduler+0xdc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037b2:	f001 f8cd 	bl	8004950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037b6:	e00e      	b.n	80037d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d10a      	bne.n	80037d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	60fb      	str	r3, [r7, #12]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <vTaskStartScheduler+0xb4>
}
 80037d6:	bf00      	nop
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	080052c4 	.word	0x080052c4
 80037e4:	08003e25 	.word	0x08003e25
 80037e8:	20000db8 	.word	0x20000db8
 80037ec:	200008c0 	.word	0x200008c0
 80037f0:	2000005c 	.word	0x2000005c
 80037f4:	20000db4 	.word	0x20000db4
 80037f8:	20000da0 	.word	0x20000da0
 80037fc:	20000d98 	.word	0x20000d98

08003800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <vTaskSuspendAll+0x18>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a03      	ldr	r2, [pc, #12]	; (8003818 <vTaskSuspendAll+0x18>)
 800380c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20000dbc 	.word	0x20000dbc

0800381c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <xTaskResumeAll+0x118>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <xTaskResumeAll+0x2c>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	603b      	str	r3, [r7, #0]
}
 8003844:	bf00      	nop
 8003846:	e7fe      	b.n	8003846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003848:	f001 f924 	bl	8004a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800384c:	4b39      	ldr	r3, [pc, #228]	; (8003934 <xTaskResumeAll+0x118>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <xTaskResumeAll+0x118>)
 8003854:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003856:	4b37      	ldr	r3, [pc, #220]	; (8003934 <xTaskResumeAll+0x118>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d162      	bne.n	8003924 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <xTaskResumeAll+0x11c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d05e      	beq.n	8003924 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003866:	e02f      	b.n	80038c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <xTaskResumeAll+0x120>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3318      	adds	r3, #24
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe ffe7 	bl	8002848 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3304      	adds	r3, #4
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ffe2 	bl	8002848 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <xTaskResumeAll+0x124>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <xTaskResumeAll+0x7c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <xTaskResumeAll+0x124>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <xTaskResumeAll+0x128>)
 80038a6:	441a      	add	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe ff6d 	bl	800278e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <xTaskResumeAll+0x12c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <xTaskResumeAll+0x130>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <xTaskResumeAll+0x120>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1cb      	bne.n	8003868 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038d6:	f000 fb5f 	bl	8003f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <xTaskResumeAll+0x134>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038e6:	f000 f847 	bl	8003978 <xTaskIncrementTick>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <xTaskResumeAll+0x130>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f1      	bne.n	80038e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <xTaskResumeAll+0x134>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <xTaskResumeAll+0x130>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <xTaskResumeAll+0x138>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003924:	f001 f8e6 	bl	8004af4 <vPortExitCritical>

	return xAlreadyYielded;
 8003928:	68bb      	ldr	r3, [r7, #8]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000dbc 	.word	0x20000dbc
 8003938:	20000d94 	.word	0x20000d94
 800393c:	20000d54 	.word	0x20000d54
 8003940:	20000d9c 	.word	0x20000d9c
 8003944:	200008c4 	.word	0x200008c4
 8003948:	200008c0 	.word	0x200008c0
 800394c:	20000da8 	.word	0x20000da8
 8003950:	20000da4 	.word	0x20000da4
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <xTaskGetTickCount+0x1c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003964:	687b      	ldr	r3, [r7, #4]
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000d98 	.word	0x20000d98

08003978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003982:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <xTaskIncrementTick+0x148>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 808f 	bne.w	8003aaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800398c:	4b4d      	ldr	r3, [pc, #308]	; (8003ac4 <xTaskIncrementTick+0x14c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003994:	4a4b      	ldr	r2, [pc, #300]	; (8003ac4 <xTaskIncrementTick+0x14c>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d120      	bne.n	80039e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039a0:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <xTaskIncrementTick+0x150>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	603b      	str	r3, [r7, #0]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskIncrementTick+0x46>
 80039c0:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <xTaskIncrementTick+0x150>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <xTaskIncrementTick+0x154>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <xTaskIncrementTick+0x150>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <xTaskIncrementTick+0x154>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a3d      	ldr	r2, [pc, #244]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	f000 fadb 	bl	8003f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039e2:	4b3c      	ldr	r3, [pc, #240]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d349      	bcc.n	8003a80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ec:	4b36      	ldr	r3, [pc, #216]	; (8003ac8 <xTaskIncrementTick+0x150>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	601a      	str	r2, [r3, #0]
					break;
 80039fe:	e03f      	b.n	8003a80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a00:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <xTaskIncrementTick+0x150>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d203      	bcs.n	8003a20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a18:	4a2e      	ldr	r2, [pc, #184]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a1e:	e02f      	b.n	8003a80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe ff0f 	bl	8002848 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3318      	adds	r3, #24
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe ff06 	bl	8002848 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <xTaskIncrementTick+0x160>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d903      	bls.n	8003a50 <xTaskIncrementTick+0xd8>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <xTaskIncrementTick+0x160>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a5e:	441a      	add	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fe fe91 	bl	800278e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3b8      	bcc.n	80039ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a7e:	e7b5      	b.n	80039ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	4915      	ldr	r1, [pc, #84]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d901      	bls.n	8003a9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <xTaskIncrementTick+0x16c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e004      	b.n	8003ab4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003ab2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ab4:	697b      	ldr	r3, [r7, #20]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000dbc 	.word	0x20000dbc
 8003ac4:	20000d98 	.word	0x20000d98
 8003ac8:	20000d4c 	.word	0x20000d4c
 8003acc:	20000d50 	.word	0x20000d50
 8003ad0:	20000dac 	.word	0x20000dac
 8003ad4:	20000db4 	.word	0x20000db4
 8003ad8:	20000d9c 	.word	0x20000d9c
 8003adc:	200008c4 	.word	0x200008c4
 8003ae0:	200008c0 	.word	0x200008c0
 8003ae4:	20000da8 	.word	0x20000da8
 8003ae8:	20000da4 	.word	0x20000da4

08003aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <vTaskSwitchContext+0xb0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <vTaskSwitchContext+0xb4>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b00:	e046      	b.n	8003b90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003b02:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <vTaskSwitchContext+0xb4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b08:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <vTaskSwitchContext+0xb8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e010      	b.n	8003b32 <vTaskSwitchContext+0x46>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <vTaskSwitchContext+0x40>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	607b      	str	r3, [r7, #4]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <vTaskSwitchContext+0x3e>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	491d      	ldr	r1, [pc, #116]	; (8003ba8 <vTaskSwitchContext+0xbc>)
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0e4      	beq.n	8003b10 <vTaskSwitchContext+0x24>
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <vTaskSwitchContext+0xbc>)
 8003b52:	4413      	add	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3308      	adds	r3, #8
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d104      	bne.n	8003b76 <vTaskSwitchContext+0x8a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <vTaskSwitchContext+0xc0>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <vTaskSwitchContext+0xb8>)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <vTaskSwitchContext+0xc0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3354      	adds	r3, #84	; 0x54
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <vTaskSwitchContext+0xc4>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000dbc 	.word	0x20000dbc
 8003ba0:	20000da8 	.word	0x20000da8
 8003ba4:	20000d9c 	.word	0x20000d9c
 8003ba8:	200008c4 	.word	0x200008c4
 8003bac:	200008c0 	.word	0x200008c0
 8003bb0:	2000005c 	.word	0x2000005c

08003bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <vTaskPlaceOnEventList+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fe fdf7 	bl	80027d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f000 fa80 	bl	80040f0 <prvAddCurrentTaskToDelayedList>
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200008c0 	.word	0x200008c0

08003bfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	617b      	str	r3, [r7, #20]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3318      	adds	r3, #24
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7fe fdae 	bl	800278e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f000 fa55 	bl	80040f0 <prvAddCurrentTaskToDelayedList>
	}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200008c0 	.word	0x200008c0

08003c54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60fb      	str	r3, [r7, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3318      	adds	r3, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fddf 	bl	8002848 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <xTaskRemoveFromEventList+0xb0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11d      	bne.n	8003cce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fdd6 	bl	8002848 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <xTaskRemoveFromEventList+0xb4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <xTaskRemoveFromEventList+0x5c>
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <xTaskRemoveFromEventList+0xb4>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <xTaskRemoveFromEventList+0xb8>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe fd61 	bl	800278e <vListInsertEnd>
 8003ccc:	e005      	b.n	8003cda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480e      	ldr	r0, [pc, #56]	; (8003d10 <xTaskRemoveFromEventList+0xbc>)
 8003cd6:	f7fe fd5a 	bl	800278e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <xTaskRemoveFromEventList+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d905      	bls.n	8003cf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <xTaskRemoveFromEventList+0xc4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e001      	b.n	8003cf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cf8:	697b      	ldr	r3, [r7, #20]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000dbc 	.word	0x20000dbc
 8003d08:	20000d9c 	.word	0x20000d9c
 8003d0c:	200008c4 	.word	0x200008c4
 8003d10:	20000d54 	.word	0x20000d54
 8003d14:	200008c0 	.word	0x200008c0
 8003d18:	20000da8 	.word	0x20000da8

08003d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <vTaskInternalSetTimeOutState+0x24>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <vTaskInternalSetTimeOutState+0x28>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	20000dac 	.word	0x20000dac
 8003d44:	20000d98 	.word	0x20000d98

08003d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60fb      	str	r3, [r7, #12]
}
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d8a:	f000 fe83 	bl	8004a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <xTaskCheckForTimeOut+0xbc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d102      	bne.n	8003dae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	e023      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <xTaskCheckForTimeOut+0xc0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d007      	beq.n	8003dca <xTaskCheckForTimeOut+0x82>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e015      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d20b      	bcs.n	8003dec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff9b 	bl	8003d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	e004      	b.n	8003df6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003df6:	f000 fe7d 	bl	8004af4 <vPortExitCritical>

	return xReturn;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000d98 	.word	0x20000d98
 8003e08:	20000dac 	.word	0x20000dac

08003e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <vTaskMissedYield+0x14>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	20000da8 	.word	0x20000da8

08003e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e2c:	f000 f852 	bl	8003ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvIdleTask+0x28>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d9f9      	bls.n	8003e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <prvIdleTask+0x2c>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e48:	e7f0      	b.n	8003e2c <prvIdleTask+0x8>
 8003e4a:	bf00      	nop
 8003e4c:	200008c4 	.word	0x200008c4
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	e00c      	b.n	8003e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <prvInitialiseTaskLists+0x60>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe fc60 	bl	8002734 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3301      	adds	r3, #1
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b37      	cmp	r3, #55	; 0x37
 8003e7e:	d9ef      	bls.n	8003e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e80:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <prvInitialiseTaskLists+0x64>)
 8003e82:	f7fe fc57 	bl	8002734 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e86:	480d      	ldr	r0, [pc, #52]	; (8003ebc <prvInitialiseTaskLists+0x68>)
 8003e88:	f7fe fc54 	bl	8002734 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e8c:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <prvInitialiseTaskLists+0x6c>)
 8003e8e:	f7fe fc51 	bl	8002734 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e92:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <prvInitialiseTaskLists+0x70>)
 8003e94:	f7fe fc4e 	bl	8002734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e98:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <prvInitialiseTaskLists+0x74>)
 8003e9a:	f7fe fc4b 	bl	8002734 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvInitialiseTaskLists+0x78>)
 8003ea0:	4a05      	ldr	r2, [pc, #20]	; (8003eb8 <prvInitialiseTaskLists+0x64>)
 8003ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <prvInitialiseTaskLists+0x7c>)
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <prvInitialiseTaskLists+0x68>)
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200008c4 	.word	0x200008c4
 8003eb8:	20000d24 	.word	0x20000d24
 8003ebc:	20000d38 	.word	0x20000d38
 8003ec0:	20000d54 	.word	0x20000d54
 8003ec4:	20000d68 	.word	0x20000d68
 8003ec8:	20000d80 	.word	0x20000d80
 8003ecc:	20000d4c 	.word	0x20000d4c
 8003ed0:	20000d50 	.word	0x20000d50

08003ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eda:	e019      	b.n	8003f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003edc:	f000 fdda 	bl	8004a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <prvCheckTasksWaitingTermination+0x50>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe fcab 	bl	8002848 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <prvCheckTasksWaitingTermination+0x54>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <prvCheckTasksWaitingTermination+0x54>)
 8003efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f06:	f000 fdf5 	bl	8004af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f810 	bl	8003f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <prvCheckTasksWaitingTermination+0x58>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e1      	bne.n	8003edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000d68 	.word	0x20000d68
 8003f28:	20000d94 	.word	0x20000d94
 8003f2c:	20000d7c 	.word	0x20000d7c

08003f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3354      	adds	r3, #84	; 0x54
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f8bd 	bl	80050bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d108      	bne.n	8003f5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 ff8d 	bl	8004e70 <vPortFree>
				vPortFree( pxTCB );
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ff8a 	bl	8004e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f5c:	e018      	b.n	8003f90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d103      	bne.n	8003f70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 ff81 	bl	8004e70 <vPortFree>
	}
 8003f6e:	e00f      	b.n	8003f90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d00a      	beq.n	8003f90 <prvDeleteTCB+0x60>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60fb      	str	r3, [r7, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <prvDeleteTCB+0x5e>
	}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <prvResetNextTaskUnblockTime+0x38>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fb0:	e008      	b.n	8003fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <prvResetNextTaskUnblockTime+0x38>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000d4c 	.word	0x20000d4c
 8003fd4:	20000db4 	.word	0x20000db4

08003fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <xTaskGetSchedulerState+0x34>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e008      	b.n	8003ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <xTaskGetSchedulerState+0x38>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	e001      	b.n	8003ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ffe:	687b      	ldr	r3, [r7, #4]
	}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20000da0 	.word	0x20000da0
 8004010:	20000dbc 	.word	0x20000dbc

08004014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d056      	beq.n	80040d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <xTaskPriorityDisinherit+0xd0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d00a      	beq.n	800404a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60fb      	str	r3, [r7, #12]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	429a      	cmp	r2, r3
 800407c:	d02c      	beq.n	80040d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	2b00      	cmp	r3, #0
 8004084:	d128      	bne.n	80040d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3304      	adds	r3, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fbdc 	bl	8002848 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTaskPriorityDisinherit+0xd4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d903      	bls.n	80040b8 <xTaskPriorityDisinherit+0xa4>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <xTaskPriorityDisinherit+0xd4>)
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <xTaskPriorityDisinherit+0xd8>)
 80040c6:	441a      	add	r2, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7fe fb5d 	bl	800278e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040d8:	697b      	ldr	r3, [r7, #20]
	}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200008c0 	.word	0x200008c0
 80040e8:	20000d9c 	.word	0x20000d9c
 80040ec:	200008c4 	.word	0x200008c4

080040f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <prvAddCurrentTaskToDelayedList+0x90>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <prvAddCurrentTaskToDelayedList+0x94>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3304      	adds	r3, #4
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fb9e 	bl	8002848 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d10a      	bne.n	800412a <prvAddCurrentTaskToDelayedList+0x3a>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <prvAddCurrentTaskToDelayedList+0x94>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4819      	ldr	r0, [pc, #100]	; (8004188 <prvAddCurrentTaskToDelayedList+0x98>)
 8004124:	f7fe fb33 	bl	800278e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004128:	e026      	b.n	8004178 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <prvAddCurrentTaskToDelayedList+0x94>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	429a      	cmp	r2, r3
 8004140:	d209      	bcs.n	8004156 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <prvAddCurrentTaskToDelayedList+0x94>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f7fe fb41 	bl	80027d6 <vListInsert>
}
 8004154:	e010      	b.n	8004178 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvAddCurrentTaskToDelayedList+0x94>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fe fb37 	bl	80027d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvAddCurrentTaskToDelayedList+0xa4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d202      	bcs.n	8004178 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000d98 	.word	0x20000d98
 8004184:	200008c0 	.word	0x200008c0
 8004188:	20000d80 	.word	0x20000d80
 800418c:	20000d50 	.word	0x20000d50
 8004190:	20000d4c 	.word	0x20000d4c
 8004194:	20000db4 	.word	0x20000db4

08004198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041a2:	f000 fb07 	bl	80047b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <xTimerCreateTimerTask+0x80>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d021      	beq.n	80041f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041b6:	1d3a      	adds	r2, r7, #4
 80041b8:	f107 0108 	add.w	r1, r7, #8
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fa9d 	bl	8002700 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	9202      	str	r2, [sp, #8]
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2302      	movs	r3, #2
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	460a      	mov	r2, r1
 80041d8:	4910      	ldr	r1, [pc, #64]	; (800421c <xTimerCreateTimerTask+0x84>)
 80041da:	4811      	ldr	r0, [pc, #68]	; (8004220 <xTimerCreateTimerTask+0x88>)
 80041dc:	f7ff f84a 	bl	8003274 <xTaskCreateStatic>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <xTimerCreateTimerTask+0x8c>)
 80041e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <xTimerCreateTimerTask+0x8c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041ee:	2301      	movs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	613b      	str	r3, [r7, #16]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800420e:	697b      	ldr	r3, [r7, #20]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000df0 	.word	0x20000df0
 800421c:	080052cc 	.word	0x080052cc
 8004220:	0800435d 	.word	0x0800435d
 8004224:	20000df4 	.word	0x20000df4

08004228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <xTimerGenericCommand+0x98>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02a      	beq.n	80042b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b05      	cmp	r3, #5
 800426e:	dc18      	bgt.n	80042a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004270:	f7ff feb2 	bl	8003fd8 <xTaskGetSchedulerState>
 8004274:	4603      	mov	r3, r0
 8004276:	2b02      	cmp	r3, #2
 8004278:	d109      	bne.n	800428e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <xTimerGenericCommand+0x98>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f107 0110 	add.w	r1, r7, #16
 8004282:	2300      	movs	r3, #0
 8004284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004286:	f7fe fc0d 	bl	8002aa4 <xQueueGenericSend>
 800428a:	6278      	str	r0, [r7, #36]	; 0x24
 800428c:	e012      	b.n	80042b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <xTimerGenericCommand+0x98>)
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	f107 0110 	add.w	r1, r7, #16
 8004296:	2300      	movs	r3, #0
 8004298:	2200      	movs	r2, #0
 800429a:	f7fe fc03 	bl	8002aa4 <xQueueGenericSend>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24
 80042a0:	e008      	b.n	80042b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <xTimerGenericCommand+0x98>)
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	f107 0110 	add.w	r1, r7, #16
 80042aa:	2300      	movs	r3, #0
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	f7fe fcf7 	bl	8002ca0 <xQueueGenericSendFromISR>
 80042b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3728      	adds	r7, #40	; 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000df0 	.word	0x20000df0

080042c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <prvProcessExpiredTimer+0x94>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3304      	adds	r3, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe fab3 	bl	8002848 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d022      	beq.n	8004336 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	18d1      	adds	r1, r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	6978      	ldr	r0, [r7, #20]
 80042fe:	f000 f8d1 	bl	80044a4 <prvInsertTimerInActiveList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01f      	beq.n	8004348 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	2100      	movs	r1, #0
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f7ff ff88 	bl	8004228 <xTimerGenericCommand>
 8004318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d113      	bne.n	8004348 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	4798      	blx	r3
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000de8 	.word	0x20000de8

0800435c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f857 	bl	800441c <prvGetNextExpireTime>
 800436e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f803 	bl	8004380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800437a:	f000 f8d5 	bl	8004528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800437e:	e7f1      	b.n	8004364 <prvTimerTask+0x8>

08004380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800438a:	f7ff fa39 	bl	8003800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f866 	bl	8004464 <prvSampleTimeNow>
 8004398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d130      	bne.n	8004402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <prvProcessTimerOrBlockTask+0x3c>
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d806      	bhi.n	80043bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043ae:	f7ff fa35 	bl	800381c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff85 	bl	80042c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043ba:	e024      	b.n	8004406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <prvProcessTimerOrBlockTask+0x90>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <prvProcessTimerOrBlockTask+0x50>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <prvProcessTimerOrBlockTask+0x52>
 80043d0:	2300      	movs	r3, #0
 80043d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <prvProcessTimerOrBlockTask+0x94>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fe ff13 	bl	800320c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043e6:	f7ff fa19 	bl	800381c <xTaskResumeAll>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <prvProcessTimerOrBlockTask+0x98>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
}
 8004400:	e001      	b.n	8004406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004402:	f7ff fa0b 	bl	800381c <xTaskResumeAll>
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000dec 	.word	0x20000dec
 8004414:	20000df0 	.word	0x20000df0
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <prvGetNextExpireTime+0x44>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <prvGetNextExpireTime+0x16>
 800442e:	2201      	movs	r2, #1
 8004430:	e000      	b.n	8004434 <prvGetNextExpireTime+0x18>
 8004432:	2200      	movs	r2, #0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004440:	4b07      	ldr	r3, [pc, #28]	; (8004460 <prvGetNextExpireTime+0x44>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e001      	b.n	8004450 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000de8 	.word	0x20000de8

08004464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800446c:	f7ff fa74 	bl	8003958 <xTaskGetTickCount>
 8004470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <prvSampleTimeNow+0x3c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d205      	bcs.n	8004488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800447c:	f000 f936 	bl	80046ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e002      	b.n	800448e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <prvSampleTimeNow+0x3c>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004494:	68fb      	ldr	r3, [r7, #12]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000df8 	.word	0x20000df8

080044a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d812      	bhi.n	80044f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e01b      	b.n	8004516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <prvInsertTimerInActiveList+0x7c>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fe f974 	bl	80027d6 <vListInsert>
 80044ee:	e012      	b.n	8004516 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d206      	bcs.n	8004506 <prvInsertTimerInActiveList+0x62>
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e007      	b.n	8004516 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvInsertTimerInActiveList+0x80>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe f960 	bl	80027d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004516:	697b      	ldr	r3, [r7, #20]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000dec 	.word	0x20000dec
 8004524:	20000de8 	.word	0x20000de8

08004528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08e      	sub	sp, #56	; 0x38
 800452c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800452e:	e0ca      	b.n	80046c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da18      	bge.n	8004568 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	3304      	adds	r3, #4
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455e:	6850      	ldr	r0, [r2, #4]
 8004560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	4611      	mov	r1, r2
 8004566:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f2c0 80ab 	blt.w	80046c6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d004      	beq.n	8004586 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	3304      	adds	r3, #4
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe f961 	bl	8002848 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004586:	463b      	mov	r3, r7
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff6b 	bl	8004464 <prvSampleTimeNow>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b09      	cmp	r3, #9
 8004594:	f200 8096 	bhi.w	80046c4 <prvProcessReceivedCommands+0x19c>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <prvProcessReceivedCommands+0x78>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045c9 	.word	0x080045c9
 80045ac:	0800463d 	.word	0x0800463d
 80045b0:	08004651 	.word	0x08004651
 80045b4:	0800469b 	.word	0x0800469b
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045c9 	.word	0x080045c9
 80045c0:	0800463d 	.word	0x0800463d
 80045c4:	08004651 	.word	0x08004651
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	18d1      	adds	r1, r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e8:	f7ff ff5c 	bl	80044a4 <prvInsertTimerInActiveList>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d069      	beq.n	80046c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05e      	beq.n	80046c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	441a      	add	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	2100      	movs	r1, #0
 8004618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461a:	f7ff fe05 	bl	8004228 <xTimerGenericCommand>
 800461e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d14f      	bne.n	80046c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	61bb      	str	r3, [r7, #24]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800464e:	e03a      	b.n	80046c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	617b      	str	r3, [r7, #20]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	18d1      	adds	r1, r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004694:	f7ff ff06 	bl	80044a4 <prvInsertTimerInActiveList>
					break;
 8004698:	e015      	b.n	80046c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80046a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046aa:	f000 fbe1 	bl	8004e70 <vPortFree>
 80046ae:	e00a      	b.n	80046c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046c2:	e000      	b.n	80046c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80046c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <prvProcessReceivedCommands+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1d39      	adds	r1, r7, #4
 80046cc:	2200      	movs	r2, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fb82 	bl	8002dd8 <xQueueReceive>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f47f af2a 	bne.w	8004530 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3730      	adds	r7, #48	; 0x30
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000df0 	.word	0x20000df0

080046ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f2:	e048      	b.n	8004786 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f4:	4b2d      	ldr	r3, [pc, #180]	; (80047ac <prvSwitchTimerLists+0xc0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <prvSwitchTimerLists+0xc0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe f89b 	bl	8002848 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d02e      	beq.n	8004786 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d90e      	bls.n	8004758 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004746:	4b19      	ldr	r3, [pc, #100]	; (80047ac <prvSwitchTimerLists+0xc0>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe f840 	bl	80027d6 <vListInsert>
 8004756:	e016      	b.n	8004786 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	2100      	movs	r1, #0
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fd60 	bl	8004228 <xTimerGenericCommand>
 8004768:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	603b      	str	r3, [r7, #0]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <prvSwitchTimerLists+0xc0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1b1      	bne.n	80046f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <prvSwitchTimerLists+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <prvSwitchTimerLists+0xc4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a04      	ldr	r2, [pc, #16]	; (80047ac <prvSwitchTimerLists+0xc0>)
 800479c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <prvSwitchTimerLists+0xc4>)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000de8 	.word	0x20000de8
 80047b0:	20000dec 	.word	0x20000dec

080047b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047ba:	f000 f96b 	bl	8004a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <prvCheckForValidListAndQueue+0x60>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d120      	bne.n	8004808 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047c6:	4814      	ldr	r0, [pc, #80]	; (8004818 <prvCheckForValidListAndQueue+0x64>)
 80047c8:	f7fd ffb4 	bl	8002734 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047cc:	4813      	ldr	r0, [pc, #76]	; (800481c <prvCheckForValidListAndQueue+0x68>)
 80047ce:	f7fd ffb1 	bl	8002734 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <prvCheckForValidListAndQueue+0x6c>)
 80047d4:	4a10      	ldr	r2, [pc, #64]	; (8004818 <prvCheckForValidListAndQueue+0x64>)
 80047d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047d8:	4b12      	ldr	r3, [pc, #72]	; (8004824 <prvCheckForValidListAndQueue+0x70>)
 80047da:	4a10      	ldr	r2, [pc, #64]	; (800481c <prvCheckForValidListAndQueue+0x68>)
 80047dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047de:	2300      	movs	r3, #0
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <prvCheckForValidListAndQueue+0x74>)
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <prvCheckForValidListAndQueue+0x78>)
 80047e6:	2110      	movs	r1, #16
 80047e8:	200a      	movs	r0, #10
 80047ea:	f7fe f8bf 	bl	800296c <xQueueGenericCreateStatic>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <prvCheckForValidListAndQueue+0x60>)
 80047f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <prvCheckForValidListAndQueue+0x60>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <prvCheckForValidListAndQueue+0x60>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	490b      	ldr	r1, [pc, #44]	; (8004830 <prvCheckForValidListAndQueue+0x7c>)
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fcd8 	bl	80031b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004808:	f000 f974 	bl	8004af4 <vPortExitCritical>
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000df0 	.word	0x20000df0
 8004818:	20000dc0 	.word	0x20000dc0
 800481c:	20000dd4 	.word	0x20000dd4
 8004820:	20000de8 	.word	0x20000de8
 8004824:	20000dec 	.word	0x20000dec
 8004828:	20000e9c 	.word	0x20000e9c
 800482c:	20000dfc 	.word	0x20000dfc
 8004830:	080052d4 	.word	0x080052d4

08004834 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b04      	subs	r3, #4
 8004844:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800484c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b04      	subs	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b04      	subs	r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004864:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <pxPortInitialiseStack+0x64>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3b14      	subs	r3, #20
 800486e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3b04      	subs	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f06f 0202 	mvn.w	r2, #2
 8004882:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3b20      	subs	r3, #32
 8004888:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	0800489d 	.word	0x0800489d

0800489c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <prvTaskExitError+0x54>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d00a      	beq.n	80048c6 <prvTaskExitError+0x2a>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <prvTaskExitError+0x28>
	__asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60bb      	str	r3, [r7, #8]
}
 80048d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048da:	bf00      	nop
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0fc      	beq.n	80048dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	2000000c 	.word	0x2000000c
	...

08004900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <pxCurrentTCBConst2>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	f380 8809 	msr	PSP, r0
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8811 	msr	BASEPRI, r0
 800491a:	4770      	bx	lr
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst2>:
 8004920:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004928:	4808      	ldr	r0, [pc, #32]	; (800494c <prvPortStartFirstTask+0x24>)
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f380 8808 	msr	MSP, r0
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f380 8814 	msr	CONTROL, r0
 800493a:	b662      	cpsie	i
 800493c:	b661      	cpsie	f
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	df00      	svc	0
 8004948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800494a:	bf00      	nop
 800494c:	e000ed08 	.word	0xe000ed08

08004950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004956:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <xPortStartScheduler+0x120>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a46      	ldr	r2, [pc, #280]	; (8004a74 <xPortStartScheduler+0x124>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10a      	bne.n	8004976 <xPortStartScheduler+0x26>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	613b      	str	r3, [r7, #16]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004976:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <xPortStartScheduler+0x120>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <xPortStartScheduler+0x128>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d10a      	bne.n	8004996 <xPortStartScheduler+0x46>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
}
 8004992:	bf00      	nop
 8004994:	e7fe      	b.n	8004994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <xPortStartScheduler+0x12c>)
 8004998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	22ff      	movs	r2, #255	; 0xff
 80049a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <xPortStartScheduler+0x130>)
 80049bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049be:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <xPortStartScheduler+0x134>)
 80049c0:	2207      	movs	r2, #7
 80049c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049c4:	e009      	b.n	80049da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <xPortStartScheduler+0x134>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	4a2d      	ldr	r2, [pc, #180]	; (8004a84 <xPortStartScheduler+0x134>)
 80049ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d0ef      	beq.n	80049c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <xPortStartScheduler+0x134>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1c3 0307 	rsb	r3, r3, #7
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00a      	beq.n	8004a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60bb      	str	r3, [r7, #8]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a08:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <xPortStartScheduler+0x134>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <xPortStartScheduler+0x134>)
 8004a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a12:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <xPortStartScheduler+0x134>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <xPortStartScheduler+0x134>)
 8004a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <xPortStartScheduler+0x138>)
 8004a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a3e:	f000 f8dd 	bl	8004bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <xPortStartScheduler+0x13c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a48:	f000 f8fc 	bl	8004c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <xPortStartScheduler+0x140>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0f      	ldr	r2, [pc, #60]	; (8004a90 <xPortStartScheduler+0x140>)
 8004a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a58:	f7ff ff66 	bl	8004928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a5c:	f7ff f846 	bl	8003aec <vTaskSwitchContext>
	prvTaskExitError();
 8004a60:	f7ff ff1c 	bl	800489c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000ed00 	.word	0xe000ed00
 8004a74:	410fc271 	.word	0x410fc271
 8004a78:	410fc270 	.word	0x410fc270
 8004a7c:	e000e400 	.word	0xe000e400
 8004a80:	20000eec 	.word	0x20000eec
 8004a84:	20000ef0 	.word	0x20000ef0
 8004a88:	e000ed20 	.word	0xe000ed20
 8004a8c:	2000000c 	.word	0x2000000c
 8004a90:	e000ef34 	.word	0xe000ef34

08004a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	607b      	str	r3, [r7, #4]
}
 8004aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aae:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <vPortEnterCritical+0x58>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <vPortEnterCritical+0x58>)
 8004ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <vPortEnterCritical+0x58>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10f      	bne.n	8004ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <vPortEnterCritical+0x5c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	603b      	str	r3, [r7, #0]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <vPortEnterCritical+0x4a>
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <vPortExitCritical+0x50>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <vPortExitCritical+0x24>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <vPortExitCritical+0x50>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <vPortExitCritical+0x50>)
 8004b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <vPortExitCritical+0x50>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <vPortExitCritical+0x42>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f383 8811 	msr	BASEPRI, r3
}
 8004b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000000c 	.word	0x2000000c
	...

08004b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b50:	f3ef 8009 	mrs	r0, PSP
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <pxCurrentTCBConst>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	f01e 0f10 	tst.w	lr, #16
 8004b60:	bf08      	it	eq
 8004b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	6010      	str	r0, [r2, #0]
 8004b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b74:	f380 8811 	msr	BASEPRI, r0
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f7fe ffb4 	bl	8003aec <vTaskSwitchContext>
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f380 8811 	msr	BASEPRI, r0
 8004b8c:	bc09      	pop	{r0, r3}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b96:	f01e 0f10 	tst.w	lr, #16
 8004b9a:	bf08      	it	eq
 8004b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ba0:	f380 8809 	msr	PSP, r0
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst>:
 8004bb0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bd2:	f7fe fed1 	bl	8003978 <xTaskIncrementTick>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <xPortSysTickHandler+0x40>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <vPortSetupTimerInterrupt+0x38>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <vPortSetupTimerInterrupt+0x3c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <vPortSetupTimerInterrupt+0x40>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <vPortSetupTimerInterrupt+0x44>)
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <vPortSetupTimerInterrupt+0x34>)
 8004c20:	2207      	movs	r2, #7
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e010 	.word	0xe000e010
 8004c34:	e000e018 	.word	0xe000e018
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	10624dd3 	.word	0x10624dd3
 8004c40:	e000e014 	.word	0xe000e014

08004c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c54 <vPortEnableVFP+0x10>
 8004c48:	6801      	ldr	r1, [r0, #0]
 8004c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c4e:	6001      	str	r1, [r0, #0]
 8004c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c52:	bf00      	nop
 8004c54:	e000ed88 	.word	0xe000ed88

08004c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d914      	bls.n	8004c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c6a:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <vPortValidateInterruptPriority+0x70>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <vPortValidateInterruptPriority+0x74>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d20a      	bcs.n	8004c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <vPortValidateInterruptPriority+0x78>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <vPortValidateInterruptPriority+0x7c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d90a      	bls.n	8004cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	603b      	str	r3, [r7, #0]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <vPortValidateInterruptPriority+0x60>
	}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000e3f0 	.word	0xe000e3f0
 8004ccc:	20000eec 	.word	0x20000eec
 8004cd0:	e000ed0c 	.word	0xe000ed0c
 8004cd4:	20000ef0 	.word	0x20000ef0

08004cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ce4:	f7fe fd8c 	bl	8003800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ce8:	4b5b      	ldr	r3, [pc, #364]	; (8004e58 <pvPortMalloc+0x180>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cf0:	f000 f920 	bl	8004f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf4:	4b59      	ldr	r3, [pc, #356]	; (8004e5c <pvPortMalloc+0x184>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 8093 	bne.w	8004e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01d      	beq.n	8004d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d08:	2208      	movs	r2, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d014      	beq.n	8004d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	3308      	adds	r3, #8
 8004d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <pvPortMalloc+0x6c>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	617b      	str	r3, [r7, #20]
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d06e      	beq.n	8004e28 <pvPortMalloc+0x150>
 8004d4a:	4b45      	ldr	r3, [pc, #276]	; (8004e60 <pvPortMalloc+0x188>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d869      	bhi.n	8004e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d54:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <pvPortMalloc+0x18c>)
 8004d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d58:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <pvPortMalloc+0x18c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d5e:	e004      	b.n	8004d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d903      	bls.n	8004d7c <pvPortMalloc+0xa4>
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f1      	bne.n	8004d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d7c:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <pvPortMalloc+0x180>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d050      	beq.n	8004e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	2308      	movs	r3, #8
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d91f      	bls.n	8004de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	613b      	str	r3, [r7, #16]
}
 8004dcc:	bf00      	nop
 8004dce:	e7fe      	b.n	8004dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004de2:	69b8      	ldr	r0, [r7, #24]
 8004de4:	f000 f908 	bl	8004ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <pvPortMalloc+0x188>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <pvPortMalloc+0x188>)
 8004df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <pvPortMalloc+0x188>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <pvPortMalloc+0x190>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <pvPortMalloc+0x188>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <pvPortMalloc+0x190>)
 8004e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <pvPortMalloc+0x184>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <pvPortMalloc+0x194>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <pvPortMalloc+0x194>)
 8004e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e28:	f7fe fcf8 	bl	800381c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <pvPortMalloc+0x174>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60fb      	str	r3, [r7, #12]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <pvPortMalloc+0x172>
	return pvReturn;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20004afc 	.word	0x20004afc
 8004e5c:	20004b10 	.word	0x20004b10
 8004e60:	20004b00 	.word	0x20004b00
 8004e64:	20004af4 	.word	0x20004af4
 8004e68:	20004b04 	.word	0x20004b04
 8004e6c:	20004b08 	.word	0x20004b08

08004e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d04d      	beq.n	8004f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e82:	2308      	movs	r3, #8
 8004e84:	425b      	negs	r3, r3
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4413      	add	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <vPortFree+0xb8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <vPortFree+0x44>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60fb      	str	r3, [r7, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <vPortFree+0x62>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60bb      	str	r3, [r7, #8]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <vPortFree+0xb8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01e      	beq.n	8004f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11a      	bne.n	8004f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <vPortFree+0xb8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ef8:	f7fe fc82 	bl	8003800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <vPortFree+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <vPortFree+0xbc>)
 8004f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f0a:	6938      	ldr	r0, [r7, #16]
 8004f0c:	f000 f874 	bl	8004ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <vPortFree+0xc0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <vPortFree+0xc0>)
 8004f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f1a:	f7fe fc7f 	bl	800381c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20004b10 	.word	0x20004b10
 8004f2c:	20004b00 	.word	0x20004b00
 8004f30:	20004b0c 	.word	0x20004b0c

08004f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <prvHeapInit+0xac>)
 8004f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3307      	adds	r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0307 	bic.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <prvHeapInit+0xac>)
 8004f64:	4413      	add	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <prvHeapInit+0xb0>)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <prvHeapInit+0xb0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f80:	2208      	movs	r2, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0307 	bic.w	r3, r3, #7
 8004f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <prvHeapInit+0xb4>)
 8004f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <prvHeapInit+0xb4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <prvHeapInit+0xb4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <prvHeapInit+0xb4>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <prvHeapInit+0xb8>)
 8004fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <prvHeapInit+0xbc>)
 8004fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <prvHeapInit+0xc0>)
 8004fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fd2:	601a      	str	r2, [r3, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	20000ef4 	.word	0x20000ef4
 8004fe4:	20004af4 	.word	0x20004af4
 8004fe8:	20004afc 	.word	0x20004afc
 8004fec:	20004b04 	.word	0x20004b04
 8004ff0:	20004b00 	.word	0x20004b00
 8004ff4:	20004b10 	.word	0x20004b10

08004ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <prvInsertBlockIntoFreeList+0xac>)
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e002      	b.n	800500c <prvInsertBlockIntoFreeList+0x14>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d8f7      	bhi.n	8005006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	4413      	add	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d108      	bne.n	800503a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	441a      	add	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d118      	bne.n	8005080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d00d      	beq.n	8005076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	441a      	add	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e008      	b.n	8005088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e003      	b.n	8005088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d002      	beq.n	8005096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20004af4 	.word	0x20004af4
 80050a8:	20004afc 	.word	0x20004afc

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_reclaim_reent>:
 80050bc:	4b29      	ldr	r3, [pc, #164]	; (8005164 <_reclaim_reent+0xa8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4283      	cmp	r3, r0
 80050c2:	b570      	push	{r4, r5, r6, lr}
 80050c4:	4604      	mov	r4, r0
 80050c6:	d04b      	beq.n	8005160 <_reclaim_reent+0xa4>
 80050c8:	69c3      	ldr	r3, [r0, #28]
 80050ca:	b143      	cbz	r3, 80050de <_reclaim_reent+0x22>
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d144      	bne.n	800515c <_reclaim_reent+0xa0>
 80050d2:	69e3      	ldr	r3, [r4, #28]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	b111      	cbz	r1, 80050de <_reclaim_reent+0x22>
 80050d8:	4620      	mov	r0, r4
 80050da:	f000 f879 	bl	80051d0 <_free_r>
 80050de:	6961      	ldr	r1, [r4, #20]
 80050e0:	b111      	cbz	r1, 80050e8 <_reclaim_reent+0x2c>
 80050e2:	4620      	mov	r0, r4
 80050e4:	f000 f874 	bl	80051d0 <_free_r>
 80050e8:	69e1      	ldr	r1, [r4, #28]
 80050ea:	b111      	cbz	r1, 80050f2 <_reclaim_reent+0x36>
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 f86f 	bl	80051d0 <_free_r>
 80050f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80050f4:	b111      	cbz	r1, 80050fc <_reclaim_reent+0x40>
 80050f6:	4620      	mov	r0, r4
 80050f8:	f000 f86a 	bl	80051d0 <_free_r>
 80050fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fe:	b111      	cbz	r1, 8005106 <_reclaim_reent+0x4a>
 8005100:	4620      	mov	r0, r4
 8005102:	f000 f865 	bl	80051d0 <_free_r>
 8005106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005108:	b111      	cbz	r1, 8005110 <_reclaim_reent+0x54>
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f860 	bl	80051d0 <_free_r>
 8005110:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005112:	b111      	cbz	r1, 800511a <_reclaim_reent+0x5e>
 8005114:	4620      	mov	r0, r4
 8005116:	f000 f85b 	bl	80051d0 <_free_r>
 800511a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800511c:	b111      	cbz	r1, 8005124 <_reclaim_reent+0x68>
 800511e:	4620      	mov	r0, r4
 8005120:	f000 f856 	bl	80051d0 <_free_r>
 8005124:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005126:	b111      	cbz	r1, 800512e <_reclaim_reent+0x72>
 8005128:	4620      	mov	r0, r4
 800512a:	f000 f851 	bl	80051d0 <_free_r>
 800512e:	6a23      	ldr	r3, [r4, #32]
 8005130:	b1b3      	cbz	r3, 8005160 <_reclaim_reent+0xa4>
 8005132:	4620      	mov	r0, r4
 8005134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005138:	4718      	bx	r3
 800513a:	5949      	ldr	r1, [r1, r5]
 800513c:	b941      	cbnz	r1, 8005150 <_reclaim_reent+0x94>
 800513e:	3504      	adds	r5, #4
 8005140:	69e3      	ldr	r3, [r4, #28]
 8005142:	2d80      	cmp	r5, #128	; 0x80
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	d1f8      	bne.n	800513a <_reclaim_reent+0x7e>
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f841 	bl	80051d0 <_free_r>
 800514e:	e7c0      	b.n	80050d2 <_reclaim_reent+0x16>
 8005150:	680e      	ldr	r6, [r1, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	f000 f83c 	bl	80051d0 <_free_r>
 8005158:	4631      	mov	r1, r6
 800515a:	e7ef      	b.n	800513c <_reclaim_reent+0x80>
 800515c:	2500      	movs	r5, #0
 800515e:	e7ef      	b.n	8005140 <_reclaim_reent+0x84>
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	bf00      	nop
 8005164:	2000005c 	.word	0x2000005c

08005168 <__libc_init_array>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4d0d      	ldr	r5, [pc, #52]	; (80051a0 <__libc_init_array+0x38>)
 800516c:	4c0d      	ldr	r4, [pc, #52]	; (80051a4 <__libc_init_array+0x3c>)
 800516e:	1b64      	subs	r4, r4, r5
 8005170:	10a4      	asrs	r4, r4, #2
 8005172:	2600      	movs	r6, #0
 8005174:	42a6      	cmp	r6, r4
 8005176:	d109      	bne.n	800518c <__libc_init_array+0x24>
 8005178:	4d0b      	ldr	r5, [pc, #44]	; (80051a8 <__libc_init_array+0x40>)
 800517a:	4c0c      	ldr	r4, [pc, #48]	; (80051ac <__libc_init_array+0x44>)
 800517c:	f000 f880 	bl	8005280 <_init>
 8005180:	1b64      	subs	r4, r4, r5
 8005182:	10a4      	asrs	r4, r4, #2
 8005184:	2600      	movs	r6, #0
 8005186:	42a6      	cmp	r6, r4
 8005188:	d105      	bne.n	8005196 <__libc_init_array+0x2e>
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005190:	4798      	blx	r3
 8005192:	3601      	adds	r6, #1
 8005194:	e7ee      	b.n	8005174 <__libc_init_array+0xc>
 8005196:	f855 3b04 	ldr.w	r3, [r5], #4
 800519a:	4798      	blx	r3
 800519c:	3601      	adds	r6, #1
 800519e:	e7f2      	b.n	8005186 <__libc_init_array+0x1e>
 80051a0:	080052fc 	.word	0x080052fc
 80051a4:	080052fc 	.word	0x080052fc
 80051a8:	080052fc 	.word	0x080052fc
 80051ac:	08005300 	.word	0x08005300

080051b0 <__retarget_lock_acquire_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <__retarget_lock_release_recursive>:
 80051b2:	4770      	bx	lr

080051b4 <memcpy>:
 80051b4:	440a      	add	r2, r1
 80051b6:	4291      	cmp	r1, r2
 80051b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051bc:	d100      	bne.n	80051c0 <memcpy+0xc>
 80051be:	4770      	bx	lr
 80051c0:	b510      	push	{r4, lr}
 80051c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ca:	4291      	cmp	r1, r2
 80051cc:	d1f9      	bne.n	80051c2 <memcpy+0xe>
 80051ce:	bd10      	pop	{r4, pc}

080051d0 <_free_r>:
 80051d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051d2:	2900      	cmp	r1, #0
 80051d4:	d044      	beq.n	8005260 <_free_r+0x90>
 80051d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051da:	9001      	str	r0, [sp, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f1a1 0404 	sub.w	r4, r1, #4
 80051e2:	bfb8      	it	lt
 80051e4:	18e4      	addlt	r4, r4, r3
 80051e6:	f000 f83f 	bl	8005268 <__malloc_lock>
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <_free_r+0x94>)
 80051ec:	9801      	ldr	r0, [sp, #4]
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	b933      	cbnz	r3, 8005200 <_free_r+0x30>
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	6014      	str	r4, [r2, #0]
 80051f6:	b003      	add	sp, #12
 80051f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051fc:	f000 b83a 	b.w	8005274 <__malloc_unlock>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d908      	bls.n	8005216 <_free_r+0x46>
 8005204:	6825      	ldr	r5, [r4, #0]
 8005206:	1961      	adds	r1, r4, r5
 8005208:	428b      	cmp	r3, r1
 800520a:	bf01      	itttt	eq
 800520c:	6819      	ldreq	r1, [r3, #0]
 800520e:	685b      	ldreq	r3, [r3, #4]
 8005210:	1949      	addeq	r1, r1, r5
 8005212:	6021      	streq	r1, [r4, #0]
 8005214:	e7ed      	b.n	80051f2 <_free_r+0x22>
 8005216:	461a      	mov	r2, r3
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	b10b      	cbz	r3, 8005220 <_free_r+0x50>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d9fa      	bls.n	8005216 <_free_r+0x46>
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	1855      	adds	r5, r2, r1
 8005224:	42a5      	cmp	r5, r4
 8005226:	d10b      	bne.n	8005240 <_free_r+0x70>
 8005228:	6824      	ldr	r4, [r4, #0]
 800522a:	4421      	add	r1, r4
 800522c:	1854      	adds	r4, r2, r1
 800522e:	42a3      	cmp	r3, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	d1e0      	bne.n	80051f6 <_free_r+0x26>
 8005234:	681c      	ldr	r4, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	6053      	str	r3, [r2, #4]
 800523a:	440c      	add	r4, r1
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	e7da      	b.n	80051f6 <_free_r+0x26>
 8005240:	d902      	bls.n	8005248 <_free_r+0x78>
 8005242:	230c      	movs	r3, #12
 8005244:	6003      	str	r3, [r0, #0]
 8005246:	e7d6      	b.n	80051f6 <_free_r+0x26>
 8005248:	6825      	ldr	r5, [r4, #0]
 800524a:	1961      	adds	r1, r4, r5
 800524c:	428b      	cmp	r3, r1
 800524e:	bf04      	itt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	bf04      	itt	eq
 8005258:	1949      	addeq	r1, r1, r5
 800525a:	6021      	streq	r1, [r4, #0]
 800525c:	6054      	str	r4, [r2, #4]
 800525e:	e7ca      	b.n	80051f6 <_free_r+0x26>
 8005260:	b003      	add	sp, #12
 8005262:	bd30      	pop	{r4, r5, pc}
 8005264:	20004c50 	.word	0x20004c50

08005268 <__malloc_lock>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__malloc_lock+0x8>)
 800526a:	f7ff bfa1 	b.w	80051b0 <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	20004c4c 	.word	0x20004c4c

08005274 <__malloc_unlock>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__malloc_unlock+0x8>)
 8005276:	f7ff bf9c 	b.w	80051b2 <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	20004c4c 	.word	0x20004c4c

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
