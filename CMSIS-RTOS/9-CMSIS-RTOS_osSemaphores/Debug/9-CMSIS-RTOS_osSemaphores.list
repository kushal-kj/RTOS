
9-CMSIS-RTOS_osSemaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a20  08006a20  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a28  08006a28  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c18  2000006c  08006a9c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c84  08006a9c  00024c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dcb  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341a  00000000  00000000  00037eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fed  00000000  00000000  0003c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044b1  00000000  00000000  0003d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016641  00000000  00000000  00041bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099709  00000000  00000000  0005822f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cd0  00000000  00000000  000f1938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000f7608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006964 	.word	0x08006964

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006964 	.word	0x08006964

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
};

osSemaphoreId_t uart_semphr_id;

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 80004e2:	f000 fc15 	bl	8000d10 <HAL_Init>
  SystemClock_Config();		/* Configure the system clock */
 80004e6:	f000 f965 	bl	80007b4 <SystemClock_Config>
  MX_GPIO_Init();		    /* Initialize all configured peripherals */
 80004ea:	f000 f9f9 	bl	80008e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f9cd 	bl	800088c <MX_USART2_UART_Init>

  //Initialize the kernel
  osKernelInitialize();
 80004f2:	f002 f905 	bl	8002700 <osKernelInitialize>

  //Create timers
  timer1_id=osTimerNew(Timer1_callback,osTimerOnce, NULL, NULL);			//One-shot timer
 80004f6:	2300      	movs	r3, #0
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	483c      	ldr	r0, [pc, #240]	; (80005f0 <main+0x114>)
 80004fe:	f002 fa0b 	bl	8002918 <osTimerNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a3b      	ldr	r2, [pc, #236]	; (80005f4 <main+0x118>)
 8000506:	6013      	str	r3, [r2, #0]
  timer2_id=osTimerNew(Timer2_callback,osTimerPeriodic, NULL, NULL);		//Periodic timer
 8000508:	2300      	movs	r3, #0
 800050a:	2200      	movs	r2, #0
 800050c:	2101      	movs	r1, #1
 800050e:	483a      	ldr	r0, [pc, #232]	; (80005f8 <main+0x11c>)
 8000510:	f002 fa02 	bl	8002918 <osTimerNew>
 8000514:	4603      	mov	r3, r0
 8000516:	4a39      	ldr	r2, [pc, #228]	; (80005fc <main+0x120>)
 8000518:	6013      	str	r3, [r2, #0]


  //Create Threads

  osThreadAttr_t greenThreadAtrribs={
 800051a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051e:	2224      	movs	r2, #36	; 0x24
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f005 ff06 	bl	8006334 <memset>
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <main+0x124>)
 800052a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800052c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000534:	2318      	movs	r3, #24
 8000536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	4830      	ldr	r0, [pc, #192]	; (8000604 <main+0x128>)
 8000544:	f002 f926 	bl	8002794 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <main+0x12c>)
 800054c:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs={
 800054e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000552:	2224      	movs	r2, #36	; 0x24
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 feec 	bl	8006334 <memset>
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <main+0x130>)
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000566:	2318      	movs	r3, #24
 8000568:	663b      	str	r3, [r7, #96]	; 0x60
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 800056a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800056e:	461a      	mov	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	4827      	ldr	r0, [pc, #156]	; (8000610 <main+0x134>)
 8000574:	f002 f90e 	bl	8002794 <osThreadNew>
 8000578:	4603      	mov	r3, r0
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <main+0x138>)
 800057c:	6013      	str	r3, [r2, #0]

  osThreadAttr_t orangeThreadAtrribs={
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	2224      	movs	r2, #36	; 0x24
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 fed4 	bl	8006334 <memset>
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <main+0x13c>)
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
 8000590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
 8000596:	2318      	movs	r3, #24
 8000598:	63fb      	str	r3, [r7, #60]	; 0x3c
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAtrribs);
 800059a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059e:	461a      	mov	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <main+0x140>)
 80005a4:	f002 f8f6 	bl	8002794 <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <main+0x144>)
 80005ac:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs={
 80005ae:	463b      	mov	r3, r7
 80005b0:	2224      	movs	r2, #36	; 0x24
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 febd 	bl	8006334 <memset>
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <main+0x148>)
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	2318      	movs	r3, #24
 80005c6:	61bb      	str	r3, [r7, #24]
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005c8:	463b      	mov	r3, r7
 80005ca:	461a      	mov	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0x14c>)
 80005d0:	f002 f8e0 	bl	8002794 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <main+0x150>)
 80005d8:	6013      	str	r3, [r2, #0]


  uart_semphr_id = osSemaphoreNew(1, 1, &uartSemaphoreAtrribs);		//Create Semaphore
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <main+0x154>)
 80005dc:	2101      	movs	r1, #1
 80005de:	2001      	movs	r0, #1
 80005e0:	f002 fa44 	bl	8002a6c <osSemaphoreNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <main+0x158>)
 80005e8:	6013      	str	r3, [r2, #0]

  //Start the kernel
  osKernelStart();
 80005ea:	f002 f8ad 	bl	8002748 <osKernelStart>

  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x112>
 80005f0:	08000725 	.word	0x08000725
 80005f4:	200000ec 	.word	0x200000ec
 80005f8:	08000749 	.word	0x08000749
 80005fc:	200000f0 	.word	0x200000f0
 8000600:	0800698c 	.word	0x0800698c
 8000604:	08000639 	.word	0x08000639
 8000608:	200000e0 	.word	0x200000e0
 800060c:	08006998 	.word	0x08006998
 8000610:	080006a1 	.word	0x080006a1
 8000614:	200000dc 	.word	0x200000dc
 8000618:	080069a0 	.word	0x080069a0
 800061c:	080006e5 	.word	0x080006e5
 8000620:	200000e8 	.word	0x200000e8
 8000624:	080069ac 	.word	0x080069ac
 8000628:	08000705 	.word	0x08000705
 800062c:	200000e4 	.word	0x200000e4
 8000630:	080069f8 	.word	0x080069f8
 8000634:	200000fc 	.word	0x200000fc

08000638 <vGreenLedControllerTask>:

}


void vGreenLedControllerTask(void *pvParameters)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	osTimerStart(timer1_id, 5000);		//Set timer 1 period to 5000 ticks
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <vGreenLedControllerTask+0x54>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f241 3188 	movw	r1, #5000	; 0x1388
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f9e1 	bl	8002a10 <osTimerStart>
	osTimerStart(timer2_id, 1000);		//Set timer 2 period to 1000 ticks
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <vGreenLedControllerTask+0x58>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f9da 	bl	8002a10 <osTimerStart>


	while(1)
	{
		Green_TaskProfiler++;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <vGreenLedControllerTask+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <vGreenLedControllerTask+0x5c>)
 8000664:	6013      	str	r3, [r2, #0]

		osSemaphoreAcquire(uart_semphr_id, osWaitForever);
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <vGreenLedControllerTask+0x60>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f04f 31ff 	mov.w	r1, #4294967295
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fa86 	bl	8002b80 <osSemaphoreAcquire>
		printf("This is BlueTask \r\n");
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <vGreenLedControllerTask+0x64>)
 8000676:	f005 fd7d 	bl	8006174 <puts>
		osSemaphoreRelease(uart_semphr_id);
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <vGreenLedControllerTask+0x60>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fad0 	bl	8002c24 <osSemaphoreRelease>
		osDelay(100);
 8000684:	2064      	movs	r0, #100	; 0x64
 8000686:	f002 f917 	bl	80028b8 <osDelay>
		Green_TaskProfiler++;
 800068a:	e7e7      	b.n	800065c <vGreenLedControllerTask+0x24>
 800068c:	200000ec 	.word	0x200000ec
 8000690:	200000f0 	.word	0x200000f0
 8000694:	200000d4 	.word	0x200000d4
 8000698:	200000fc 	.word	0x200000fc
 800069c:	080069b8 	.word	0x080069b8

080006a0 <vRedLedControllerTask>:
	}
}


void vRedLedControllerTask(void *pvParameters)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Red_TaskProfiler++;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <vRedLedControllerTask+0x38>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <vRedLedControllerTask+0x38>)
 80006b0:	6013      	str	r3, [r2, #0]
		osSemaphoreAcquire(uart_semphr_id, osWaitForever);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <vRedLedControllerTask+0x3c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f04f 31ff 	mov.w	r1, #4294967295
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fa60 	bl	8002b80 <osSemaphoreAcquire>
		printf("This is RedTask \r\n");
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <vRedLedControllerTask+0x40>)
 80006c2:	f005 fd57 	bl	8006174 <puts>
		osSemaphoreRelease(uart_semphr_id);
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <vRedLedControllerTask+0x3c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 faaa 	bl	8002c24 <osSemaphoreRelease>
		osDelay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f002 f8f1 	bl	80028b8 <osDelay>
		Red_TaskProfiler++;
 80006d6:	e7e7      	b.n	80006a8 <vRedLedControllerTask+0x8>
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	200000fc 	.word	0x200000fc
 80006e0:	080069cc 	.word	0x080069cc

080006e4 <vOrangeLedControllerTask>:

	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Orange_TaskProfiler++;
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <vOrangeLedControllerTask+0x1c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a03      	ldr	r2, [pc, #12]	; (8000700 <vOrangeLedControllerTask+0x1c>)
 80006f4:	6013      	str	r3, [r2, #0]
		osDelay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f002 f8de 	bl	80028b8 <osDelay>
		Orange_TaskProfiler++;
 80006fc:	e7f6      	b.n	80006ec <vOrangeLedControllerTask+0x8>
 80006fe:	bf00      	nop
 8000700:	200000cc 	.word	0x200000cc

08000704 <vBlueLedControllerTask>:

	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Blue_TaskProfiler++;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <vBlueLedControllerTask+0x1c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <vBlueLedControllerTask+0x1c>)
 8000714:	6013      	str	r3, [r2, #0]
		osDelay(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f002 f8ce 	bl	80028b8 <osDelay>
		Blue_TaskProfiler++;
 800071c:	e7f6      	b.n	800070c <vBlueLedControllerTask+0x8>
 800071e:	bf00      	nop
 8000720:	200000d8 	.word	0x200000d8

08000724 <Timer1_callback>:

	}
}

void Timer1_callback(void *arg)				//You should not put while(1) loop in timer callback function
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	timer1_Taskprofiler++;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <Timer1_callback+0x20>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <Timer1_callback+0x20>)
 8000734:	6013      	str	r3, [r2, #0]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	200000f4 	.word	0x200000f4

08000748 <Timer2_callback>:

void Timer2_callback(void *arg)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	timer2_Taskprofiler++;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <Timer2_callback+0x20>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <Timer2_callback+0x20>)
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000f8 	.word	0x200000f8

0800076c <USART2_write>:


int USART2_write(int ch)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 8000774:	bf00      	nop
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <USART2_write+0x2c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <USART2_write+0xa>
	USART2->DR = (ch & 0xFF);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <USART2_write+0x2c>)
 8000786:	b2db      	uxtb	r3, r3
 8000788:	6053      	str	r3, [r2, #4]
	return ch;
 800078a:	687b      	ldr	r3, [r7, #4]
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40004400 	.word	0x40004400

0800079c <__io_putchar>:

int __io_putchar(int ch)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	USART2_write(ch);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffe1 	bl	800076c <USART2_write>
	return ch;
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fdb6 	bl	8006334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemClock_Config+0xd4>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemClock_Config+0xd4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000828:	2310      	movs	r3, #16
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800082c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000836:	2307      	movs	r3, #7
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fd0e 	bl	8001260 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 f875 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 ff70 	bl	8001750 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f000 f85f 	bl	8000938 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f001 fc16 	bl	80020f4 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f833 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000088 	.word	0x20000088
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_GPIO_Init+0x30>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MX_GPIO_Init+0x30>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_GPIO_Init+0x30>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fa15 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010000 	.word	0x40010000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fabb 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12b      	bne.n	8000a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 8000a12:	f000 faa1 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <HAL_InitTick+0xd0>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	4a2d      	ldr	r2, [pc, #180]	; (8000afc <HAL_InitTick+0xd0>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_InitTick+0xd0>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f894 	bl	8001b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a68:	f001 f87e 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8000a6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_InitTick+0xd4>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9b      	lsrs	r3, r3, #18
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_InitTick+0xdc>)
 8000a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_InitTick+0xd8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aa2:	4818      	ldr	r0, [pc, #96]	; (8000b04 <HAL_InitTick+0xd8>)
 8000aa4:	f001 f8a6 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11b      	bne.n	8000aee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <HAL_InitTick+0xd8>)
 8000ab8:	f001 f8f6 	bl	8001ca8 <HAL_TIM_Base_Start_IT>
 8000abc:	4603      	mov	r3, r0
 8000abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d111      	bne.n	8000aee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 fa36 	bl	8000f3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	d808      	bhi.n	8000ae8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 fa12 	bl	8000f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0xe0>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e002      	b.n	8000aee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	20000100 	.word	0x20000100
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b42:	f001 f913 	bl	8001d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000100 	.word	0x20000100

08000b50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
  }

  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fdf9 	bl	800079c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
  }
  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f005 fc0e 	bl	800647c <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20018000 	.word	0x20018000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000148 	.word	0x20000148
 8000c94:	20004c88 	.word	0x20004c88

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 fbcd 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fbf5 	bl	80004dc <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d00:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 8000d04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d08:	20004c84 	.word	0x20004c84

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f8d8 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f7ff fe74 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fdfe 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	2000014c 	.word	0x2000014c

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000014c 	.word	0x2000014c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e159      	b.n	8001228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8148 	bne.w	8001222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a2 	beq.w	8001222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x202>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2f4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x1fe>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1fa>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2fc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1f6>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a45      	ldr	r2, [pc, #276]	; (8001258 <HAL_GPIO_Init+0x300>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1f2>
 8001146:	2304      	movs	r3, #4
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114a:	2307      	movs	r3, #7
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x204>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_GPIO_Init+0x304>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x304>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_GPIO_Init+0x304>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f aea2 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e267      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d075      	beq.n	800136a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d112      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a2:	d10b      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05b      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d157      	bne.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e242      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x74>
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a75      	ldr	r2, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6f      	ldr	r2, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6c      	ldr	r2, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012f8:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a68      	ldr	r2, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fd30 	bl	8000d7c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fd2c 	bl	8000d7c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e207      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5b      	ldr	r3, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xc0>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fd1c 	bl	8000d7c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fd18 	bl	8000d7c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1f3      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c7      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fcd1 	bl	8000d7c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fccd 	bl	8000d7c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a8      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4925      	ldr	r1, [pc, #148]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x244>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fcb0 	bl	8000d7c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fcac 	bl	8000d7c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e187      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d036      	beq.n	80014b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fc90 	bl	8000d7c <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc8c 	bl	8000d7c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e167      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x240>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x200>
 800147e:	e01b      	b.n	80014b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_OscConfig+0x248>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc79 	bl	8000d7c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e00e      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc75 	bl	8000d7c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d907      	bls.n	80014ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e150      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ea      	bne.n	800148e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8097 	beq.w	80015f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a7c      	ldr	r2, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f2:	2301      	movs	r3, #1
 80014f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d118      	bne.n	8001534 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a73      	ldr	r2, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc35 	bl	8000d7c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff fc31 	bl	8000d7c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e10c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x474>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x2ea>
 800153c:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x30c>
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x324>
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	4a54      	ldr	r2, [pc, #336]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 0304 	bic.w	r3, r3, #4
 8001582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d015      	beq.n	80015b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff fbf6 	bl	8000d7c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fbf2 	bl	8000d7c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0cb      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ee      	beq.n	8001594 <HAL_RCC_OscConfig+0x334>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbe0 	bl	8000d7c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbdc 	bl	8000d7c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0b5      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	4b3e      	ldr	r3, [pc, #248]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ee      	bne.n	80015c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80a1 	beq.w	8001740 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d05c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d141      	bne.n	8001696 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fbb0 	bl	8000d7c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fbac 	bl	8000d7c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e087      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	3b01      	subs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb85 	bl	8000d7c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb81 	bl	8000d7c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e05c      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x416>
 8001694:	e054      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fb6e 	bl	8000d7c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fb6a 	bl	8000d7c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e045      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x444>
 80016c2:	e03d      	b.n	8001740 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e038      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d028      	beq.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d121      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001712:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d107      	bne.n	800173c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa9c 	bl	8000d7c <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa98 	bl	8000d7c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f898 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08006a08 	.word	0x08006a08
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b094      	sub	sp, #80	; 0x50
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
 8001928:	2300      	movs	r3, #0
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80e1 	bhi.w	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e0db      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001954:	e0db      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800195a:	e0d8      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	2200      	movs	r2, #0
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
 800197c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800198e:	4622      	mov	r2, r4
 8001990:	462b      	mov	r3, r5
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0159      	lsls	r1, r3, #5
 800199c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a0:	0150      	lsls	r0, r2, #5
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4621      	mov	r1, r4
 80019a8:	1a51      	subs	r1, r2, r1
 80019aa:	6139      	str	r1, [r7, #16]
 80019ac:	4629      	mov	r1, r5
 80019ae:	eb63 0301 	sbc.w	r3, r3, r1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c0:	4659      	mov	r1, fp
 80019c2:	018b      	lsls	r3, r1, #6
 80019c4:	4651      	mov	r1, sl
 80019c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ca:	4651      	mov	r1, sl
 80019cc:	018a      	lsls	r2, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	ebb2 0801 	subs.w	r8, r2, r1
 80019d4:	4659      	mov	r1, fp
 80019d6:	eb63 0901 	sbc.w	r9, r3, r1
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	eb18 0303 	adds.w	r3, r8, r3
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	462b      	mov	r3, r5
 80019fc:	eb49 0303 	adc.w	r3, r9, r3
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a0e:	4629      	mov	r1, r5
 8001a10:	024b      	lsls	r3, r1, #9
 8001a12:	4621      	mov	r1, r4
 8001a14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a18:	4621      	mov	r1, r4
 8001a1a:	024a      	lsls	r2, r1, #9
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a22:	2200      	movs	r2, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a2c:	f7fe fbd8 	bl	80001e0 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a38:	e058      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	2200      	movs	r2, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	4611      	mov	r1, r2
 8001a46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a54:	4642      	mov	r2, r8
 8001a56:	464b      	mov	r3, r9
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	0159      	lsls	r1, r3, #5
 8001a62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a66:	0150      	lsls	r0, r2, #5
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a72:	4649      	mov	r1, r9
 8001a74:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a8c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a90:	eb63 050b 	sbc.w	r5, r3, fp
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	00eb      	lsls	r3, r5, #3
 8001a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa2:	00e2      	lsls	r2, r4, #3
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	4643      	mov	r3, r8
 8001aaa:	18e3      	adds	r3, r4, r3
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	464b      	mov	r3, r9
 8001ab0:	eb45 0303 	adc.w	r3, r5, r3
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	028b      	lsls	r3, r1, #10
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001acc:	4621      	mov	r1, r4
 8001ace:	028a      	lsls	r2, r1, #10
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae0:	f7fe fb7e 	bl	80001e0 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	3301      	adds	r3, #1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3750      	adds	r7, #80	; 0x50
 8001b14:	46bd      	mov	sp, r7
 8001b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	007a1200 	.word	0x007a1200

08001b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000

08001b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0a9b      	lsrs	r3, r3, #10
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08006a18 	.word	0x08006a18

08001b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b6c:	f7ff ffdc 	bl	8001b28 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0b5b      	lsrs	r3, r3, #13
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08006a18 	.word	0x08006a18

08001b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_RCC_GetClockConfig+0x60>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f9ca 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e044      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cea:	d013      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	; (8001d5c <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d010      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	40014000 	.word	0x40014000

08001d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0202 	mvn.w	r2, #2
 8001d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8ee 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8e0 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8f1 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0204 	mvn.w	r2, #4
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8c4 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8b6 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8c7 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d122      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d11b      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0208 	mvn.w	r2, #8
 8001e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2204      	movs	r2, #4
 8001e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f89a 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f88c 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f89d 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0210 	mvn.w	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f870 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f862 	bl	8001f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f873 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0201 	mvn.w	r2, #1
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fd12 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8e2 	bl	80020e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f838 	bl	8001fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0220 	mvn.w	r2, #32
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8ac 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00f      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d00b      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d017      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00f      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00b      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <TIM_Base_SetConfig+0xf4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <TIM_Base_SetConfig+0xf8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <TIM_Base_SetConfig+0xfc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d108      	bne.n	8002068 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40014000 	.word	0x40014000
 80020c4:	40014400 	.word	0x40014400
 80020c8:	40014800 	.word	0x40014800

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e03f      	b.n	8002186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fc3e 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	; 0x24
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f829 	bl	8002190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800214c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800215c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002194:	b0c0      	sub	sp, #256	; 0x100
 8002196:	af00      	add	r7, sp, #0
 8002198:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ac:	68d9      	ldr	r1, [r3, #12]
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	ea40 0301 	orr.w	r3, r0, r1
 80021b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021e8:	f021 010c 	bic.w	r1, r1, #12
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021f6:	430b      	orrs	r3, r1
 80021f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220a:	6999      	ldr	r1, [r3, #24]
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	ea40 0301 	orr.w	r3, r0, r1
 8002216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b8f      	ldr	r3, [pc, #572]	; (800245c <UART_SetConfig+0x2cc>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <UART_SetConfig+0xa0>
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <UART_SetConfig+0x2d0>)
 800222c:	429a      	cmp	r2, r3
 800222e:	d104      	bne.n	800223a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002230:	f7ff fc9a 	bl	8001b68 <HAL_RCC_GetPCLK2Freq>
 8002234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002238:	e003      	b.n	8002242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800223a:	f7ff fc81 	bl	8001b40 <HAL_RCC_GetPCLK1Freq>
 800223e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800224c:	f040 810c 	bne.w	8002468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002254:	2200      	movs	r2, #0
 8002256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800225a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800225e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002262:	4622      	mov	r2, r4
 8002264:	462b      	mov	r3, r5
 8002266:	1891      	adds	r1, r2, r2
 8002268:	65b9      	str	r1, [r7, #88]	; 0x58
 800226a:	415b      	adcs	r3, r3
 800226c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800226e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002272:	4621      	mov	r1, r4
 8002274:	eb12 0801 	adds.w	r8, r2, r1
 8002278:	4629      	mov	r1, r5
 800227a:	eb43 0901 	adc.w	r9, r3, r1
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800228a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	4623      	mov	r3, r4
 8002298:	eb18 0303 	adds.w	r3, r8, r3
 800229c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022a0:	462b      	mov	r3, r5
 80022a2:	eb49 0303 	adc.w	r3, r9, r3
 80022a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80022b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80022ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80022be:	460b      	mov	r3, r1
 80022c0:	18db      	adds	r3, r3, r3
 80022c2:	653b      	str	r3, [r7, #80]	; 0x50
 80022c4:	4613      	mov	r3, r2
 80022c6:	eb42 0303 	adc.w	r3, r2, r3
 80022ca:	657b      	str	r3, [r7, #84]	; 0x54
 80022cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022d4:	f7fd ff84 	bl	80001e0 <__aeabi_uldivmod>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <UART_SetConfig+0x2d4>)
 80022de:	fba3 2302 	umull	r2, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	011c      	lsls	r4, r3, #4
 80022e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022f8:	4642      	mov	r2, r8
 80022fa:	464b      	mov	r3, r9
 80022fc:	1891      	adds	r1, r2, r2
 80022fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002300:	415b      	adcs	r3, r3
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002308:	4641      	mov	r1, r8
 800230a:	eb12 0a01 	adds.w	sl, r2, r1
 800230e:	4649      	mov	r1, r9
 8002310:	eb43 0b01 	adc.w	fp, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002328:	4692      	mov	sl, r2
 800232a:	469b      	mov	fp, r3
 800232c:	4643      	mov	r3, r8
 800232e:	eb1a 0303 	adds.w	r3, sl, r3
 8002332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002336:	464b      	mov	r3, r9
 8002338:	eb4b 0303 	adc.w	r3, fp, r3
 800233c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800234c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002354:	460b      	mov	r3, r1
 8002356:	18db      	adds	r3, r3, r3
 8002358:	643b      	str	r3, [r7, #64]	; 0x40
 800235a:	4613      	mov	r3, r2
 800235c:	eb42 0303 	adc.w	r3, r2, r3
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
 8002362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800236a:	f7fd ff39 	bl	80001e0 <__aeabi_uldivmod>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4611      	mov	r1, r2
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <UART_SetConfig+0x2d4>)
 8002376:	fba3 2301 	umull	r2, r3, r3, r1
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2264      	movs	r2, #100	; 0x64
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	1acb      	subs	r3, r1, r3
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <UART_SetConfig+0x2d4>)
 800238c:	fba3 2302 	umull	r2, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002398:	441c      	add	r4, r3
 800239a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023ac:	4642      	mov	r2, r8
 80023ae:	464b      	mov	r3, r9
 80023b0:	1891      	adds	r1, r2, r2
 80023b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80023b4:	415b      	adcs	r3, r3
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023bc:	4641      	mov	r1, r8
 80023be:	1851      	adds	r1, r2, r1
 80023c0:	6339      	str	r1, [r7, #48]	; 0x30
 80023c2:	4649      	mov	r1, r9
 80023c4:	414b      	adcs	r3, r1
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023d4:	4659      	mov	r1, fp
 80023d6:	00cb      	lsls	r3, r1, #3
 80023d8:	4651      	mov	r1, sl
 80023da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023de:	4651      	mov	r1, sl
 80023e0:	00ca      	lsls	r2, r1, #3
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	4642      	mov	r2, r8
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023f0:	464b      	mov	r3, r9
 80023f2:	460a      	mov	r2, r1
 80023f4:	eb42 0303 	adc.w	r3, r2, r3
 80023f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002408:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800240c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002410:	460b      	mov	r3, r1
 8002412:	18db      	adds	r3, r3, r3
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 8002416:	4613      	mov	r3, r2
 8002418:	eb42 0303 	adc.w	r3, r2, r3
 800241c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800241e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002426:	f7fd fedb 	bl	80001e0 <__aeabi_uldivmod>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <UART_SetConfig+0x2d4>)
 8002430:	fba3 1302 	umull	r1, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2164      	movs	r1, #100	; 0x64
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <UART_SetConfig+0x2d4>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4422      	add	r2, r4
 8002456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002458:	e106      	b.n	8002668 <UART_SetConfig+0x4d8>
 800245a:	bf00      	nop
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400
 8002464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800246c:	2200      	movs	r2, #0
 800246e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800247a:	4642      	mov	r2, r8
 800247c:	464b      	mov	r3, r9
 800247e:	1891      	adds	r1, r2, r2
 8002480:	6239      	str	r1, [r7, #32]
 8002482:	415b      	adcs	r3, r3
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800248a:	4641      	mov	r1, r8
 800248c:	1854      	adds	r4, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb43 0501 	adc.w	r5, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	00eb      	lsls	r3, r5, #3
 800249e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	4614      	mov	r4, r2
 80024a6:	461d      	mov	r5, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	18e3      	adds	r3, r4, r3
 80024ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024b0:	464b      	mov	r3, r9
 80024b2:	eb45 0303 	adc.w	r3, r5, r3
 80024b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024d6:	4629      	mov	r1, r5
 80024d8:	008b      	lsls	r3, r1, #2
 80024da:	4621      	mov	r1, r4
 80024dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024e0:	4621      	mov	r1, r4
 80024e2:	008a      	lsls	r2, r1, #2
 80024e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024e8:	f7fd fe7a 	bl	80001e0 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4b60      	ldr	r3, [pc, #384]	; (8002674 <UART_SetConfig+0x4e4>)
 80024f2:	fba3 2302 	umull	r2, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	011c      	lsls	r4, r3, #4
 80024fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	1891      	adds	r1, r2, r2
 8002512:	61b9      	str	r1, [r7, #24]
 8002514:	415b      	adcs	r3, r3
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251c:	4641      	mov	r1, r8
 800251e:	1851      	adds	r1, r2, r1
 8002520:	6139      	str	r1, [r7, #16]
 8002522:	4649      	mov	r1, r9
 8002524:	414b      	adcs	r3, r1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002534:	4659      	mov	r1, fp
 8002536:	00cb      	lsls	r3, r1, #3
 8002538:	4651      	mov	r1, sl
 800253a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253e:	4651      	mov	r1, sl
 8002540:	00ca      	lsls	r2, r1, #3
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4603      	mov	r3, r0
 8002548:	4642      	mov	r2, r8
 800254a:	189b      	adds	r3, r3, r2
 800254c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002550:	464b      	mov	r3, r9
 8002552:	460a      	mov	r2, r1
 8002554:	eb42 0303 	adc.w	r3, r2, r3
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	67bb      	str	r3, [r7, #120]	; 0x78
 8002566:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002574:	4649      	mov	r1, r9
 8002576:	008b      	lsls	r3, r1, #2
 8002578:	4641      	mov	r1, r8
 800257a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800257e:	4641      	mov	r1, r8
 8002580:	008a      	lsls	r2, r1, #2
 8002582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002586:	f7fd fe2b 	bl	80001e0 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4611      	mov	r1, r2
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <UART_SetConfig+0x4e4>)
 8002592:	fba3 2301 	umull	r2, r3, r3, r1
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2264      	movs	r2, #100	; 0x64
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	1acb      	subs	r3, r1, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a33      	ldr	r2, [pc, #204]	; (8002674 <UART_SetConfig+0x4e4>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b0:	441c      	add	r4, r3
 80025b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025b6:	2200      	movs	r2, #0
 80025b8:	673b      	str	r3, [r7, #112]	; 0x70
 80025ba:	677a      	str	r2, [r7, #116]	; 0x74
 80025bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	1891      	adds	r1, r2, r2
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	415b      	adcs	r3, r3
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d0:	4641      	mov	r1, r8
 80025d2:	1851      	adds	r1, r2, r1
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	4649      	mov	r1, r9
 80025d8:	414b      	adcs	r3, r1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025e8:	4659      	mov	r1, fp
 80025ea:	00cb      	lsls	r3, r1, #3
 80025ec:	4651      	mov	r1, sl
 80025ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025f2:	4651      	mov	r1, sl
 80025f4:	00ca      	lsls	r2, r1, #3
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	4642      	mov	r2, r8
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	66bb      	str	r3, [r7, #104]	; 0x68
 8002602:	464b      	mov	r3, r9
 8002604:	460a      	mov	r2, r1
 8002606:	eb42 0303 	adc.w	r3, r2, r3
 800260a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	663b      	str	r3, [r7, #96]	; 0x60
 8002616:	667a      	str	r2, [r7, #100]	; 0x64
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002624:	4649      	mov	r1, r9
 8002626:	008b      	lsls	r3, r1, #2
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800262e:	4641      	mov	r1, r8
 8002630:	008a      	lsls	r2, r1, #2
 8002632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002636:	f7fd fdd3 	bl	80001e0 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <UART_SetConfig+0x4e4>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <UART_SetConfig+0x4e4>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4422      	add	r2, r4
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800266e:	46bd      	mov	sp, r7
 8002670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <__NVIC_SetPriority>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Handler+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026d4:	f002 fa28 	bl	8004b28 <xTaskGetSchedulerState>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026de:	f003 f9cb 	bl	8005a78 <xPortSysTickHandler>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026f0:	2100      	movs	r1, #0
 80026f2:	f06f 0004 	mvn.w	r0, #4
 80026f6:	f7ff ffbf 	bl	8002678 <__NVIC_SetPriority>
#endif
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002706:	f3ef 8305 	mrs	r3, IPSR
 800270a:	603b      	str	r3, [r7, #0]
  return(result);
 800270c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002712:	f06f 0305 	mvn.w	r3, #5
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e00c      	b.n	8002734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <osKernelInitialize+0x44>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <osKernelInitialize+0x44>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	e002      	b.n	8002734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000150 	.word	0x20000150

08002748 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800274e:	f3ef 8305 	mrs	r3, IPSR
 8002752:	603b      	str	r3, [r7, #0]
  return(result);
 8002754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <osKernelStart+0x1a>
    stat = osErrorISR;
 800275a:	f06f 0305 	mvn.w	r3, #5
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	e010      	b.n	8002784 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <osKernelStart+0x48>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d109      	bne.n	800277e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800276a:	f7ff ffbf 	bl	80026ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <osKernelStart+0x48>)
 8002770:	2202      	movs	r2, #2
 8002772:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002774:	f001 fd7c 	bl	8004270 <vTaskStartScheduler>
      stat = osOK;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	e002      	b.n	8002784 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000150 	.word	0x20000150

08002794 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af04      	add	r7, sp, #16
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a4:	f3ef 8305 	mrs	r3, IPSR
 80027a8:	617b      	str	r3, [r7, #20]
  return(result);
 80027aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d17e      	bne.n	80028ae <osThreadNew+0x11a>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d07b      	beq.n	80028ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027ba:	2318      	movs	r3, #24
 80027bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d045      	beq.n	800285a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <osThreadNew+0x48>
        name = attr->name;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <osThreadNew+0x6e>
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2b38      	cmp	r3, #56	; 0x38
 80027f4:	d805      	bhi.n	8002802 <osThreadNew+0x6e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <osThreadNew+0x72>
        return (NULL);
 8002802:	2300      	movs	r3, #0
 8002804:	e054      	b.n	80028b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <osThreadNew+0xa8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2ba7      	cmp	r3, #167	; 0xa7
 8002824:	d90a      	bls.n	800283c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <osThreadNew+0xa8>
        mem = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e010      	b.n	800285e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <osThreadNew+0xca>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <osThreadNew+0xca>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <osThreadNew+0xca>
          mem = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e001      	b.n	800285e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d110      	bne.n	8002886 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800286c:	9202      	str	r2, [sp, #8]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f001 fb0c 	bl	8003e98 <xTaskCreateStatic>
 8002880:	4603      	mov	r3, r0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e013      	b.n	80028ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d110      	bne.n	80028ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	b29a      	uxth	r2, r3
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f001 fb57 	bl	8003f52 <xTaskCreate>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <osThreadNew+0x11a>
            hTask = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ae:	693b      	ldr	r3, [r7, #16]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c0:	f3ef 8305 	mrs	r3, IPSR
 80028c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <osDelay+0x1c>
    stat = osErrorISR;
 80028cc:	f06f 0305 	mvn.w	r3, #5
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e007      	b.n	80028e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fc92 	bl	8004208 <vTaskDelay>
    }
  }

  return (stat);
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f002 fedc 	bl	80056b4 <pvTimerGetTimerID>
 80028fc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6852      	ldr	r2, [r2, #4]
 800290c:	4610      	mov	r0, r2
 800290e:	4798      	blx	r3
  }
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b08c      	sub	sp, #48	; 0x30
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800292c:	f3ef 8305 	mrs	r3, IPSR
 8002930:	613b      	str	r3, [r7, #16]
  return(result);
 8002932:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002934:	2b00      	cmp	r3, #0
 8002936:	d163      	bne.n	8002a00 <osTimerNew+0xe8>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d060      	beq.n	8002a00 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800293e:	2008      	movs	r0, #8
 8002940:	f003 f92a 	bl	8005b98 <pvPortMalloc>
 8002944:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d059      	beq.n	8002a00 <osTimerNew+0xe8>
      callb->func = func;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <osTimerNew+0x4c>
        reload = pdFALSE;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e001      	b.n	8002968 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <osTimerNew+0x6e>
          name = attr->name;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <osTimerNew+0x84>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b2b      	cmp	r3, #43	; 0x2b
 8002994:	d902      	bls.n	800299c <osTimerNew+0x84>
          mem = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e00c      	b.n	80029b6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <osTimerNew+0x9e>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <osTimerNew+0x9e>
            mem = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e001      	b.n	80029b6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10c      	bne.n	80029d6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <osTimerNew+0xf4>)
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	2101      	movs	r1, #1
 80029cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ce:	f002 faf2 	bl	8004fb6 <xTimerCreateStatic>
 80029d2:	6238      	str	r0, [r7, #32]
 80029d4:	e00b      	b.n	80029ee <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <osTimerNew+0xf4>)
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	2101      	movs	r1, #1
 80029e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029e8:	f002 fac4 	bl	8004f74 <xTimerCreate>
 80029ec:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <osTimerNew+0xe8>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <osTimerNew+0xe8>
        vPortFree (callb);
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f003 f998 	bl	8005d30 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002a00:	6a3b      	ldr	r3, [r7, #32]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	080028ef 	.word	0x080028ef

08002a10 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1e:	f3ef 8305 	mrs	r3, IPSR
 8002a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a24:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <osTimerStart+0x22>
    stat = osErrorISR;
 8002a2a:	f06f 0305 	mvn.w	r3, #5
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	e017      	b.n	8002a62 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002a38:	f06f 0303 	mvn.w	r3, #3
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e010      	b.n	8002a62 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2300      	movs	r3, #0
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	2104      	movs	r1, #4
 8002a4a:	6938      	ldr	r0, [r7, #16]
 8002a4c:	f002 fb2c 	bl	80050a8 <xTimerGenericCommand>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d102      	bne.n	8002a5c <osTimerStart+0x4c>
      stat = osOK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e002      	b.n	8002a62 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002a5c:	f06f 0302 	mvn.w	r3, #2
 8002a60:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002a62:	697b      	ldr	r3, [r7, #20]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7c:	f3ef 8305 	mrs	r3, IPSR
 8002a80:	613b      	str	r3, [r7, #16]
  return(result);
 8002a82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d175      	bne.n	8002b74 <osSemaphoreNew+0x108>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d072      	beq.n	8002b74 <osSemaphoreNew+0x108>
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d86e      	bhi.n	8002b74 <osSemaphoreNew+0x108>
    mem = -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d015      	beq.n	8002ace <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <osSemaphoreNew+0x4c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b4f      	cmp	r3, #79	; 0x4f
 8002ab0:	d902      	bls.n	8002ab8 <osSemaphoreNew+0x4c>
        mem = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	e00c      	b.n	8002ad2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d108      	bne.n	8002ad2 <osSemaphoreNew+0x66>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <osSemaphoreNew+0x66>
          mem = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e001      	b.n	8002ad2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d04c      	beq.n	8002b74 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d128      	bne.n	8002b32 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10a      	bne.n	8002afc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2203      	movs	r2, #3
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 fa2a 	bl	8002f4c <xQueueGenericCreateStatic>
 8002af8:	61f8      	str	r0, [r7, #28]
 8002afa:	e005      	b.n	8002b08 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002afc:	2203      	movs	r2, #3
 8002afe:	2100      	movs	r1, #0
 8002b00:	2001      	movs	r0, #1
 8002b02:	f000 fa9b 	bl	800303c <xQueueGenericCreate>
 8002b06:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d022      	beq.n	8002b54 <osSemaphoreNew+0xe8>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01f      	beq.n	8002b54 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002b14:	2300      	movs	r3, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	69f8      	ldr	r0, [r7, #28]
 8002b1c:	f000 fb56 	bl	80031cc <xQueueGenericSend>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d016      	beq.n	8002b54 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002b26:	69f8      	ldr	r0, [r7, #28]
 8002b28:	f000 ffe2 	bl	8003af0 <vQueueDelete>
            hSemaphore = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	e010      	b.n	8002b54 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d108      	bne.n	8002b4a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fad8 	bl	80030f6 <xQueueCreateCountingSemaphoreStatic>
 8002b46:	61f8      	str	r0, [r7, #28]
 8002b48:	e004      	b.n	8002b54 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fb09 	bl	8003164 <xQueueCreateCountingSemaphore>
 8002b52:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e001      	b.n	8002b6c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002b6c:	6979      	ldr	r1, [r7, #20]
 8002b6e:	69f8      	ldr	r0, [r7, #28]
 8002b70:	f001 f90a 	bl	8003d88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002b74:	69fb      	ldr	r3, [r7, #28]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002b98:	f06f 0303 	mvn.w	r3, #3
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e039      	b.n	8002c14 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba0:	f3ef 8305 	mrs	r3, IPSR
 8002ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d022      	beq.n	8002bf2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002bb2:	f06f 0303 	mvn.w	r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e02c      	b.n	8002c14 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	6938      	ldr	r0, [r7, #16]
 8002bc8:	f000 ff12 	bl	80039f0 <xQueueReceiveFromISR>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d003      	beq.n	8002bda <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002bd2:	f06f 0302 	mvn.w	r3, #2
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e01c      	b.n	8002c14 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d019      	beq.n	8002c14 <osSemaphoreAcquire+0x94>
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <osSemaphoreAcquire+0xa0>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	e010      	b.n	8002c14 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	6938      	ldr	r0, [r7, #16]
 8002bf6:	f000 fdef 	bl	80037d8 <xQueueSemaphoreTake>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d009      	beq.n	8002c14 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002c06:	f06f 0301 	mvn.w	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e002      	b.n	8002c14 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002c0e:	f06f 0302 	mvn.w	r3, #2
 8002c12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002c14:	697b      	ldr	r3, [r7, #20]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002c3a:	f06f 0303 	mvn.w	r3, #3
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e02c      	b.n	8002c9c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c42:	f3ef 8305 	mrs	r3, IPSR
 8002c46:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01a      	beq.n	8002c84 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	4619      	mov	r1, r3
 8002c58:	6938      	ldr	r0, [r7, #16]
 8002c5a:	f000 fc50 	bl	80034fe <xQueueGiveFromISR>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d003      	beq.n	8002c6c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002c64:	f06f 0302 	mvn.w	r3, #2
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e017      	b.n	8002c9c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d014      	beq.n	8002c9c <osSemaphoreRelease+0x78>
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <osSemaphoreRelease+0x84>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	e00b      	b.n	8002c9c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002c84:	2300      	movs	r3, #0
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	6938      	ldr	r0, [r7, #16]
 8002c8c:	f000 fa9e 	bl	80031cc <xQueueGenericSend>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d002      	beq.n	8002c9c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002c96:	f06f 0302 	mvn.w	r3, #2
 8002c9a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002c9c:	697b      	ldr	r3, [r7, #20]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <vApplicationGetIdleTaskMemory+0x30>)
 8002cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000154 	.word	0x20000154
 8002cdc:	200001fc 	.word	0x200001fc

08002ce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <vApplicationGetTimerTaskMemory+0x2c>)
 8002cf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <vApplicationGetTimerTaskMemory+0x30>)
 8002cf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	200003fc 	.word	0x200003fc
 8002d10:	200004a4 	.word	0x200004a4

08002d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f103 0208 	add.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f103 0208 	add.w	r2, r3, #8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0208 	add.w	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d103      	bne.n	8002dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00c      	b.n	8002df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e002      	b.n	8002de4 <vListInsert+0x2e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d2f6      	bcs.n	8002dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d103      	bne.n	8002e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ea6:	f002 fd55 	bl	8005954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01a      	beq.n	8002f3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3310      	adds	r3, #16
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fc4b 	bl	80047a4 <xTaskRemoveFromEventList>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <xQueueGenericReset+0xcc>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	e009      	b.n	8002f3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3310      	adds	r3, #16
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fef2 	bl	8002d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff feed 	bl	8002d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f3a:	f002 fd3b 	bl	80059b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <xQueueGenericCreateStatic+0x52>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <xQueueGenericCreateStatic+0x56>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericCreateStatic+0x58>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	623b      	str	r3, [r7, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <xQueueGenericCreateStatic+0x7e>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <xQueueGenericCreateStatic+0x82>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericCreateStatic+0x84>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	61fb      	str	r3, [r7, #28]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fea:	2350      	movs	r3, #80	; 0x50
 8002fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b50      	cmp	r3, #80	; 0x50
 8002ff2:	d00a      	beq.n	800300a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61bb      	str	r3, [r7, #24]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800300a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800301e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f83f 	bl	80030b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	; 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	613b      	str	r3, [r7, #16]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3350      	adds	r3, #80	; 0x50
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fd8f 	bl	8005b98 <pvPortMalloc>
 800307a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d011      	beq.n	80030a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3350      	adds	r3, #80	; 0x50
 800308a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003094:	79fa      	ldrb	r2, [r7, #7]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f805 	bl	80030b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030a6:	69bb      	ldr	r3, [r7, #24]
	}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e002      	b.n	80030d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030de:	2101      	movs	r1, #1
 80030e0:	69b8      	ldr	r0, [r7, #24]
 80030e2:	f7ff fecb 	bl	8002e7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b08a      	sub	sp, #40	; 0x28
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90a      	bls.n	800313c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	617b      	str	r3, [r7, #20]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800313c:	2302      	movs	r3, #2
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff00 	bl	8002f4c <xQueueGenericCreateStatic>
 800314c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800315a:	69fb      	ldr	r3, [r7, #28]
	}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	613b      	str	r3, [r7, #16]
}
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90a      	bls.n	80031a8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60fb      	str	r3, [r7, #12]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80031a8:	2202      	movs	r2, #2
 80031aa:	2100      	movs	r1, #0
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff45 	bl	800303c <xQueueGenericCreate>
 80031b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80031c0:	697b      	ldr	r3, [r7, #20]
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	; 0x38
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031da:	2300      	movs	r3, #0
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <xQueueGenericSend+0x32>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <xQueueGenericSend+0x40>
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <xQueueGenericSend+0x44>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <xQueueGenericSend+0x46>
 8003210:	2300      	movs	r3, #0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10a      	bne.n	800322c <xQueueGenericSend+0x60>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d103      	bne.n	800323a <xQueueGenericSend+0x6e>
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <xQueueGenericSend+0x72>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <xQueueGenericSend+0x74>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <xQueueGenericSend+0x8e>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	623b      	str	r3, [r7, #32]
}
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800325a:	f001 fc65 	bl	8004b28 <xTaskGetSchedulerState>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d102      	bne.n	800326a <xQueueGenericSend+0x9e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueGenericSend+0xa2>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSend+0xa4>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xQueueGenericSend+0xbe>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61fb      	str	r3, [r7, #28]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800328a:	f002 fb63 	bl	8005954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <xQueueGenericSend+0xd4>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d129      	bne.n	80032f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a6:	f000 fc5e 	bl	8003b66 <prvCopyDataToQueue>
 80032aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fa73 	bl	80047a4 <xTaskRemoveFromEventList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032c4:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <xQueueGenericSend+0x1f8>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	e00a      	b.n	80032ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <xQueueGenericSend+0x1f8>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032ec:	f002 fb62 	bl	80059b4 <vPortExitCritical>
				return pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e063      	b.n	80033bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032fa:	f002 fb5b 	bl	80059b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	e05c      	b.n	80033bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	2b00      	cmp	r3, #0
 8003306:	d106      	bne.n	8003316 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4618      	mov	r0, r3
 800330e:	f001 faad 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003316:	f002 fb4d 	bl	80059b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800331a:	f001 f819 	bl	8004350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800331e:	f002 fb19 	bl	8005954 <vPortEnterCritical>
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003328:	b25b      	sxtb	r3, r3
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d103      	bne.n	8003338 <xQueueGenericSend+0x16c>
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333e:	b25b      	sxtb	r3, r3
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d103      	bne.n	800334e <xQueueGenericSend+0x182>
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334e:	f002 fb31 	bl	80059b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003352:	1d3a      	adds	r2, r7, #4
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fa9c 	bl	8004898 <xTaskCheckForTimeOut>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d124      	bne.n	80033b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003368:	f000 fcf5 	bl	8003d56 <prvIsQueueFull>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	3310      	adds	r3, #16
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 f9c2 	bl	8004704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003382:	f000 fc80 	bl	8003c86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003386:	f000 fff1 	bl	800436c <xTaskResumeAll>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f47f af7c 	bne.w	800328a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <xQueueGenericSend+0x1f8>)
 8003394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	e772      	b.n	800328a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033a6:	f000 fc6e 	bl	8003c86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033aa:	f000 ffdf 	bl	800436c <xTaskResumeAll>
 80033ae:	e76c      	b.n	800328a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b2:	f000 fc68 	bl	8003c86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033b6:	f000 ffd9 	bl	800436c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3738      	adds	r7, #56	; 0x38
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b090      	sub	sp, #64	; 0x40
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <xQueueGenericSendFromISR+0x3c>
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <xQueueGenericSendFromISR+0x40>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <xQueueGenericSendFromISR+0x42>
 8003408:	2300      	movs	r3, #0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <xQueueGenericSendFromISR+0x6a>
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <xQueueGenericSendFromISR+0x6e>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <xQueueGenericSendFromISR+0x70>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	623b      	str	r3, [r7, #32]
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003452:	f002 fb61 	bl	8005b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003456:	f3ef 8211 	mrs	r2, BASEPRI
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	61fa      	str	r2, [r7, #28]
 800346c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800346e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <xQueueGenericSendFromISR+0xbc>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d12f      	bne.n	80034e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800349a:	f000 fb64 	bl	8003b66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800349e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d112      	bne.n	80034ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	3324      	adds	r3, #36	; 0x24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 f975 	bl	80047a4 <xTaskRemoveFromEventList>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00e      	beq.n	80034de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e007      	b.n	80034de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034d2:	3301      	adds	r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	b25a      	sxtb	r2, r3
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034de:	2301      	movs	r3, #1
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034e2:	e001      	b.n	80034e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3740      	adds	r7, #64	; 0x40
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b08e      	sub	sp, #56	; 0x38
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	623b      	str	r3, [r7, #32]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	61fb      	str	r3, [r7, #28]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <xQueueGiveFromISR+0x58>
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <xQueueGiveFromISR+0x5c>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueGiveFromISR+0x5e>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	61bb      	str	r3, [r7, #24]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003576:	f002 facf 	bl	8005b18 <vPortValidateInterruptPriority>
	__asm volatile
 800357a:	f3ef 8211 	mrs	r2, BASEPRI
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	617a      	str	r2, [r7, #20]
 8003590:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003592:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d22b      	bcs.n	80035fe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d112      	bne.n	80035e8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	3324      	adds	r3, #36	; 0x24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 f8e8 	bl	80047a4 <xTaskRemoveFromEventList>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e007      	b.n	80035f8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	b25a      	sxtb	r2, r3
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035f8:	2301      	movs	r3, #1
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	e001      	b.n	8003602 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f383 8811 	msr	BASEPRI, r3
}
 800360c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003610:	4618      	mov	r0, r3
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	; 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xQueueReceive+0x30>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	623b      	str	r3, [r7, #32]
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <xQueueReceive+0x3e>
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <xQueueReceive+0x42>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueReceive+0x44>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueReceive+0x5e>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	61fb      	str	r3, [r7, #28]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003676:	f001 fa57 	bl	8004b28 <xTaskGetSchedulerState>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <xQueueReceive+0x6e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xQueueReceive+0x72>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <xQueueReceive+0x74>
 800368a:	2300      	movs	r3, #0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10a      	bne.n	80036a6 <xQueueReceive+0x8e>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
}
 80036a2:	bf00      	nop
 80036a4:	e7fe      	b.n	80036a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036a6:	f002 f955 	bl	8005954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01f      	beq.n	80036f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ba:	f000 fabe 	bl	8003c3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00f      	beq.n	80036ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	3310      	adds	r3, #16
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f866 	bl	80047a4 <xTaskRemoveFromEventList>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <xQueueReceive+0x1bc>)
 80036e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036ee:	f002 f961 	bl	80059b4 <vPortExitCritical>
				return pdPASS;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e069      	b.n	80037ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036fc:	f002 f95a 	bl	80059b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003700:	2300      	movs	r3, #0
 8003702:	e062      	b.n	80037ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800370a:	f107 0310 	add.w	r3, r7, #16
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f8ac 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003718:	f002 f94c 	bl	80059b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800371c:	f000 fe18 	bl	8004350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003720:	f002 f918 	bl	8005954 <vPortEnterCritical>
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800372a:	b25b      	sxtb	r3, r3
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d103      	bne.n	800373a <xQueueReceive+0x122>
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003740:	b25b      	sxtb	r3, r3
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d103      	bne.n	8003750 <xQueueReceive+0x138>
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003750:	f002 f930 	bl	80059b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003754:	1d3a      	adds	r2, r7, #4
 8003756:	f107 0310 	add.w	r3, r7, #16
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f001 f89b 	bl	8004898 <xTaskCheckForTimeOut>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d123      	bne.n	80037b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800376a:	f000 fade 	bl	8003d2a <prvIsQueueEmpty>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d017      	beq.n	80037a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	3324      	adds	r3, #36	; 0x24
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ffc1 	bl	8004704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003784:	f000 fa7f 	bl	8003c86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003788:	f000 fdf0 	bl	800436c <xTaskResumeAll>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d189      	bne.n	80036a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <xQueueReceive+0x1bc>)
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	e780      	b.n	80036a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037a6:	f000 fa6e 	bl	8003c86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037aa:	f000 fddf 	bl	800436c <xTaskResumeAll>
 80037ae:	e77a      	b.n	80036a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b2:	f000 fa68 	bl	8003c86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037b6:	f000 fdd9 	bl	800436c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037bc:	f000 fab5 	bl	8003d2a <prvIsQueueEmpty>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f43f af6f 	beq.w	80036a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3730      	adds	r7, #48	; 0x30
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	; 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xQueueSemaphoreTake+0x32>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	623b      	str	r3, [r7, #32]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	61fb      	str	r3, [r7, #28]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003828:	f001 f97e 	bl	8004b28 <xTaskGetSchedulerState>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <xQueueSemaphoreTake+0x60>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <xQueueSemaphoreTake+0x64>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <xQueueSemaphoreTake+0x66>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	61bb      	str	r3, [r7, #24]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003858:	f002 f87c 	bl	8005954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d024      	beq.n	80038b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	1e5a      	subs	r2, r3, #1
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003878:	f001 facc 	bl	8004e14 <pvTaskIncrementMutexHeldCount>
 800387c:	4602      	mov	r2, r0
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00f      	beq.n	80038aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	3310      	adds	r3, #16
 800388e:	4618      	mov	r0, r3
 8003890:	f000 ff88 	bl	80047a4 <xTaskRemoveFromEventList>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800389a:	4b54      	ldr	r3, [pc, #336]	; (80039ec <xQueueSemaphoreTake+0x214>)
 800389c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038aa:	f002 f883 	bl	80059b4 <vPortExitCritical>
				return pdPASS;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e097      	b.n	80039e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	617b      	str	r3, [r7, #20]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80038d4:	f002 f86e 	bl	80059b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038d8:	2300      	movs	r3, #0
 80038da:	e082      	b.n	80039e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 ffc0 	bl	800486c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038f0:	f002 f860 	bl	80059b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038f4:	f000 fd2c 	bl	8004350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038f8:	f002 f82c 	bl	8005954 <vPortEnterCritical>
 80038fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003902:	b25b      	sxtb	r3, r3
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d103      	bne.n	8003912 <xQueueSemaphoreTake+0x13a>
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003918:	b25b      	sxtb	r3, r3
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d103      	bne.n	8003928 <xQueueSemaphoreTake+0x150>
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003928:	f002 f844 	bl	80059b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800392c:	463a      	mov	r2, r7
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f000 ffaf 	bl	8004898 <xTaskCheckForTimeOut>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d132      	bne.n	80039a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003942:	f000 f9f2 	bl	8003d2a <prvIsQueueEmpty>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d026      	beq.n	800399a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003954:	f001 fffe 	bl	8005954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f901 	bl	8004b64 <xTaskPriorityInherit>
 8003962:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003964:	f002 f826 	bl	80059b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fec7 	bl	8004704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003978:	f000 f985 	bl	8003c86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800397c:	f000 fcf6 	bl	800436c <xTaskResumeAll>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	f47f af68 	bne.w	8003858 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <xQueueSemaphoreTake+0x214>)
 800398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	e75e      	b.n	8003858 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800399a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800399c:	f000 f973 	bl	8003c86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039a0:	f000 fce4 	bl	800436c <xTaskResumeAll>
 80039a4:	e758      	b.n	8003858 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80039a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039a8:	f000 f96d 	bl	8003c86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ac:	f000 fcde 	bl	800436c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039b2:	f000 f9ba 	bl	8003d2a <prvIsQueueEmpty>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f43f af4d 	beq.w	8003858 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80039c4:	f001 ffc6 	bl	8005954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80039c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039ca:	f000 f8b4 	bl	8003b36 <prvGetDisinheritPriorityAfterTimeout>
 80039ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f99a 	bl	8004d10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80039dc:	f001 ffea 	bl	80059b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3738      	adds	r7, #56	; 0x38
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	; 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	623b      	str	r3, [r7, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <xQueueReceiveFromISR+0x3a>
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <xQueueReceiveFromISR+0x3e>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueReceiveFromISR+0x40>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	61fb      	str	r3, [r7, #28]
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a4a:	f002 f865 	bl	8005b18 <vPortValidateInterruptPriority>
	__asm volatile
 8003a4e:	f3ef 8211 	mrs	r2, BASEPRI
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	61ba      	str	r2, [r7, #24]
 8003a64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003a66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02f      	beq.n	8003ad6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a84:	f000 f8d9 	bl	8003c3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d112      	bne.n	8003ac0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fe7c 	bl	80047a4 <xTaskRemoveFromEventList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e007      	b.n	8003ad0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	b25a      	sxtb	r2, r3
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad4:	e001      	b.n	8003ada <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f383 8811 	msr	BASEPRI, r3
}
 8003ae4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3738      	adds	r7, #56	; 0x38
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <vQueueDelete+0x28>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	60bb      	str	r3, [r7, #8]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f95f 	bl	8003ddc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f002 f901 	bl	8005d30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	e001      	b.n	8003b58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003b58:	68fb      	ldr	r3, [r7, #12]
	}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d14d      	bne.n	8003c28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f84f 	bl	8004c34 <xTaskPriorityDisinherit>
 8003b96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e043      	b.n	8003c28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d119      	bne.n	8003bda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6858      	ldr	r0, [r3, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	f002 fc8f 	bl	80064d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d32b      	bcc.n	8003c28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	e026      	b.n	8003c28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68d8      	ldr	r0, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	461a      	mov	r2, r3
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	f002 fc75 	bl	80064d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	425b      	negs	r3, r3
 8003bf4:	441a      	add	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d207      	bcs.n	8003c16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	425b      	negs	r3, r3
 8003c10:	441a      	add	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d105      	bne.n	8003c28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c30:	697b      	ldr	r3, [r7, #20]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d018      	beq.n	8003c7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d303      	bcc.n	8003c6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68d9      	ldr	r1, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	461a      	mov	r2, r3
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f002 fc2b 	bl	80064d4 <memcpy>
	}
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c8e:	f001 fe61 	bl	8005954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c9a:	e011      	b.n	8003cc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd7b 	bl	80047a4 <xTaskRemoveFromEventList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cb4:	f000 fe52 	bl	800495c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dce9      	bgt.n	8003c9c <prvUnlockQueue+0x16>
 8003cc8:	e000      	b.n	8003ccc <prvUnlockQueue+0x46>
					break;
 8003cca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cd4:	f001 fe6e 	bl	80059b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cd8:	f001 fe3c 	bl	8005954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce4:	e011      	b.n	8003d0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d012      	beq.n	8003d14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fd56 	bl	80047a4 <xTaskRemoveFromEventList>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cfe:	f000 fe2d 	bl	800495c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d02:	7bbb      	ldrb	r3, [r7, #14]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	dce9      	bgt.n	8003ce6 <prvUnlockQueue+0x60>
 8003d12:	e000      	b.n	8003d16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d1e:	f001 fe49 	bl	80059b4 <vPortExitCritical>
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d32:	f001 fe0f 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e001      	b.n	8003d48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d48:	f001 fe34 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d5e:	f001 fdf9 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d102      	bne.n	8003d74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e001      	b.n	8003d78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d78:	f001 fe1c 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e014      	b.n	8003dc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d98:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <vQueueAddToRegistry+0x50>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003da4:	490c      	ldr	r1, [pc, #48]	; (8003dd8 <vQueueAddToRegistry+0x50>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <vQueueAddToRegistry+0x50>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dba:	e006      	b.n	8003dca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d9e7      	bls.n	8003d98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	200008a4 	.word	0x200008a4

08003ddc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e016      	b.n	8003e18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <vQueueUnregisterQueue+0x50>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10b      	bne.n	8003e12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <vQueueUnregisterQueue+0x50>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <vQueueUnregisterQueue+0x50>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
				break;
 8003e10:	e006      	b.n	8003e20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b07      	cmp	r3, #7
 8003e1c:	d9e5      	bls.n	8003dea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	200008a4 	.word	0x200008a4

08003e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e40:	f001 fd88 	bl	8005954 <vPortEnterCritical>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d103      	bne.n	8003e5a <vQueueWaitForMessageRestricted+0x2a>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d103      	bne.n	8003e70 <vQueueWaitForMessageRestricted+0x40>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e70:	f001 fda0 	bl	80059b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3324      	adds	r3, #36	; 0x24
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fc61 	bl	800474c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	f7ff fefb 	bl	8003c86 <prvUnlockQueue>
	}
 8003e90:	bf00      	nop
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	; 0x38
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	623b      	str	r3, [r7, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10a      	bne.n	8003ede <xTaskCreateStatic+0x46>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	61fb      	str	r3, [r7, #28]
}
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ede:	23a8      	movs	r3, #168	; 0xa8
 8003ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2ba8      	cmp	r3, #168	; 0xa8
 8003ee6:	d00a      	beq.n	8003efe <xTaskCreateStatic+0x66>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	61bb      	str	r3, [r7, #24]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003efe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01e      	beq.n	8003f44 <xTaskCreateStatic+0xac>
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	9302      	str	r3, [sp, #8]
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f850 	bl	8003fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f3e:	f000 f8f3 	bl	8004128 <prvAddNewTaskToReadyList>
 8003f42:	e001      	b.n	8003f48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f48:	697b      	ldr	r3, [r7, #20]
	}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08c      	sub	sp, #48	; 0x30
 8003f56:	af04      	add	r7, sp, #16
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fe16 	bl	8005b98 <pvPortMalloc>
 8003f6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f74:	20a8      	movs	r0, #168	; 0xa8
 8003f76:	f001 fe0f 	bl	8005b98 <pvPortMalloc>
 8003f7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
 8003f88:	e005      	b.n	8003f96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f001 fed0 	bl	8005d30 <vPortFree>
 8003f90:	e001      	b.n	8003f96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9303      	str	r3, [sp, #12]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f80e 	bl	8003fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fc0:	69f8      	ldr	r0, [r7, #28]
 8003fc2:	f000 f8b1 	bl	8004128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e002      	b.n	8003fd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	21a5      	movs	r1, #165	; 0xa5
 8003ff6:	f002 f99d 	bl	8006334 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004004:	3b01      	subs	r3, #1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <prvInitialiseNewTask+0x58>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	617b      	str	r3, [r7, #20]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01f      	beq.n	800407a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e012      	b.n	8004066 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	7819      	ldrb	r1, [r3, #0]
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	3334      	adds	r3, #52	; 0x34
 8004050:	460a      	mov	r2, r1
 8004052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d9e9      	bls.n	8004040 <prvInitialiseNewTask+0x64>
 800406c:	e000      	b.n	8004070 <prvInitialiseNewTask+0x94>
			{
				break;
 800406e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004078:	e003      	b.n	8004082 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	2b37      	cmp	r3, #55	; 0x37
 8004086:	d901      	bls.n	800408c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004088:	2337      	movs	r3, #55	; 0x37
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004096:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2200      	movs	r2, #0
 800409c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	3304      	adds	r3, #4
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fe56 	bl	8002d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	3318      	adds	r3, #24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fe51 	bl	8002d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	3354      	adds	r3, #84	; 0x54
 80040dc:	224c      	movs	r2, #76	; 0x4c
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f002 f927 	bl	8006334 <memset>
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <prvInitialiseNewTask+0x140>)
 80040ea:	659a      	str	r2, [r3, #88]	; 0x58
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <prvInitialiseNewTask+0x144>)
 80040f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	4a0b      	ldr	r2, [pc, #44]	; (8004124 <prvInitialiseNewTask+0x148>)
 80040f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	69b8      	ldr	r0, [r7, #24]
 80040fe:	f001 faf9 	bl	80056f4 <pxPortInitialiseStack>
 8004102:	4602      	mov	r2, r0
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004112:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004114:	bf00      	nop
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20004b38 	.word	0x20004b38
 8004120:	20004ba0 	.word	0x20004ba0
 8004124:	20004c08 	.word	0x20004c08

08004128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004130:	f001 fc10 	bl	8005954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <prvAddNewTaskToReadyList+0xc4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <prvAddNewTaskToReadyList+0xc4>)
 800413c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800413e:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004146:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <prvAddNewTaskToReadyList+0xc4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d110      	bne.n	8004176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004154:	f000 fc26 	bl	80049a4 <prvInitialiseTaskLists>
 8004158:	e00d      	b.n	8004176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <prvAddNewTaskToReadyList+0xcc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	429a      	cmp	r2, r3
 800416e:	d802      	bhi.n	8004176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004170:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 800417e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <prvAddNewTaskToReadyList+0xd4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d903      	bls.n	800419c <prvAddNewTaskToReadyList+0x74>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	4a18      	ldr	r2, [pc, #96]	; (80041fc <prvAddNewTaskToReadyList+0xd4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <prvAddNewTaskToReadyList+0xd8>)
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7fe fddb 	bl	8002d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041b8:	f001 fbfc 	bl	80059b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041bc:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <prvAddNewTaskToReadyList+0xcc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d207      	bcs.n	80041e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <prvAddNewTaskToReadyList+0xdc>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000db8 	.word	0x20000db8
 80041f0:	200008e4 	.word	0x200008e4
 80041f4:	20000dc4 	.word	0x20000dc4
 80041f8:	20000dd4 	.word	0x20000dd4
 80041fc:	20000dc0 	.word	0x20000dc0
 8004200:	200008e8 	.word	0x200008e8
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <vTaskDelay+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <vTaskDelay+0x30>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004238:	f000 f88a 	bl	8004350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800423c:	2100      	movs	r1, #0
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fdfc 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004244:	f000 f892 	bl	800436c <xTaskResumeAll>
 8004248:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskDelay+0x64>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000de0 	.word	0x20000de0
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800427e:	463a      	mov	r2, r7
 8004280:	1d39      	adds	r1, r7, #4
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4618      	mov	r0, r3
 8004288:	f7fe fd10 	bl	8002cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	9202      	str	r2, [sp, #8]
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	460a      	mov	r2, r1
 800429e:	4924      	ldr	r1, [pc, #144]	; (8004330 <vTaskStartScheduler+0xc0>)
 80042a0:	4824      	ldr	r0, [pc, #144]	; (8004334 <vTaskStartScheduler+0xc4>)
 80042a2:	f7ff fdf9 	bl	8003e98 <xTaskCreateStatic>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4a23      	ldr	r2, [pc, #140]	; (8004338 <vTaskStartScheduler+0xc8>)
 80042aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042ac:	4b22      	ldr	r3, [pc, #136]	; (8004338 <vTaskStartScheduler+0xc8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e001      	b.n	80042be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d102      	bne.n	80042ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042c4:	f000 fe0e 	bl	8004ee4 <xTimerCreateTimerTask>
 80042c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d11b      	bne.n	8004308 <vTaskStartScheduler+0x98>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
}
 80042e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <vTaskStartScheduler+0xcc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3354      	adds	r3, #84	; 0x54
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <vTaskStartScheduler+0xd0>)
 80042ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <vTaskStartScheduler+0xd4>)
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f6:	4b14      	ldr	r3, [pc, #80]	; (8004348 <vTaskStartScheduler+0xd8>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <vTaskStartScheduler+0xdc>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004302:	f001 fa85 	bl	8005810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004306:	e00e      	b.n	8004326 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d10a      	bne.n	8004326 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <vTaskStartScheduler+0xb4>
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	080069e0 	.word	0x080069e0
 8004334:	08004975 	.word	0x08004975
 8004338:	20000ddc 	.word	0x20000ddc
 800433c:	200008e4 	.word	0x200008e4
 8004340:	20000068 	.word	0x20000068
 8004344:	20000dd8 	.word	0x20000dd8
 8004348:	20000dc4 	.word	0x20000dc4
 800434c:	20000dbc 	.word	0x20000dbc

08004350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <vTaskSuspendAll+0x18>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	4a03      	ldr	r2, [pc, #12]	; (8004368 <vTaskSuspendAll+0x18>)
 800435c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000de0 	.word	0x20000de0

0800436c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <xTaskResumeAll+0x118>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <xTaskResumeAll+0x2c>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	603b      	str	r3, [r7, #0]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004398:	f001 fadc 	bl	8005954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <xTaskResumeAll+0x118>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <xTaskResumeAll+0x118>)
 80043a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <xTaskResumeAll+0x118>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d162      	bne.n	8004474 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <xTaskResumeAll+0x11c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d05e      	beq.n	8004474 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043b6:	e02f      	b.n	8004418 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b8:	4b34      	ldr	r3, [pc, #208]	; (800448c <xTaskResumeAll+0x120>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3318      	adds	r3, #24
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fd2f 	bl	8002e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd2a 	bl	8002e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <xTaskResumeAll+0x124>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d903      	bls.n	80043e8 <xTaskResumeAll+0x7c>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <xTaskResumeAll+0x124>)
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <xTaskResumeAll+0x128>)
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fe fcb5 	bl	8002d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <xTaskResumeAll+0x12c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <xTaskResumeAll+0x130>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004418:	4b1c      	ldr	r3, [pc, #112]	; (800448c <xTaskResumeAll+0x120>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1cb      	bne.n	80043b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004426:	f000 fb5f 	bl	8004ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <xTaskResumeAll+0x134>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004436:	f000 f847 	bl	80044c8 <xTaskIncrementTick>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004440:	4b16      	ldr	r3, [pc, #88]	; (800449c <xTaskResumeAll+0x130>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f1      	bne.n	8004436 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <xTaskResumeAll+0x134>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <xTaskResumeAll+0x130>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <xTaskResumeAll+0x138>)
 8004466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004474:	f001 fa9e 	bl	80059b4 <vPortExitCritical>

	return xAlreadyYielded;
 8004478:	68bb      	ldr	r3, [r7, #8]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000de0 	.word	0x20000de0
 8004488:	20000db8 	.word	0x20000db8
 800448c:	20000d78 	.word	0x20000d78
 8004490:	20000dc0 	.word	0x20000dc0
 8004494:	200008e8 	.word	0x200008e8
 8004498:	200008e4 	.word	0x200008e4
 800449c:	20000dcc 	.word	0x20000dcc
 80044a0:	20000dc8 	.word	0x20000dc8
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <xTaskGetTickCount+0x1c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044b4:	687b      	ldr	r3, [r7, #4]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000dbc 	.word	0x20000dbc

080044c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d2:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <xTaskIncrementTick+0x148>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 808f 	bne.w	80045fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <xTaskIncrementTick+0x14c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044e4:	4a4b      	ldr	r2, [pc, #300]	; (8004614 <xTaskIncrementTick+0x14c>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d120      	bne.n	8004532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <xTaskIncrementTick+0x150>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <xTaskIncrementTick+0x48>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	603b      	str	r3, [r7, #0]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <xTaskIncrementTick+0x46>
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <xTaskIncrementTick+0x150>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <xTaskIncrementTick+0x154>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a3f      	ldr	r2, [pc, #252]	; (8004618 <xTaskIncrementTick+0x150>)
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4a3f      	ldr	r2, [pc, #252]	; (800461c <xTaskIncrementTick+0x154>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <xTaskIncrementTick+0x158>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3301      	adds	r3, #1
 800452a:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <xTaskIncrementTick+0x158>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	f000 fadb 	bl	8004ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004532:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <xTaskIncrementTick+0x15c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	429a      	cmp	r2, r3
 800453a:	d349      	bcc.n	80045d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <xTaskIncrementTick+0x150>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <xTaskIncrementTick+0x15c>)
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	601a      	str	r2, [r3, #0]
					break;
 800454e:	e03f      	b.n	80045d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <xTaskIncrementTick+0x150>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d203      	bcs.n	8004570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <xTaskIncrementTick+0x15c>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800456e:	e02f      	b.n	80045d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe fc57 	bl	8002e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3318      	adds	r3, #24
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fc4e 	bl	8002e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <xTaskIncrementTick+0x160>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d903      	bls.n	80045a0 <xTaskIncrementTick+0xd8>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a22      	ldr	r2, [pc, #136]	; (8004628 <xTaskIncrementTick+0x160>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <xTaskIncrementTick+0x164>)
 80045ae:	441a      	add	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe fbd9 	bl	8002d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <xTaskIncrementTick+0x168>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3b8      	bcc.n	800453c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ce:	e7b5      	b.n	800453c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <xTaskIncrementTick+0x168>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	4915      	ldr	r1, [pc, #84]	; (800462c <xTaskIncrementTick+0x164>)
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d901      	bls.n	80045ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <xTaskIncrementTick+0x16c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e004      	b.n	8004604 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <xTaskIncrementTick+0x170>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <xTaskIncrementTick+0x170>)
 8004602:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004604:	697b      	ldr	r3, [r7, #20]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000de0 	.word	0x20000de0
 8004614:	20000dbc 	.word	0x20000dbc
 8004618:	20000d70 	.word	0x20000d70
 800461c:	20000d74 	.word	0x20000d74
 8004620:	20000dd0 	.word	0x20000dd0
 8004624:	20000dd8 	.word	0x20000dd8
 8004628:	20000dc0 	.word	0x20000dc0
 800462c:	200008e8 	.word	0x200008e8
 8004630:	200008e4 	.word	0x200008e4
 8004634:	20000dcc 	.word	0x20000dcc
 8004638:	20000dc8 	.word	0x20000dc8

0800463c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <vTaskSwitchContext+0xb0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800464a:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <vTaskSwitchContext+0xb4>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004650:	e046      	b.n	80046e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004652:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <vTaskSwitchContext+0xb4>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004658:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <vTaskSwitchContext+0xb8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e010      	b.n	8004682 <vTaskSwitchContext+0x46>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <vTaskSwitchContext+0x40>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	607b      	str	r3, [r7, #4]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskSwitchContext+0x3e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3b01      	subs	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	491d      	ldr	r1, [pc, #116]	; (80046f8 <vTaskSwitchContext+0xbc>)
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0e4      	beq.n	8004660 <vTaskSwitchContext+0x24>
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <vTaskSwitchContext+0xbc>)
 80046a2:	4413      	add	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	3308      	adds	r3, #8
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d104      	bne.n	80046c6 <vTaskSwitchContext+0x8a>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <vTaskSwitchContext+0xc0>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <vTaskSwitchContext+0xb8>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <vTaskSwitchContext+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3354      	adds	r3, #84	; 0x54
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <vTaskSwitchContext+0xc4>)
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000de0 	.word	0x20000de0
 80046f0:	20000dcc 	.word	0x20000dcc
 80046f4:	20000dc0 	.word	0x20000dc0
 80046f8:	200008e8 	.word	0x200008e8
 80046fc:	200008e4 	.word	0x200008e4
 8004700:	20000068 	.word	0x20000068

08004704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <vTaskPlaceOnEventList+0x44>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3318      	adds	r3, #24
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fe fb3f 	bl	8002db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004738:	2101      	movs	r1, #1
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	f000 fb7e 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200008e4 	.word	0x200008e4

0800474c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	617b      	str	r3, [r7, #20]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3318      	adds	r3, #24
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fe faf6 	bl	8002d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
 800478c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f000 fb53 	bl	8004e3c <prvAddCurrentTaskToDelayedList>
	}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200008e4 	.word	0x200008e4

080047a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
}
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fb27 	bl	8002e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <xTaskRemoveFromEventList+0xb0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11d      	bne.n	800481e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fb1e 	bl	8002e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <xTaskRemoveFromEventList+0xb4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d903      	bls.n	8004800 <xTaskRemoveFromEventList+0x5c>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	4a16      	ldr	r2, [pc, #88]	; (8004858 <xTaskRemoveFromEventList+0xb4>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <xTaskRemoveFromEventList+0xb8>)
 800480e:	441a      	add	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe faa9 	bl	8002d6e <vListInsertEnd>
 800481c:	e005      	b.n	800482a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3318      	adds	r3, #24
 8004822:	4619      	mov	r1, r3
 8004824:	480e      	ldr	r0, [pc, #56]	; (8004860 <xTaskRemoveFromEventList+0xbc>)
 8004826:	f7fe faa2 	bl	8002d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <xTaskRemoveFromEventList+0xc0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	429a      	cmp	r2, r3
 8004836:	d905      	bls.n	8004844 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <xTaskRemoveFromEventList+0xc4>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e001      	b.n	8004848 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000de0 	.word	0x20000de0
 8004858:	20000dc0 	.word	0x20000dc0
 800485c:	200008e8 	.word	0x200008e8
 8004860:	20000d78 	.word	0x20000d78
 8004864:	200008e4 	.word	0x200008e4
 8004868:	20000dcc 	.word	0x20000dcc

0800486c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <vTaskInternalSetTimeOutState+0x24>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <vTaskInternalSetTimeOutState+0x28>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000dd0 	.word	0x20000dd0
 8004894:	20000dbc 	.word	0x20000dbc

08004898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	613b      	str	r3, [r7, #16]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048da:	f001 f83b 	bl	8005954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <xTaskCheckForTimeOut+0xbc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d102      	bne.n	80048fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e023      	b.n	8004946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <xTaskCheckForTimeOut+0xc0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d007      	beq.n	800491a <xTaskCheckForTimeOut+0x82>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	e015      	b.n	8004946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	429a      	cmp	r2, r3
 8004922:	d20b      	bcs.n	800493c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff9b 	bl	800486c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e004      	b.n	8004946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004946:	f001 f835 	bl	80059b4 <vPortExitCritical>

	return xReturn;
 800494a:	69fb      	ldr	r3, [r7, #28]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000dbc 	.word	0x20000dbc
 8004958:	20000dd0 	.word	0x20000dd0

0800495c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <vTaskMissedYield+0x14>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	20000dcc 	.word	0x20000dcc

08004974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800497c:	f000 f852 	bl	8004a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <prvIdleTask+0x28>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d9f9      	bls.n	800497c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <prvIdleTask+0x2c>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004998:	e7f0      	b.n	800497c <prvIdleTask+0x8>
 800499a:	bf00      	nop
 800499c:	200008e8 	.word	0x200008e8
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e00c      	b.n	80049ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <prvInitialiseTaskLists+0x60>)
 80049bc:	4413      	add	r3, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe f9a8 	bl	8002d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3301      	adds	r3, #1
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b37      	cmp	r3, #55	; 0x37
 80049ce:	d9ef      	bls.n	80049b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049d0:	480d      	ldr	r0, [pc, #52]	; (8004a08 <prvInitialiseTaskLists+0x64>)
 80049d2:	f7fe f99f 	bl	8002d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049d6:	480d      	ldr	r0, [pc, #52]	; (8004a0c <prvInitialiseTaskLists+0x68>)
 80049d8:	f7fe f99c 	bl	8002d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049dc:	480c      	ldr	r0, [pc, #48]	; (8004a10 <prvInitialiseTaskLists+0x6c>)
 80049de:	f7fe f999 	bl	8002d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049e2:	480c      	ldr	r0, [pc, #48]	; (8004a14 <prvInitialiseTaskLists+0x70>)
 80049e4:	f7fe f996 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049e8:	480b      	ldr	r0, [pc, #44]	; (8004a18 <prvInitialiseTaskLists+0x74>)
 80049ea:	f7fe f993 	bl	8002d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <prvInitialiseTaskLists+0x78>)
 80049f0:	4a05      	ldr	r2, [pc, #20]	; (8004a08 <prvInitialiseTaskLists+0x64>)
 80049f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <prvInitialiseTaskLists+0x7c>)
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <prvInitialiseTaskLists+0x68>)
 80049f8:	601a      	str	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200008e8 	.word	0x200008e8
 8004a08:	20000d48 	.word	0x20000d48
 8004a0c:	20000d5c 	.word	0x20000d5c
 8004a10:	20000d78 	.word	0x20000d78
 8004a14:	20000d8c 	.word	0x20000d8c
 8004a18:	20000da4 	.word	0x20000da4
 8004a1c:	20000d70 	.word	0x20000d70
 8004a20:	20000d74 	.word	0x20000d74

08004a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a2a:	e019      	b.n	8004a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a2c:	f000 ff92 	bl	8005954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <prvCheckTasksWaitingTermination+0x50>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe f9f3 	bl	8002e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <prvCheckTasksWaitingTermination+0x54>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	4a0b      	ldr	r2, [pc, #44]	; (8004a78 <prvCheckTasksWaitingTermination+0x54>)
 8004a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <prvCheckTasksWaitingTermination+0x58>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <prvCheckTasksWaitingTermination+0x58>)
 8004a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a56:	f000 ffad 	bl	80059b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f810 	bl	8004a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <prvCheckTasksWaitingTermination+0x58>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e1      	bne.n	8004a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000d8c 	.word	0x20000d8c
 8004a78:	20000db8 	.word	0x20000db8
 8004a7c:	20000da0 	.word	0x20000da0

08004a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3354      	adds	r3, #84	; 0x54
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fc69 	bl	8006364 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 f945 	bl	8005d30 <vPortFree>
				vPortFree( pxTCB );
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 f942 	bl	8005d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004aac:	e018      	b.n	8004ae0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d103      	bne.n	8004ac0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 f939 	bl	8005d30 <vPortFree>
	}
 8004abe:	e00f      	b.n	8004ae0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d00a      	beq.n	8004ae0 <prvDeleteTCB+0x60>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60fb      	str	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <prvDeleteTCB+0x5e>
	}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <prvResetNextTaskUnblockTime+0x38>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <prvResetNextTaskUnblockTime+0x3c>)
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b00:	e008      	b.n	8004b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <prvResetNextTaskUnblockTime+0x38>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <prvResetNextTaskUnblockTime+0x3c>)
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000d70 	.word	0x20000d70
 8004b24:	20000dd8 	.word	0x20000dd8

08004b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <xTaskGetSchedulerState+0x34>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b36:	2301      	movs	r3, #1
 8004b38:	607b      	str	r3, [r7, #4]
 8004b3a:	e008      	b.n	8004b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <xTaskGetSchedulerState+0x38>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b44:	2302      	movs	r3, #2
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	e001      	b.n	8004b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b4e:	687b      	ldr	r3, [r7, #4]
	}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	20000dc4 	.word	0x20000dc4
 8004b60:	20000de0 	.word	0x20000de0

08004b64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d051      	beq.n	8004c1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <xTaskPriorityInherit+0xc4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d241      	bcs.n	8004c0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	db06      	blt.n	8004b9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <xTaskPriorityInherit+0xc4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6959      	ldr	r1, [r3, #20]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <xTaskPriorityInherit+0xc8>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4299      	cmp	r1, r3
 8004bb4:	d122      	bne.n	8004bfc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe f934 	bl	8002e28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <xTaskPriorityInherit+0xc4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <xTaskPriorityInherit+0xcc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d903      	bls.n	8004bde <xTaskPriorityInherit+0x7a>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <xTaskPriorityInherit+0xcc>)
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <xTaskPriorityInherit+0xc8>)
 8004bec:	441a      	add	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f7fe f8ba 	bl	8002d6e <vListInsertEnd>
 8004bfa:	e004      	b.n	8004c06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <xTaskPriorityInherit+0xc4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e008      	b.n	8004c1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <xTaskPriorityInherit+0xc4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d201      	bcs.n	8004c1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200008e4 	.word	0x200008e4
 8004c2c:	200008e8 	.word	0x200008e8
 8004c30:	20000dc0 	.word	0x20000dc0

08004c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d056      	beq.n	8004cf8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <xTaskPriorityDisinherit+0xd0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d00a      	beq.n	8004c6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60bb      	str	r3, [r7, #8]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d02c      	beq.n	8004cf8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d128      	bne.n	8004cf8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe f8bc 	bl	8002e28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <xTaskPriorityDisinherit+0xd4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d903      	bls.n	8004cd8 <xTaskPriorityDisinherit+0xa4>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <xTaskPriorityDisinherit+0xd4>)
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4a09      	ldr	r2, [pc, #36]	; (8004d0c <xTaskPriorityDisinherit+0xd8>)
 8004ce6:	441a      	add	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7fe f83d 	bl	8002d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cf8:	697b      	ldr	r3, [r7, #20]
	}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200008e4 	.word	0x200008e4
 8004d08:	20000dc0 	.word	0x20000dc0
 8004d0c:	200008e8 	.word	0x200008e8

08004d10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d06a      	beq.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d902      	bls.n	8004d56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e002      	b.n	8004d5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d04b      	beq.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d146      	bne.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d10a      	bne.n	8004d90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60bb      	str	r3, [r7, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	db04      	blt.n	8004dae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6959      	ldr	r1, [r3, #20]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	d11c      	bne.n	8004dfe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe f82d 	bl	8002e28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d903      	bls.n	8004de2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004df0:	441a      	add	r2, r3
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7fd ffb8 	bl	8002d6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dfe:	bf00      	nop
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200008e4 	.word	0x200008e4
 8004e0c:	200008e8 	.word	0x200008e8
 8004e10:	20000dc0 	.word	0x20000dc0

08004e14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e26:	3201      	adds	r2, #1
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004e2a:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
	}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200008e4 	.word	0x200008e4

08004e3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x90>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd ffe8 	bl	8002e28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d10a      	bne.n	8004e76 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e66:	4b1a      	ldr	r3, [pc, #104]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4819      	ldr	r0, [pc, #100]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e70:	f7fd ff7d 	bl	8002d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e74:	e026      	b.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d209      	bcs.n	8004ea2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3304      	adds	r3, #4
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f7fd ff8b 	bl	8002db6 <vListInsert>
}
 8004ea0:	e010      	b.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fd ff81 	bl	8002db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d202      	bcs.n	8004ec4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6013      	str	r3, [r2, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000dbc 	.word	0x20000dbc
 8004ed0:	200008e4 	.word	0x200008e4
 8004ed4:	20000da4 	.word	0x20000da4
 8004ed8:	20000d74 	.word	0x20000d74
 8004edc:	20000d70 	.word	0x20000d70
 8004ee0:	20000dd8 	.word	0x20000dd8

08004ee4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004eee:	f000 fba1 	bl	8005634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <xTimerCreateTimerTask+0x80>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d021      	beq.n	8004f3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f02:	1d3a      	adds	r2, r7, #4
 8004f04:	f107 0108 	add.w	r1, r7, #8
 8004f08:	f107 030c 	add.w	r3, r7, #12
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fd fee7 	bl	8002ce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	9202      	str	r2, [sp, #8]
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	460a      	mov	r2, r1
 8004f24:	4910      	ldr	r1, [pc, #64]	; (8004f68 <xTimerCreateTimerTask+0x84>)
 8004f26:	4811      	ldr	r0, [pc, #68]	; (8004f6c <xTimerCreateTimerTask+0x88>)
 8004f28:	f7fe ffb6 	bl	8003e98 <xTaskCreateStatic>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4a10      	ldr	r2, [pc, #64]	; (8004f70 <xTimerCreateTimerTask+0x8c>)
 8004f30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <xTimerCreateTimerTask+0x8c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f5a:	697b      	ldr	r3, [r7, #20]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000e14 	.word	0x20000e14
 8004f68:	080069e8 	.word	0x080069e8
 8004f6c:	080051dd 	.word	0x080051dd
 8004f70:	20000e18 	.word	0x20000e18

08004f74 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004f82:	202c      	movs	r0, #44	; 0x2c
 8004f84:	f000 fe08 	bl	8005b98 <pvPortMalloc>
 8004f88:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f843 	bl	8005032 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004fac:	697b      	ldr	r3, [r7, #20]
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b08a      	sub	sp, #40	; 0x28
 8004fba:	af02      	add	r7, sp, #8
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
 8004fc2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004fc4:	232c      	movs	r3, #44	; 0x2c
 8004fc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b2c      	cmp	r3, #44	; 0x2c
 8004fcc:	d00a      	beq.n	8004fe4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61bb      	str	r3, [r7, #24]
}
 8004fe0:	bf00      	nop
 8004fe2:	e7fe      	b.n	8004fe2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fe4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <xTimerCreateStatic+0x4c>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	617b      	str	r3, [r7, #20]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f805 	bl	8005032 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005028:	69fb      	ldr	r3, [r7, #28]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	617b      	str	r3, [r7, #20]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01e      	beq.n	80050a0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005062:	f000 fae7 	bl	8005634 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	3304      	adds	r3, #4
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd fe66 	bl	8002d54 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005094:	f043 0304 	orr.w	r3, r3, #4
 8005098:	b2da      	uxtb	r2, r3
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	623b      	str	r3, [r7, #32]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <xTimerGenericCommand+0x98>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02a      	beq.n	8005134 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	dc18      	bgt.n	8005122 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050f0:	f7ff fd1a 	bl	8004b28 <xTaskGetSchedulerState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d109      	bne.n	800510e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050fa:	4b11      	ldr	r3, [pc, #68]	; (8005140 <xTimerGenericCommand+0x98>)
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	f107 0110 	add.w	r1, r7, #16
 8005102:	2300      	movs	r3, #0
 8005104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005106:	f7fe f861 	bl	80031cc <xQueueGenericSend>
 800510a:	6278      	str	r0, [r7, #36]	; 0x24
 800510c:	e012      	b.n	8005134 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <xTimerGenericCommand+0x98>)
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	f107 0110 	add.w	r1, r7, #16
 8005116:	2300      	movs	r3, #0
 8005118:	2200      	movs	r2, #0
 800511a:	f7fe f857 	bl	80031cc <xQueueGenericSend>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24
 8005120:	e008      	b.n	8005134 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <xTimerGenericCommand+0x98>)
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f107 0110 	add.w	r1, r7, #16
 800512a:	2300      	movs	r3, #0
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f7fe f94b 	bl	80033c8 <xQueueGenericSendFromISR>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005136:	4618      	mov	r0, r3
 8005138:	3728      	adds	r7, #40	; 0x28
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000e14 	.word	0x20000e14

08005144 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800514e:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <prvProcessExpiredTimer+0x94>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3304      	adds	r3, #4
 800515c:	4618      	mov	r0, r3
 800515e:	f7fd fe63 	bl	8002e28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d022      	beq.n	80051b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	18d1      	adds	r1, r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f000 f8d1 	bl	8005324 <prvInsertTimerInActiveList>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01f      	beq.n	80051c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	6978      	ldr	r0, [r7, #20]
 8005194:	f7ff ff88 	bl	80050a8 <xTimerGenericCommand>
 8005198:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d113      	bne.n	80051c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	4798      	blx	r3
}
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20000e0c 	.word	0x20000e0c

080051dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f857 	bl	800529c <prvGetNextExpireTime>
 80051ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f803 	bl	8005200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051fa:	f000 f8d5 	bl	80053a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051fe:	e7f1      	b.n	80051e4 <prvTimerTask+0x8>

08005200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800520a:	f7ff f8a1 	bl	8004350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f866 	bl	80052e4 <prvSampleTimeNow>
 8005218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d130      	bne.n	8005282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <prvProcessTimerOrBlockTask+0x3c>
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	429a      	cmp	r2, r3
 800522c:	d806      	bhi.n	800523c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800522e:	f7ff f89d 	bl	800436c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005232:	68f9      	ldr	r1, [r7, #12]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ff85 	bl	8005144 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800523a:	e024      	b.n	8005286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <prvProcessTimerOrBlockTask+0x90>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <prvProcessTimerOrBlockTask+0x50>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <prvProcessTimerOrBlockTask+0x52>
 8005250:	2300      	movs	r3, #0
 8005252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <prvProcessTimerOrBlockTask+0x94>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	f7fe fde5 	bl	8003e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005266:	f7ff f881 	bl	800436c <xTaskResumeAll>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <prvProcessTimerOrBlockTask+0x98>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
}
 8005280:	e001      	b.n	8005286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005282:	f7ff f873 	bl	800436c <xTaskResumeAll>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000e10 	.word	0x20000e10
 8005294:	20000e14 	.word	0x20000e14
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <prvGetNextExpireTime+0x44>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <prvGetNextExpireTime+0x16>
 80052ae:	2201      	movs	r2, #1
 80052b0:	e000      	b.n	80052b4 <prvGetNextExpireTime+0x18>
 80052b2:	2200      	movs	r2, #0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <prvGetNextExpireTime+0x44>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e001      	b.n	80052d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052d0:	68fb      	ldr	r3, [r7, #12]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000e0c 	.word	0x20000e0c

080052e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052ec:	f7ff f8dc 	bl	80044a8 <xTaskGetTickCount>
 80052f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <prvSampleTimeNow+0x3c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d205      	bcs.n	8005308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052fc:	f000 f936 	bl	800556c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e002      	b.n	800530e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800530e:	4a04      	ldr	r2, [pc, #16]	; (8005320 <prvSampleTimeNow+0x3c>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000e1c 	.word	0x20000e1c

08005324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d812      	bhi.n	8005370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005358:	2301      	movs	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	e01b      	b.n	8005396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <prvInsertTimerInActiveList+0x7c>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7fd fd24 	bl	8002db6 <vListInsert>
 800536e:	e012      	b.n	8005396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d206      	bcs.n	8005386 <prvInsertTimerInActiveList+0x62>
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e007      	b.n	8005396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <prvInsertTimerInActiveList+0x80>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f7fd fd10 	bl	8002db6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005396:	697b      	ldr	r3, [r7, #20]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000e10 	.word	0x20000e10
 80053a4:	20000e0c 	.word	0x20000e0c

080053a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08e      	sub	sp, #56	; 0x38
 80053ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ae:	e0ca      	b.n	8005546 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da18      	bge.n	80053e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	3304      	adds	r3, #4
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	61fb      	str	r3, [r7, #28]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053de:	6850      	ldr	r0, [r2, #4]
 80053e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f2c0 80ab 	blt.w	8005546 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	3304      	adds	r3, #4
 8005400:	4618      	mov	r0, r3
 8005402:	f7fd fd11 	bl	8002e28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005406:	463b      	mov	r3, r7
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff6b 	bl	80052e4 <prvSampleTimeNow>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b09      	cmp	r3, #9
 8005414:	f200 8096 	bhi.w	8005544 <prvProcessReceivedCommands+0x19c>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <prvProcessReceivedCommands+0x78>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005449 	.word	0x08005449
 8005424:	08005449 	.word	0x08005449
 8005428:	08005449 	.word	0x08005449
 800542c:	080054bd 	.word	0x080054bd
 8005430:	080054d1 	.word	0x080054d1
 8005434:	0800551b 	.word	0x0800551b
 8005438:	08005449 	.word	0x08005449
 800543c:	08005449 	.word	0x08005449
 8005440:	080054bd 	.word	0x080054bd
 8005444:	080054d1 	.word	0x080054d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	18d1      	adds	r1, r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005468:	f7ff ff5c 	bl	8005324 <prvInsertTimerInActiveList>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d069      	beq.n	8005546 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05e      	beq.n	8005546 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	441a      	add	r2, r3
 8005490:	2300      	movs	r3, #0
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	2100      	movs	r1, #0
 8005498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800549a:	f7ff fe05 	bl	80050a8 <xTimerGenericCommand>
 800549e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d14f      	bne.n	8005546 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	61bb      	str	r3, [r7, #24]
}
 80054b8:	bf00      	nop
 80054ba:	e7fe      	b.n	80054ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054ce:	e03a      	b.n	8005546 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	617b      	str	r3, [r7, #20]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	18d1      	adds	r1, r2, r3
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005514:	f7ff ff06 	bl	8005324 <prvInsertTimerInActiveList>
					break;
 8005518:	e015      	b.n	8005546 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d103      	bne.n	8005530 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552a:	f000 fc01 	bl	8005d30 <vPortFree>
 800552e:	e00a      	b.n	8005546 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005542:	e000      	b.n	8005546 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <prvProcessReceivedCommands+0x1c0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	1d39      	adds	r1, r7, #4
 800554c:	2200      	movs	r2, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe f862 	bl	8003618 <xQueueReceive>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f47f af2a 	bne.w	80053b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	3730      	adds	r7, #48	; 0x30
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000e14 	.word	0x20000e14

0800556c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005572:	e048      	b.n	8005606 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005574:	4b2d      	ldr	r3, [pc, #180]	; (800562c <prvSwitchTimerLists+0xc0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <prvSwitchTimerLists+0xc0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3304      	adds	r3, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f7fd fc4b 	bl	8002e28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02e      	beq.n	8005606 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d90e      	bls.n	80055d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055c6:	4b19      	ldr	r3, [pc, #100]	; (800562c <prvSwitchTimerLists+0xc0>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f7fd fbf0 	bl	8002db6 <vListInsert>
 80055d6:	e016      	b.n	8005606 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2300      	movs	r3, #0
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	2100      	movs	r1, #0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fd60 	bl	80050a8 <xTimerGenericCommand>
 80055e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	603b      	str	r3, [r7, #0]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <prvSwitchTimerLists+0xc0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1b1      	bne.n	8005574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <prvSwitchTimerLists+0xc0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <prvSwitchTimerLists+0xc4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a04      	ldr	r2, [pc, #16]	; (800562c <prvSwitchTimerLists+0xc0>)
 800561c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800561e:	4a04      	ldr	r2, [pc, #16]	; (8005630 <prvSwitchTimerLists+0xc4>)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6013      	str	r3, [r2, #0]
}
 8005624:	bf00      	nop
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000e0c 	.word	0x20000e0c
 8005630:	20000e10 	.word	0x20000e10

08005634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800563a:	f000 f98b 	bl	8005954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <prvCheckForValidListAndQueue+0x60>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d120      	bne.n	8005688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005646:	4814      	ldr	r0, [pc, #80]	; (8005698 <prvCheckForValidListAndQueue+0x64>)
 8005648:	f7fd fb64 	bl	8002d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800564c:	4813      	ldr	r0, [pc, #76]	; (800569c <prvCheckForValidListAndQueue+0x68>)
 800564e:	f7fd fb61 	bl	8002d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <prvCheckForValidListAndQueue+0x6c>)
 8005654:	4a10      	ldr	r2, [pc, #64]	; (8005698 <prvCheckForValidListAndQueue+0x64>)
 8005656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <prvCheckForValidListAndQueue+0x70>)
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <prvCheckForValidListAndQueue+0x68>)
 800565c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <prvCheckForValidListAndQueue+0x74>)
 8005664:	4a11      	ldr	r2, [pc, #68]	; (80056ac <prvCheckForValidListAndQueue+0x78>)
 8005666:	2110      	movs	r1, #16
 8005668:	200a      	movs	r0, #10
 800566a:	f7fd fc6f 	bl	8002f4c <xQueueGenericCreateStatic>
 800566e:	4603      	mov	r3, r0
 8005670:	4a08      	ldr	r2, [pc, #32]	; (8005694 <prvCheckForValidListAndQueue+0x60>)
 8005672:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <prvCheckForValidListAndQueue+0x60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <prvCheckForValidListAndQueue+0x60>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	490b      	ldr	r1, [pc, #44]	; (80056b0 <prvCheckForValidListAndQueue+0x7c>)
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fb80 	bl	8003d88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005688:	f000 f994 	bl	80059b4 <vPortExitCritical>
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000e14 	.word	0x20000e14
 8005698:	20000de4 	.word	0x20000de4
 800569c:	20000df8 	.word	0x20000df8
 80056a0:	20000e0c 	.word	0x20000e0c
 80056a4:	20000e10 	.word	0x20000e10
 80056a8:	20000ec0 	.word	0x20000ec0
 80056ac:	20000e20 	.word	0x20000e20
 80056b0:	080069f0 	.word	0x080069f0

080056b4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <pvTimerGetTimerID+0x28>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60fb      	str	r3, [r7, #12]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80056dc:	f000 f93a 	bl	8005954 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80056e6:	f000 f965 	bl	80059b4 <vPortExitCritical>

	return pvReturn;
 80056ea:	693b      	ldr	r3, [r7, #16]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3b04      	subs	r3, #4
 8005704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800570c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b04      	subs	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b04      	subs	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005724:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <pxPortInitialiseStack+0x64>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3b14      	subs	r3, #20
 800572e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b04      	subs	r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f06f 0202 	mvn.w	r2, #2
 8005742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b20      	subs	r3, #32
 8005748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	0800575d 	.word	0x0800575d

0800575c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <prvTaskExitError+0x54>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d00a      	beq.n	8005786 <prvTaskExitError+0x2a>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <prvTaskExitError+0x28>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
}
 8005798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800579a:	bf00      	nop
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0fc      	beq.n	800579c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	2000000c 	.word	0x2000000c
	...

080057c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	; (8005934 <xPortStartScheduler+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x26>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <xPortStartScheduler+0x120>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3f      	ldr	r2, [pc, #252]	; (8005938 <xPortStartScheduler+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10a      	bne.n	8005856 <xPortStartScheduler+0x46>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <xPortStartScheduler+0x12c>)
 8005858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005878:	b2da      	uxtb	r2, r3
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <xPortStartScheduler+0x130>)
 800587c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800587e:	4b31      	ldr	r3, [pc, #196]	; (8005944 <xPortStartScheduler+0x134>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005884:	e009      	b.n	800589a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <xPortStartScheduler+0x134>)
 800588e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d0ef      	beq.n	8005886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <xPortStartScheduler+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1c3 0307 	rsb	r3, r3, #7
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d00a      	beq.n	80058c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <xPortStartScheduler+0x134>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <xPortStartScheduler+0x134>)
 80058d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <xPortStartScheduler+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <xPortStartScheduler+0x134>)
 80058dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <xPortStartScheduler+0x138>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <xPortStartScheduler+0x138>)
 80058ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <xPortStartScheduler+0x138>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <xPortStartScheduler+0x138>)
 80058f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058fe:	f000 f8dd 	bl	8005abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <xPortStartScheduler+0x13c>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005908:	f000 f8fc 	bl	8005b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <xPortStartScheduler+0x140>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <xPortStartScheduler+0x140>)
 8005912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005918:	f7ff ff66 	bl	80057e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800591c:	f7fe fe8e 	bl	800463c <vTaskSwitchContext>
	prvTaskExitError();
 8005920:	f7ff ff1c 	bl	800575c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	410fc271 	.word	0x410fc271
 8005938:	410fc270 	.word	0x410fc270
 800593c:	e000e400 	.word	0xe000e400
 8005940:	20000f10 	.word	0x20000f10
 8005944:	20000f14 	.word	0x20000f14
 8005948:	e000ed20 	.word	0xe000ed20
 800594c:	2000000c 	.word	0x2000000c
 8005950:	e000ef34 	.word	0xe000ef34

08005954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
}
 800596c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <vPortEnterCritical+0x58>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <vPortEnterCritical+0x58>)
 8005976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <vPortEnterCritical+0x58>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortEnterCritical+0x5c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vPortEnterCritical+0x4a>
	}
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <vPortExitCritical+0x50>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <vPortExitCritical+0x24>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	607b      	str	r3, [r7, #4]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <vPortExitCritical+0x50>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <vPortExitCritical+0x50>)
 80059e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <vPortExitCritical+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <vPortExitCritical+0x42>
 80059ea:	2300      	movs	r3, #0
 80059ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f383 8811 	msr	BASEPRI, r3
}
 80059f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
	...

08005a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f7fe fdfc 	bl	800463c <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a92:	f7fe fd19 	bl	80044c8 <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <xPortSysTickHandler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <vPortSetupTimerInterrupt+0x38>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <vPortSetupTimerInterrupt+0x3c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <vPortSetupTimerInterrupt+0x40>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <vPortSetupTimerInterrupt+0x44>)
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ade:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010
 8005af4:	e000e018 	.word	0xe000e018
 8005af8:	20000000 	.word	0x20000000
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	e000e014 	.word	0xe000e014

08005b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b14 <vPortEnableVFP+0x10>
 8005b08:	6801      	ldr	r1, [r0, #0]
 8005b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b0e:	6001      	str	r1, [r0, #0]
 8005b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b12:	bf00      	nop
 8005b14:	e000ed88 	.word	0xe000ed88

08005b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b1e:	f3ef 8305 	mrs	r3, IPSR
 8005b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d914      	bls.n	8005b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b2a:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <vPortValidateInterruptPriority+0x70>)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b34:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <vPortValidateInterruptPriority+0x74>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	7afa      	ldrb	r2, [r7, #11]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20a      	bcs.n	8005b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <vPortValidateInterruptPriority+0x78>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <vPortValidateInterruptPriority+0x7c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d90a      	bls.n	8005b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	603b      	str	r3, [r7, #0]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <vPortValidateInterruptPriority+0x60>
	}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	e000e3f0 	.word	0xe000e3f0
 8005b8c:	20000f10 	.word	0x20000f10
 8005b90:	e000ed0c 	.word	0xe000ed0c
 8005b94:	20000f14 	.word	0x20000f14

08005b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ba4:	f7fe fbd4 	bl	8004350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ba8:	4b5b      	ldr	r3, [pc, #364]	; (8005d18 <pvPortMalloc+0x180>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bb0:	f000 f920 	bl	8005df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bb4:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <pvPortMalloc+0x184>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8093 	bne.w	8005ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01d      	beq.n	8005c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bc8:	2208      	movs	r2, #8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <pvPortMalloc+0x6c>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	617b      	str	r3, [r7, #20]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d06e      	beq.n	8005ce8 <pvPortMalloc+0x150>
 8005c0a:	4b45      	ldr	r3, [pc, #276]	; (8005d20 <pvPortMalloc+0x188>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d869      	bhi.n	8005ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c14:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <pvPortMalloc+0x18c>)
 8005c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c18:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <pvPortMalloc+0x18c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1e:	e004      	b.n	8005c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d903      	bls.n	8005c3c <pvPortMalloc+0xa4>
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f1      	bne.n	8005c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c3c:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <pvPortMalloc+0x180>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d050      	beq.n	8005ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	2308      	movs	r3, #8
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d91f      	bls.n	8005ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <pvPortMalloc+0xf8>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	613b      	str	r3, [r7, #16]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad2      	subs	r2, r2, r3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ca2:	69b8      	ldr	r0, [r7, #24]
 8005ca4:	f000 f908 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <pvPortMalloc+0x188>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <pvPortMalloc+0x188>)
 8005cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <pvPortMalloc+0x188>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <pvPortMalloc+0x190>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d203      	bcs.n	8005cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <pvPortMalloc+0x188>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <pvPortMalloc+0x190>)
 8005cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x184>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cde:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <pvPortMalloc+0x194>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <pvPortMalloc+0x194>)
 8005ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ce8:	f7fe fb40 	bl	800436c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <pvPortMalloc+0x174>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <pvPortMalloc+0x172>
	return pvReturn;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3728      	adds	r7, #40	; 0x28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20004b20 	.word	0x20004b20
 8005d1c:	20004b34 	.word	0x20004b34
 8005d20:	20004b24 	.word	0x20004b24
 8005d24:	20004b18 	.word	0x20004b18
 8005d28:	20004b28 	.word	0x20004b28
 8005d2c:	20004b2c 	.word	0x20004b2c

08005d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04d      	beq.n	8005dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d42:	2308      	movs	r3, #8
 8005d44:	425b      	negs	r3, r3
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <vPortFree+0xb8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <vPortFree+0x44>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	60fb      	str	r3, [r7, #12]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <vPortFree+0x62>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60bb      	str	r3, [r7, #8]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <vPortFree+0xb8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01e      	beq.n	8005dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <vPortFree+0xb8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005db8:	f7fe faca 	bl	8004350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <vPortFree+0xbc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <vPortFree+0xbc>)
 8005dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f000 f874 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <vPortFree+0xc0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <vPortFree+0xc0>)
 8005dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dda:	f7fe fac7 	bl	800436c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004b34 	.word	0x20004b34
 8005dec:	20004b24 	.word	0x20004b24
 8005df0:	20004b30 	.word	0x20004b30

08005df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <prvHeapInit+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3307      	adds	r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <prvHeapInit+0xac>)
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e40:	2208      	movs	r2, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e74:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvHeapInit+0xb8>)
 8005e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <prvHeapInit+0xbc>)
 8005e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <prvHeapInit+0xc0>)
 8005e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000f18 	.word	0x20000f18
 8005ea4:	20004b18 	.word	0x20004b18
 8005ea8:	20004b20 	.word	0x20004b20
 8005eac:	20004b28 	.word	0x20004b28
 8005eb0:	20004b24 	.word	0x20004b24
 8005eb4:	20004b34 	.word	0x20004b34

08005eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvInsertBlockIntoFreeList+0xac>)
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e002      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x14>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d8f7      	bhi.n	8005ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d108      	bne.n	8005efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d118      	bne.n	8005f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d00d      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e008      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e003      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d002      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20004b18 	.word	0x20004b18
 8005f68:	20004b20 	.word	0x20004b20

08005f6c <std>:
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4604      	mov	r4, r0
 8005f72:	e9c0 3300 	strd	r3, r3, [r0]
 8005f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f7a:	6083      	str	r3, [r0, #8]
 8005f7c:	8181      	strh	r1, [r0, #12]
 8005f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f80:	81c2      	strh	r2, [r0, #14]
 8005f82:	6183      	str	r3, [r0, #24]
 8005f84:	4619      	mov	r1, r3
 8005f86:	2208      	movs	r2, #8
 8005f88:	305c      	adds	r0, #92	; 0x5c
 8005f8a:	f000 f9d3 	bl	8006334 <memset>
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x38>)
 8005f90:	6263      	str	r3, [r4, #36]	; 0x24
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <std+0x3c>)
 8005f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <std+0x40>)
 8005f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <std+0x44>)
 8005f9c:	6224      	str	r4, [r4, #32]
 8005f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	bf00      	nop
 8005fa4:	08006185 	.word	0x08006185
 8005fa8:	080061a7 	.word	0x080061a7
 8005fac:	080061df 	.word	0x080061df
 8005fb0:	08006203 	.word	0x08006203

08005fb4 <stdio_exit_handler>:
 8005fb4:	4a02      	ldr	r2, [pc, #8]	; (8005fc0 <stdio_exit_handler+0xc>)
 8005fb6:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <stdio_exit_handler+0x10>)
 8005fb8:	4803      	ldr	r0, [pc, #12]	; (8005fc8 <stdio_exit_handler+0x14>)
 8005fba:	f000 b869 	b.w	8006090 <_fwalk_sglue>
 8005fbe:	bf00      	nop
 8005fc0:	20000010 	.word	0x20000010
 8005fc4:	080067ed 	.word	0x080067ed
 8005fc8:	2000001c 	.word	0x2000001c

08005fcc <cleanup_stdio>:
 8005fcc:	6841      	ldr	r1, [r0, #4]
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <cleanup_stdio+0x34>)
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	d001      	beq.n	8005fdc <cleanup_stdio+0x10>
 8005fd8:	f000 fc08 	bl	80067ec <_fflush_r>
 8005fdc:	68a1      	ldr	r1, [r4, #8]
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <cleanup_stdio+0x38>)
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	d002      	beq.n	8005fea <cleanup_stdio+0x1e>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fc01 	bl	80067ec <_fflush_r>
 8005fea:	68e1      	ldr	r1, [r4, #12]
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <cleanup_stdio+0x3c>)
 8005fee:	4299      	cmp	r1, r3
 8005ff0:	d004      	beq.n	8005ffc <cleanup_stdio+0x30>
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff8:	f000 bbf8 	b.w	80067ec <_fflush_r>
 8005ffc:	bd10      	pop	{r4, pc}
 8005ffe:	bf00      	nop
 8006000:	20004b38 	.word	0x20004b38
 8006004:	20004ba0 	.word	0x20004ba0
 8006008:	20004c08 	.word	0x20004c08

0800600c <global_stdio_init.part.0>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <global_stdio_init.part.0+0x30>)
 8006010:	4c0b      	ldr	r4, [pc, #44]	; (8006040 <global_stdio_init.part.0+0x34>)
 8006012:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <global_stdio_init.part.0+0x38>)
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	4620      	mov	r0, r4
 8006018:	2200      	movs	r2, #0
 800601a:	2104      	movs	r1, #4
 800601c:	f7ff ffa6 	bl	8005f6c <std>
 8006020:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006024:	2201      	movs	r2, #1
 8006026:	2109      	movs	r1, #9
 8006028:	f7ff ffa0 	bl	8005f6c <std>
 800602c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006030:	2202      	movs	r2, #2
 8006032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006036:	2112      	movs	r1, #18
 8006038:	f7ff bf98 	b.w	8005f6c <std>
 800603c:	20004c70 	.word	0x20004c70
 8006040:	20004b38 	.word	0x20004b38
 8006044:	08005fb5 	.word	0x08005fb5

08006048 <__sfp_lock_acquire>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__sfp_lock_acquire+0x8>)
 800604a:	f000 ba41 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 800604e:	bf00      	nop
 8006050:	20004c79 	.word	0x20004c79

08006054 <__sfp_lock_release>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__sfp_lock_release+0x8>)
 8006056:	f000 ba3c 	b.w	80064d2 <__retarget_lock_release_recursive>
 800605a:	bf00      	nop
 800605c:	20004c79 	.word	0x20004c79

08006060 <__sinit>:
 8006060:	b510      	push	{r4, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	f7ff fff0 	bl	8006048 <__sfp_lock_acquire>
 8006068:	6a23      	ldr	r3, [r4, #32]
 800606a:	b11b      	cbz	r3, 8006074 <__sinit+0x14>
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f7ff bff0 	b.w	8006054 <__sfp_lock_release>
 8006074:	4b04      	ldr	r3, [pc, #16]	; (8006088 <__sinit+0x28>)
 8006076:	6223      	str	r3, [r4, #32]
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <__sinit+0x2c>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f5      	bne.n	800606c <__sinit+0xc>
 8006080:	f7ff ffc4 	bl	800600c <global_stdio_init.part.0>
 8006084:	e7f2      	b.n	800606c <__sinit+0xc>
 8006086:	bf00      	nop
 8006088:	08005fcd 	.word	0x08005fcd
 800608c:	20004c70 	.word	0x20004c70

08006090 <_fwalk_sglue>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4607      	mov	r7, r0
 8006096:	4688      	mov	r8, r1
 8006098:	4614      	mov	r4, r2
 800609a:	2600      	movs	r6, #0
 800609c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a0:	f1b9 0901 	subs.w	r9, r9, #1
 80060a4:	d505      	bpl.n	80060b2 <_fwalk_sglue+0x22>
 80060a6:	6824      	ldr	r4, [r4, #0]
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	d1f7      	bne.n	800609c <_fwalk_sglue+0xc>
 80060ac:	4630      	mov	r0, r6
 80060ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d907      	bls.n	80060c8 <_fwalk_sglue+0x38>
 80060b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060bc:	3301      	adds	r3, #1
 80060be:	d003      	beq.n	80060c8 <_fwalk_sglue+0x38>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c0      	blx	r8
 80060c6:	4306      	orrs	r6, r0
 80060c8:	3568      	adds	r5, #104	; 0x68
 80060ca:	e7e9      	b.n	80060a0 <_fwalk_sglue+0x10>

080060cc <_puts_r>:
 80060cc:	6a03      	ldr	r3, [r0, #32]
 80060ce:	b570      	push	{r4, r5, r6, lr}
 80060d0:	6884      	ldr	r4, [r0, #8]
 80060d2:	4605      	mov	r5, r0
 80060d4:	460e      	mov	r6, r1
 80060d6:	b90b      	cbnz	r3, 80060dc <_puts_r+0x10>
 80060d8:	f7ff ffc2 	bl	8006060 <__sinit>
 80060dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060de:	07db      	lsls	r3, r3, #31
 80060e0:	d405      	bmi.n	80060ee <_puts_r+0x22>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	0598      	lsls	r0, r3, #22
 80060e6:	d402      	bmi.n	80060ee <_puts_r+0x22>
 80060e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ea:	f000 f9f1 	bl	80064d0 <__retarget_lock_acquire_recursive>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	0719      	lsls	r1, r3, #28
 80060f2:	d513      	bpl.n	800611c <_puts_r+0x50>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	b18b      	cbz	r3, 800611c <_puts_r+0x50>
 80060f8:	3e01      	subs	r6, #1
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006100:	3b01      	subs	r3, #1
 8006102:	60a3      	str	r3, [r4, #8]
 8006104:	b9e9      	cbnz	r1, 8006142 <_puts_r+0x76>
 8006106:	2b00      	cmp	r3, #0
 8006108:	da2e      	bge.n	8006168 <_puts_r+0x9c>
 800610a:	4622      	mov	r2, r4
 800610c:	210a      	movs	r1, #10
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f87b 	bl	800620a <__swbuf_r>
 8006114:	3001      	adds	r0, #1
 8006116:	d007      	beq.n	8006128 <_puts_r+0x5c>
 8006118:	250a      	movs	r5, #10
 800611a:	e007      	b.n	800612c <_puts_r+0x60>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f8b0 	bl	8006284 <__swsetup_r>
 8006124:	2800      	cmp	r0, #0
 8006126:	d0e7      	beq.n	80060f8 <_puts_r+0x2c>
 8006128:	f04f 35ff 	mov.w	r5, #4294967295
 800612c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d405      	bmi.n	800613e <_puts_r+0x72>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	d402      	bmi.n	800613e <_puts_r+0x72>
 8006138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613a:	f000 f9ca 	bl	80064d2 <__retarget_lock_release_recursive>
 800613e:	4628      	mov	r0, r5
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	2b00      	cmp	r3, #0
 8006144:	da04      	bge.n	8006150 <_puts_r+0x84>
 8006146:	69a2      	ldr	r2, [r4, #24]
 8006148:	429a      	cmp	r2, r3
 800614a:	dc06      	bgt.n	800615a <_puts_r+0x8e>
 800614c:	290a      	cmp	r1, #10
 800614e:	d004      	beq.n	800615a <_puts_r+0x8e>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	e7cf      	b.n	80060fa <_puts_r+0x2e>
 800615a:	4622      	mov	r2, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 f854 	bl	800620a <__swbuf_r>
 8006162:	3001      	adds	r0, #1
 8006164:	d1c9      	bne.n	80060fa <_puts_r+0x2e>
 8006166:	e7df      	b.n	8006128 <_puts_r+0x5c>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	250a      	movs	r5, #10
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	701d      	strb	r5, [r3, #0]
 8006172:	e7db      	b.n	800612c <_puts_r+0x60>

08006174 <puts>:
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <puts+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f7ff bfa7 	b.w	80060cc <_puts_r>
 800617e:	bf00      	nop
 8006180:	20000068 	.word	0x20000068

08006184 <__sread>:
 8006184:	b510      	push	{r4, lr}
 8006186:	460c      	mov	r4, r1
 8006188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618c:	f000 f952 	bl	8006434 <_read_r>
 8006190:	2800      	cmp	r0, #0
 8006192:	bfab      	itete	ge
 8006194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006196:	89a3      	ldrhlt	r3, [r4, #12]
 8006198:	181b      	addge	r3, r3, r0
 800619a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800619e:	bfac      	ite	ge
 80061a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061a2:	81a3      	strhlt	r3, [r4, #12]
 80061a4:	bd10      	pop	{r4, pc}

080061a6 <__swrite>:
 80061a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061aa:	461f      	mov	r7, r3
 80061ac:	898b      	ldrh	r3, [r1, #12]
 80061ae:	05db      	lsls	r3, r3, #23
 80061b0:	4605      	mov	r5, r0
 80061b2:	460c      	mov	r4, r1
 80061b4:	4616      	mov	r6, r2
 80061b6:	d505      	bpl.n	80061c4 <__swrite+0x1e>
 80061b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061bc:	2302      	movs	r3, #2
 80061be:	2200      	movs	r2, #0
 80061c0:	f000 f926 	bl	8006410 <_lseek_r>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	4632      	mov	r2, r6
 80061d2:	463b      	mov	r3, r7
 80061d4:	4628      	mov	r0, r5
 80061d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	f000 b93d 	b.w	8006458 <_write_r>

080061de <__sseek>:
 80061de:	b510      	push	{r4, lr}
 80061e0:	460c      	mov	r4, r1
 80061e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e6:	f000 f913 	bl	8006410 <_lseek_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	bf15      	itete	ne
 80061f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061fa:	81a3      	strheq	r3, [r4, #12]
 80061fc:	bf18      	it	ne
 80061fe:	81a3      	strhne	r3, [r4, #12]
 8006200:	bd10      	pop	{r4, pc}

08006202 <__sclose>:
 8006202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006206:	f000 b89d 	b.w	8006344 <_close_r>

0800620a <__swbuf_r>:
 800620a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620c:	460e      	mov	r6, r1
 800620e:	4614      	mov	r4, r2
 8006210:	4605      	mov	r5, r0
 8006212:	b118      	cbz	r0, 800621c <__swbuf_r+0x12>
 8006214:	6a03      	ldr	r3, [r0, #32]
 8006216:	b90b      	cbnz	r3, 800621c <__swbuf_r+0x12>
 8006218:	f7ff ff22 	bl	8006060 <__sinit>
 800621c:	69a3      	ldr	r3, [r4, #24]
 800621e:	60a3      	str	r3, [r4, #8]
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	071a      	lsls	r2, r3, #28
 8006224:	d525      	bpl.n	8006272 <__swbuf_r+0x68>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b31b      	cbz	r3, 8006272 <__swbuf_r+0x68>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	1a98      	subs	r0, r3, r2
 8006230:	6963      	ldr	r3, [r4, #20]
 8006232:	b2f6      	uxtb	r6, r6
 8006234:	4283      	cmp	r3, r0
 8006236:	4637      	mov	r7, r6
 8006238:	dc04      	bgt.n	8006244 <__swbuf_r+0x3a>
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fad5 	bl	80067ec <_fflush_r>
 8006242:	b9e0      	cbnz	r0, 800627e <__swbuf_r+0x74>
 8006244:	68a3      	ldr	r3, [r4, #8]
 8006246:	3b01      	subs	r3, #1
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	701e      	strb	r6, [r3, #0]
 8006252:	6962      	ldr	r2, [r4, #20]
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	429a      	cmp	r2, r3
 8006258:	d004      	beq.n	8006264 <__swbuf_r+0x5a>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	07db      	lsls	r3, r3, #31
 800625e:	d506      	bpl.n	800626e <__swbuf_r+0x64>
 8006260:	2e0a      	cmp	r6, #10
 8006262:	d104      	bne.n	800626e <__swbuf_r+0x64>
 8006264:	4621      	mov	r1, r4
 8006266:	4628      	mov	r0, r5
 8006268:	f000 fac0 	bl	80067ec <_fflush_r>
 800626c:	b938      	cbnz	r0, 800627e <__swbuf_r+0x74>
 800626e:	4638      	mov	r0, r7
 8006270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 f805 	bl	8006284 <__swsetup_r>
 800627a:	2800      	cmp	r0, #0
 800627c:	d0d5      	beq.n	800622a <__swbuf_r+0x20>
 800627e:	f04f 37ff 	mov.w	r7, #4294967295
 8006282:	e7f4      	b.n	800626e <__swbuf_r+0x64>

08006284 <__swsetup_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <__swsetup_r+0xac>)
 8006288:	4605      	mov	r5, r0
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	460c      	mov	r4, r1
 800628e:	b118      	cbz	r0, 8006298 <__swsetup_r+0x14>
 8006290:	6a03      	ldr	r3, [r0, #32]
 8006292:	b90b      	cbnz	r3, 8006298 <__swsetup_r+0x14>
 8006294:	f7ff fee4 	bl	8006060 <__sinit>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800629e:	0718      	lsls	r0, r3, #28
 80062a0:	d422      	bmi.n	80062e8 <__swsetup_r+0x64>
 80062a2:	06d9      	lsls	r1, r3, #27
 80062a4:	d407      	bmi.n	80062b6 <__swsetup_r+0x32>
 80062a6:	2309      	movs	r3, #9
 80062a8:	602b      	str	r3, [r5, #0]
 80062aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e034      	b.n	8006320 <__swsetup_r+0x9c>
 80062b6:	0758      	lsls	r0, r3, #29
 80062b8:	d512      	bpl.n	80062e0 <__swsetup_r+0x5c>
 80062ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062bc:	b141      	cbz	r1, 80062d0 <__swsetup_r+0x4c>
 80062be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062c2:	4299      	cmp	r1, r3
 80062c4:	d002      	beq.n	80062cc <__swsetup_r+0x48>
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f912 	bl	80064f0 <_free_r>
 80062cc:	2300      	movs	r3, #0
 80062ce:	6363      	str	r3, [r4, #52]	; 0x34
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	2300      	movs	r3, #0
 80062da:	6063      	str	r3, [r4, #4]
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f043 0308 	orr.w	r3, r3, #8
 80062e6:	81a3      	strh	r3, [r4, #12]
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	b94b      	cbnz	r3, 8006300 <__swsetup_r+0x7c>
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f6:	d003      	beq.n	8006300 <__swsetup_r+0x7c>
 80062f8:	4621      	mov	r1, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f000 fac4 	bl	8006888 <__smakebuf_r>
 8006300:	89a0      	ldrh	r0, [r4, #12]
 8006302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006306:	f010 0301 	ands.w	r3, r0, #1
 800630a:	d00a      	beq.n	8006322 <__swsetup_r+0x9e>
 800630c:	2300      	movs	r3, #0
 800630e:	60a3      	str	r3, [r4, #8]
 8006310:	6963      	ldr	r3, [r4, #20]
 8006312:	425b      	negs	r3, r3
 8006314:	61a3      	str	r3, [r4, #24]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	b943      	cbnz	r3, 800632c <__swsetup_r+0xa8>
 800631a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800631e:	d1c4      	bne.n	80062aa <__swsetup_r+0x26>
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	0781      	lsls	r1, r0, #30
 8006324:	bf58      	it	pl
 8006326:	6963      	ldrpl	r3, [r4, #20]
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	e7f4      	b.n	8006316 <__swsetup_r+0x92>
 800632c:	2000      	movs	r0, #0
 800632e:	e7f7      	b.n	8006320 <__swsetup_r+0x9c>
 8006330:	20000068 	.word	0x20000068

08006334 <memset>:
 8006334:	4402      	add	r2, r0
 8006336:	4603      	mov	r3, r0
 8006338:	4293      	cmp	r3, r2
 800633a:	d100      	bne.n	800633e <memset+0xa>
 800633c:	4770      	bx	lr
 800633e:	f803 1b01 	strb.w	r1, [r3], #1
 8006342:	e7f9      	b.n	8006338 <memset+0x4>

08006344 <_close_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4d06      	ldr	r5, [pc, #24]	; (8006360 <_close_r+0x1c>)
 8006348:	2300      	movs	r3, #0
 800634a:	4604      	mov	r4, r0
 800634c:	4608      	mov	r0, r1
 800634e:	602b      	str	r3, [r5, #0]
 8006350:	f7fa fc37 	bl	8000bc2 <_close>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_close_r+0x1a>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_close_r+0x1a>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20004c74 	.word	0x20004c74

08006364 <_reclaim_reent>:
 8006364:	4b29      	ldr	r3, [pc, #164]	; (800640c <_reclaim_reent+0xa8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4283      	cmp	r3, r0
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	4604      	mov	r4, r0
 800636e:	d04b      	beq.n	8006408 <_reclaim_reent+0xa4>
 8006370:	69c3      	ldr	r3, [r0, #28]
 8006372:	b143      	cbz	r3, 8006386 <_reclaim_reent+0x22>
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d144      	bne.n	8006404 <_reclaim_reent+0xa0>
 800637a:	69e3      	ldr	r3, [r4, #28]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	b111      	cbz	r1, 8006386 <_reclaim_reent+0x22>
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f8b5 	bl	80064f0 <_free_r>
 8006386:	6961      	ldr	r1, [r4, #20]
 8006388:	b111      	cbz	r1, 8006390 <_reclaim_reent+0x2c>
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f8b0 	bl	80064f0 <_free_r>
 8006390:	69e1      	ldr	r1, [r4, #28]
 8006392:	b111      	cbz	r1, 800639a <_reclaim_reent+0x36>
 8006394:	4620      	mov	r0, r4
 8006396:	f000 f8ab 	bl	80064f0 <_free_r>
 800639a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800639c:	b111      	cbz	r1, 80063a4 <_reclaim_reent+0x40>
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f8a6 	bl	80064f0 <_free_r>
 80063a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a6:	b111      	cbz	r1, 80063ae <_reclaim_reent+0x4a>
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f8a1 	bl	80064f0 <_free_r>
 80063ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80063b0:	b111      	cbz	r1, 80063b8 <_reclaim_reent+0x54>
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f89c 	bl	80064f0 <_free_r>
 80063b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063ba:	b111      	cbz	r1, 80063c2 <_reclaim_reent+0x5e>
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 f897 	bl	80064f0 <_free_r>
 80063c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063c4:	b111      	cbz	r1, 80063cc <_reclaim_reent+0x68>
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f892 	bl	80064f0 <_free_r>
 80063cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80063ce:	b111      	cbz	r1, 80063d6 <_reclaim_reent+0x72>
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 f88d 	bl	80064f0 <_free_r>
 80063d6:	6a23      	ldr	r3, [r4, #32]
 80063d8:	b1b3      	cbz	r3, 8006408 <_reclaim_reent+0xa4>
 80063da:	4620      	mov	r0, r4
 80063dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063e0:	4718      	bx	r3
 80063e2:	5949      	ldr	r1, [r1, r5]
 80063e4:	b941      	cbnz	r1, 80063f8 <_reclaim_reent+0x94>
 80063e6:	3504      	adds	r5, #4
 80063e8:	69e3      	ldr	r3, [r4, #28]
 80063ea:	2d80      	cmp	r5, #128	; 0x80
 80063ec:	68d9      	ldr	r1, [r3, #12]
 80063ee:	d1f8      	bne.n	80063e2 <_reclaim_reent+0x7e>
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 f87d 	bl	80064f0 <_free_r>
 80063f6:	e7c0      	b.n	800637a <_reclaim_reent+0x16>
 80063f8:	680e      	ldr	r6, [r1, #0]
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 f878 	bl	80064f0 <_free_r>
 8006400:	4631      	mov	r1, r6
 8006402:	e7ef      	b.n	80063e4 <_reclaim_reent+0x80>
 8006404:	2500      	movs	r5, #0
 8006406:	e7ef      	b.n	80063e8 <_reclaim_reent+0x84>
 8006408:	bd70      	pop	{r4, r5, r6, pc}
 800640a:	bf00      	nop
 800640c:	20000068 	.word	0x20000068

08006410 <_lseek_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d07      	ldr	r5, [pc, #28]	; (8006430 <_lseek_r+0x20>)
 8006414:	4604      	mov	r4, r0
 8006416:	4608      	mov	r0, r1
 8006418:	4611      	mov	r1, r2
 800641a:	2200      	movs	r2, #0
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f7fa fbf6 	bl	8000c10 <_lseek>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_lseek_r+0x1e>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_lseek_r+0x1e>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20004c74 	.word	0x20004c74

08006434 <_read_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	4d07      	ldr	r5, [pc, #28]	; (8006454 <_read_r+0x20>)
 8006438:	4604      	mov	r4, r0
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	2200      	movs	r2, #0
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	f7fa fb84 	bl	8000b50 <_read>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_read_r+0x1e>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_read_r+0x1e>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20004c74 	.word	0x20004c74

08006458 <_write_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d07      	ldr	r5, [pc, #28]	; (8006478 <_write_r+0x20>)
 800645c:	4604      	mov	r4, r0
 800645e:	4608      	mov	r0, r1
 8006460:	4611      	mov	r1, r2
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f7fa fb8f 	bl	8000b8a <_write>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_write_r+0x1e>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_write_r+0x1e>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20004c74 	.word	0x20004c74

0800647c <__errno>:
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <__errno+0x8>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000068 	.word	0x20000068

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4d0d      	ldr	r5, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1b64      	subs	r4, r4, r5
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2600      	movs	r6, #0
 8006494:	42a6      	cmp	r6, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4d0b      	ldr	r5, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f000 fa62 	bl	8006964 <_init>
 80064a0:	1b64      	subs	r4, r4, r5
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2600      	movs	r6, #0
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b0:	4798      	blx	r3
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ba:	4798      	blx	r3
 80064bc:	3601      	adds	r6, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	08006a28 	.word	0x08006a28
 80064c4:	08006a28 	.word	0x08006a28
 80064c8:	08006a28 	.word	0x08006a28
 80064cc:	08006a2c 	.word	0x08006a2c

080064d0 <__retarget_lock_acquire_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__retarget_lock_release_recursive>:
 80064d2:	4770      	bx	lr

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <_free_r>:
 80064f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064f2:	2900      	cmp	r1, #0
 80064f4:	d044      	beq.n	8006580 <_free_r+0x90>
 80064f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064fa:	9001      	str	r0, [sp, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006502:	bfb8      	it	lt
 8006504:	18e4      	addlt	r4, r4, r3
 8006506:	f000 f8df 	bl	80066c8 <__malloc_lock>
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <_free_r+0x94>)
 800650c:	9801      	ldr	r0, [sp, #4]
 800650e:	6813      	ldr	r3, [r2, #0]
 8006510:	b933      	cbnz	r3, 8006520 <_free_r+0x30>
 8006512:	6063      	str	r3, [r4, #4]
 8006514:	6014      	str	r4, [r2, #0]
 8006516:	b003      	add	sp, #12
 8006518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800651c:	f000 b8da 	b.w	80066d4 <__malloc_unlock>
 8006520:	42a3      	cmp	r3, r4
 8006522:	d908      	bls.n	8006536 <_free_r+0x46>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf01      	itttt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	1949      	addeq	r1, r1, r5
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	e7ed      	b.n	8006512 <_free_r+0x22>
 8006536:	461a      	mov	r2, r3
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b10b      	cbz	r3, 8006540 <_free_r+0x50>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d9fa      	bls.n	8006536 <_free_r+0x46>
 8006540:	6811      	ldr	r1, [r2, #0]
 8006542:	1855      	adds	r5, r2, r1
 8006544:	42a5      	cmp	r5, r4
 8006546:	d10b      	bne.n	8006560 <_free_r+0x70>
 8006548:	6824      	ldr	r4, [r4, #0]
 800654a:	4421      	add	r1, r4
 800654c:	1854      	adds	r4, r2, r1
 800654e:	42a3      	cmp	r3, r4
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	d1e0      	bne.n	8006516 <_free_r+0x26>
 8006554:	681c      	ldr	r4, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	6053      	str	r3, [r2, #4]
 800655a:	440c      	add	r4, r1
 800655c:	6014      	str	r4, [r2, #0]
 800655e:	e7da      	b.n	8006516 <_free_r+0x26>
 8006560:	d902      	bls.n	8006568 <_free_r+0x78>
 8006562:	230c      	movs	r3, #12
 8006564:	6003      	str	r3, [r0, #0]
 8006566:	e7d6      	b.n	8006516 <_free_r+0x26>
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1961      	adds	r1, r4, r5
 800656c:	428b      	cmp	r3, r1
 800656e:	bf04      	itt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	6063      	str	r3, [r4, #4]
 8006576:	bf04      	itt	eq
 8006578:	1949      	addeq	r1, r1, r5
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6054      	str	r4, [r2, #4]
 800657e:	e7ca      	b.n	8006516 <_free_r+0x26>
 8006580:	b003      	add	sp, #12
 8006582:	bd30      	pop	{r4, r5, pc}
 8006584:	20004c7c 	.word	0x20004c7c

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0e      	ldr	r6, [pc, #56]	; (80065c4 <sbrk_aligned+0x3c>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f9d6 	bl	8006944 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f9d1 	bl	8006944 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <sbrk_aligned+0x34>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d007      	beq.n	80065c0 <sbrk_aligned+0x38>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f9c6 	bl	8006944 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d101      	bne.n	80065c0 <sbrk_aligned+0x38>
 80065bc:	f04f 34ff 	mov.w	r4, #4294967295
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	20004c80 	.word	0x20004c80

080065c8 <_malloc_r>:
 80065c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065cc:	1ccd      	adds	r5, r1, #3
 80065ce:	f025 0503 	bic.w	r5, r5, #3
 80065d2:	3508      	adds	r5, #8
 80065d4:	2d0c      	cmp	r5, #12
 80065d6:	bf38      	it	cc
 80065d8:	250c      	movcc	r5, #12
 80065da:	2d00      	cmp	r5, #0
 80065dc:	4607      	mov	r7, r0
 80065de:	db01      	blt.n	80065e4 <_malloc_r+0x1c>
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d905      	bls.n	80065f0 <_malloc_r+0x28>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	2600      	movs	r6, #0
 80065ea:	4630      	mov	r0, r6
 80065ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066c4 <_malloc_r+0xfc>
 80065f4:	f000 f868 	bl	80066c8 <__malloc_lock>
 80065f8:	f8d8 3000 	ldr.w	r3, [r8]
 80065fc:	461c      	mov	r4, r3
 80065fe:	bb5c      	cbnz	r4, 8006658 <_malloc_r+0x90>
 8006600:	4629      	mov	r1, r5
 8006602:	4638      	mov	r0, r7
 8006604:	f7ff ffc0 	bl	8006588 <sbrk_aligned>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	4604      	mov	r4, r0
 800660c:	d155      	bne.n	80066ba <_malloc_r+0xf2>
 800660e:	f8d8 4000 	ldr.w	r4, [r8]
 8006612:	4626      	mov	r6, r4
 8006614:	2e00      	cmp	r6, #0
 8006616:	d145      	bne.n	80066a4 <_malloc_r+0xdc>
 8006618:	2c00      	cmp	r4, #0
 800661a:	d048      	beq.n	80066ae <_malloc_r+0xe6>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	4631      	mov	r1, r6
 8006620:	4638      	mov	r0, r7
 8006622:	eb04 0903 	add.w	r9, r4, r3
 8006626:	f000 f98d 	bl	8006944 <_sbrk_r>
 800662a:	4581      	cmp	r9, r0
 800662c:	d13f      	bne.n	80066ae <_malloc_r+0xe6>
 800662e:	6821      	ldr	r1, [r4, #0]
 8006630:	1a6d      	subs	r5, r5, r1
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ffa7 	bl	8006588 <sbrk_aligned>
 800663a:	3001      	adds	r0, #1
 800663c:	d037      	beq.n	80066ae <_malloc_r+0xe6>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	442b      	add	r3, r5
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f8d8 3000 	ldr.w	r3, [r8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d038      	beq.n	80066be <_malloc_r+0xf6>
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	42a2      	cmp	r2, r4
 8006650:	d12b      	bne.n	80066aa <_malloc_r+0xe2>
 8006652:	2200      	movs	r2, #0
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	e00f      	b.n	8006678 <_malloc_r+0xb0>
 8006658:	6822      	ldr	r2, [r4, #0]
 800665a:	1b52      	subs	r2, r2, r5
 800665c:	d41f      	bmi.n	800669e <_malloc_r+0xd6>
 800665e:	2a0b      	cmp	r2, #11
 8006660:	d917      	bls.n	8006692 <_malloc_r+0xca>
 8006662:	1961      	adds	r1, r4, r5
 8006664:	42a3      	cmp	r3, r4
 8006666:	6025      	str	r5, [r4, #0]
 8006668:	bf18      	it	ne
 800666a:	6059      	strne	r1, [r3, #4]
 800666c:	6863      	ldr	r3, [r4, #4]
 800666e:	bf08      	it	eq
 8006670:	f8c8 1000 	streq.w	r1, [r8]
 8006674:	5162      	str	r2, [r4, r5]
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	4638      	mov	r0, r7
 800667a:	f104 060b 	add.w	r6, r4, #11
 800667e:	f000 f829 	bl	80066d4 <__malloc_unlock>
 8006682:	f026 0607 	bic.w	r6, r6, #7
 8006686:	1d23      	adds	r3, r4, #4
 8006688:	1af2      	subs	r2, r6, r3
 800668a:	d0ae      	beq.n	80065ea <_malloc_r+0x22>
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	50a3      	str	r3, [r4, r2]
 8006690:	e7ab      	b.n	80065ea <_malloc_r+0x22>
 8006692:	42a3      	cmp	r3, r4
 8006694:	6862      	ldr	r2, [r4, #4]
 8006696:	d1dd      	bne.n	8006654 <_malloc_r+0x8c>
 8006698:	f8c8 2000 	str.w	r2, [r8]
 800669c:	e7ec      	b.n	8006678 <_malloc_r+0xb0>
 800669e:	4623      	mov	r3, r4
 80066a0:	6864      	ldr	r4, [r4, #4]
 80066a2:	e7ac      	b.n	80065fe <_malloc_r+0x36>
 80066a4:	4634      	mov	r4, r6
 80066a6:	6876      	ldr	r6, [r6, #4]
 80066a8:	e7b4      	b.n	8006614 <_malloc_r+0x4c>
 80066aa:	4613      	mov	r3, r2
 80066ac:	e7cc      	b.n	8006648 <_malloc_r+0x80>
 80066ae:	230c      	movs	r3, #12
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4638      	mov	r0, r7
 80066b4:	f000 f80e 	bl	80066d4 <__malloc_unlock>
 80066b8:	e797      	b.n	80065ea <_malloc_r+0x22>
 80066ba:	6025      	str	r5, [r4, #0]
 80066bc:	e7dc      	b.n	8006678 <_malloc_r+0xb0>
 80066be:	605b      	str	r3, [r3, #4]
 80066c0:	deff      	udf	#255	; 0xff
 80066c2:	bf00      	nop
 80066c4:	20004c7c 	.word	0x20004c7c

080066c8 <__malloc_lock>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__malloc_lock+0x8>)
 80066ca:	f7ff bf01 	b.w	80064d0 <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	20004c78 	.word	0x20004c78

080066d4 <__malloc_unlock>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__malloc_unlock+0x8>)
 80066d6:	f7ff befc 	b.w	80064d2 <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	20004c78 	.word	0x20004c78

080066e0 <__sflush_r>:
 80066e0:	898a      	ldrh	r2, [r1, #12]
 80066e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	4605      	mov	r5, r0
 80066e8:	0710      	lsls	r0, r2, #28
 80066ea:	460c      	mov	r4, r1
 80066ec:	d458      	bmi.n	80067a0 <__sflush_r+0xc0>
 80066ee:	684b      	ldr	r3, [r1, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc05      	bgt.n	8006700 <__sflush_r+0x20>
 80066f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dc02      	bgt.n	8006700 <__sflush_r+0x20>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006702:	2e00      	cmp	r6, #0
 8006704:	d0f9      	beq.n	80066fa <__sflush_r+0x1a>
 8006706:	2300      	movs	r3, #0
 8006708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800670c:	682f      	ldr	r7, [r5, #0]
 800670e:	6a21      	ldr	r1, [r4, #32]
 8006710:	602b      	str	r3, [r5, #0]
 8006712:	d032      	beq.n	800677a <__sflush_r+0x9a>
 8006714:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	075a      	lsls	r2, r3, #29
 800671a:	d505      	bpl.n	8006728 <__sflush_r+0x48>
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	1ac0      	subs	r0, r0, r3
 8006720:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006722:	b10b      	cbz	r3, 8006728 <__sflush_r+0x48>
 8006724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006726:	1ac0      	subs	r0, r0, r3
 8006728:	2300      	movs	r3, #0
 800672a:	4602      	mov	r2, r0
 800672c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800672e:	6a21      	ldr	r1, [r4, #32]
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	d106      	bne.n	8006748 <__sflush_r+0x68>
 800673a:	6829      	ldr	r1, [r5, #0]
 800673c:	291d      	cmp	r1, #29
 800673e:	d82b      	bhi.n	8006798 <__sflush_r+0xb8>
 8006740:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <__sflush_r+0x108>)
 8006742:	410a      	asrs	r2, r1
 8006744:	07d6      	lsls	r6, r2, #31
 8006746:	d427      	bmi.n	8006798 <__sflush_r+0xb8>
 8006748:	2200      	movs	r2, #0
 800674a:	6062      	str	r2, [r4, #4]
 800674c:	04d9      	lsls	r1, r3, #19
 800674e:	6922      	ldr	r2, [r4, #16]
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	d504      	bpl.n	800675e <__sflush_r+0x7e>
 8006754:	1c42      	adds	r2, r0, #1
 8006756:	d101      	bne.n	800675c <__sflush_r+0x7c>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b903      	cbnz	r3, 800675e <__sflush_r+0x7e>
 800675c:	6560      	str	r0, [r4, #84]	; 0x54
 800675e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006760:	602f      	str	r7, [r5, #0]
 8006762:	2900      	cmp	r1, #0
 8006764:	d0c9      	beq.n	80066fa <__sflush_r+0x1a>
 8006766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800676a:	4299      	cmp	r1, r3
 800676c:	d002      	beq.n	8006774 <__sflush_r+0x94>
 800676e:	4628      	mov	r0, r5
 8006770:	f7ff febe 	bl	80064f0 <_free_r>
 8006774:	2000      	movs	r0, #0
 8006776:	6360      	str	r0, [r4, #52]	; 0x34
 8006778:	e7c0      	b.n	80066fc <__sflush_r+0x1c>
 800677a:	2301      	movs	r3, #1
 800677c:	4628      	mov	r0, r5
 800677e:	47b0      	blx	r6
 8006780:	1c41      	adds	r1, r0, #1
 8006782:	d1c8      	bne.n	8006716 <__sflush_r+0x36>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c5      	beq.n	8006716 <__sflush_r+0x36>
 800678a:	2b1d      	cmp	r3, #29
 800678c:	d001      	beq.n	8006792 <__sflush_r+0xb2>
 800678e:	2b16      	cmp	r3, #22
 8006790:	d101      	bne.n	8006796 <__sflush_r+0xb6>
 8006792:	602f      	str	r7, [r5, #0]
 8006794:	e7b1      	b.n	80066fa <__sflush_r+0x1a>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	e7ad      	b.n	80066fc <__sflush_r+0x1c>
 80067a0:	690f      	ldr	r7, [r1, #16]
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	d0a9      	beq.n	80066fa <__sflush_r+0x1a>
 80067a6:	0793      	lsls	r3, r2, #30
 80067a8:	680e      	ldr	r6, [r1, #0]
 80067aa:	bf08      	it	eq
 80067ac:	694b      	ldreq	r3, [r1, #20]
 80067ae:	600f      	str	r7, [r1, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2300      	movne	r3, #0
 80067b4:	eba6 0807 	sub.w	r8, r6, r7
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	f1b8 0f00 	cmp.w	r8, #0
 80067be:	dd9c      	ble.n	80066fa <__sflush_r+0x1a>
 80067c0:	6a21      	ldr	r1, [r4, #32]
 80067c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067c4:	4643      	mov	r3, r8
 80067c6:	463a      	mov	r2, r7
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dc06      	bgt.n	80067de <__sflush_r+0xfe>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e78e      	b.n	80066fc <__sflush_r+0x1c>
 80067de:	4407      	add	r7, r0
 80067e0:	eba8 0800 	sub.w	r8, r8, r0
 80067e4:	e7e9      	b.n	80067ba <__sflush_r+0xda>
 80067e6:	bf00      	nop
 80067e8:	dfbffffe 	.word	0xdfbffffe

080067ec <_fflush_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	690b      	ldr	r3, [r1, #16]
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b913      	cbnz	r3, 80067fc <_fflush_r+0x10>
 80067f6:	2500      	movs	r5, #0
 80067f8:	4628      	mov	r0, r5
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	b118      	cbz	r0, 8006806 <_fflush_r+0x1a>
 80067fe:	6a03      	ldr	r3, [r0, #32]
 8006800:	b90b      	cbnz	r3, 8006806 <_fflush_r+0x1a>
 8006802:	f7ff fc2d 	bl	8006060 <__sinit>
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f3      	beq.n	80067f6 <_fflush_r+0xa>
 800680e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006810:	07d0      	lsls	r0, r2, #31
 8006812:	d404      	bmi.n	800681e <_fflush_r+0x32>
 8006814:	0599      	lsls	r1, r3, #22
 8006816:	d402      	bmi.n	800681e <_fflush_r+0x32>
 8006818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681a:	f7ff fe59 	bl	80064d0 <__retarget_lock_acquire_recursive>
 800681e:	4628      	mov	r0, r5
 8006820:	4621      	mov	r1, r4
 8006822:	f7ff ff5d 	bl	80066e0 <__sflush_r>
 8006826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006828:	07da      	lsls	r2, r3, #31
 800682a:	4605      	mov	r5, r0
 800682c:	d4e4      	bmi.n	80067f8 <_fflush_r+0xc>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	059b      	lsls	r3, r3, #22
 8006832:	d4e1      	bmi.n	80067f8 <_fflush_r+0xc>
 8006834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006836:	f7ff fe4c 	bl	80064d2 <__retarget_lock_release_recursive>
 800683a:	e7dd      	b.n	80067f8 <_fflush_r+0xc>

0800683c <__swhatbuf_r>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	460c      	mov	r4, r1
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	2900      	cmp	r1, #0
 8006846:	b096      	sub	sp, #88	; 0x58
 8006848:	4615      	mov	r5, r2
 800684a:	461e      	mov	r6, r3
 800684c:	da0d      	bge.n	800686a <__swhatbuf_r+0x2e>
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006854:	f04f 0100 	mov.w	r1, #0
 8006858:	bf0c      	ite	eq
 800685a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800685e:	2340      	movne	r3, #64	; 0x40
 8006860:	2000      	movs	r0, #0
 8006862:	6031      	str	r1, [r6, #0]
 8006864:	602b      	str	r3, [r5, #0]
 8006866:	b016      	add	sp, #88	; 0x58
 8006868:	bd70      	pop	{r4, r5, r6, pc}
 800686a:	466a      	mov	r2, sp
 800686c:	f000 f848 	bl	8006900 <_fstat_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	dbec      	blt.n	800684e <__swhatbuf_r+0x12>
 8006874:	9901      	ldr	r1, [sp, #4]
 8006876:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800687a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800687e:	4259      	negs	r1, r3
 8006880:	4159      	adcs	r1, r3
 8006882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006886:	e7eb      	b.n	8006860 <__swhatbuf_r+0x24>

08006888 <__smakebuf_r>:
 8006888:	898b      	ldrh	r3, [r1, #12]
 800688a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800688c:	079d      	lsls	r5, r3, #30
 800688e:	4606      	mov	r6, r0
 8006890:	460c      	mov	r4, r1
 8006892:	d507      	bpl.n	80068a4 <__smakebuf_r+0x1c>
 8006894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	2301      	movs	r3, #1
 800689e:	6163      	str	r3, [r4, #20]
 80068a0:	b002      	add	sp, #8
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	ab01      	add	r3, sp, #4
 80068a6:	466a      	mov	r2, sp
 80068a8:	f7ff ffc8 	bl	800683c <__swhatbuf_r>
 80068ac:	9900      	ldr	r1, [sp, #0]
 80068ae:	4605      	mov	r5, r0
 80068b0:	4630      	mov	r0, r6
 80068b2:	f7ff fe89 	bl	80065c8 <_malloc_r>
 80068b6:	b948      	cbnz	r0, 80068cc <__smakebuf_r+0x44>
 80068b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068bc:	059a      	lsls	r2, r3, #22
 80068be:	d4ef      	bmi.n	80068a0 <__smakebuf_r+0x18>
 80068c0:	f023 0303 	bic.w	r3, r3, #3
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	e7e3      	b.n	8006894 <__smakebuf_r+0xc>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	6020      	str	r0, [r4, #0]
 80068d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	6163      	str	r3, [r4, #20]
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	6120      	str	r0, [r4, #16]
 80068de:	b15b      	cbz	r3, 80068f8 <__smakebuf_r+0x70>
 80068e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f81d 	bl	8006924 <_isatty_r>
 80068ea:	b128      	cbz	r0, 80068f8 <__smakebuf_r+0x70>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	431d      	orrs	r5, r3
 80068fc:	81a5      	strh	r5, [r4, #12]
 80068fe:	e7cf      	b.n	80068a0 <__smakebuf_r+0x18>

08006900 <_fstat_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d07      	ldr	r5, [pc, #28]	; (8006920 <_fstat_r+0x20>)
 8006904:	2300      	movs	r3, #0
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f7fa f964 	bl	8000bda <_fstat>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_fstat_r+0x1c>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	b103      	cbz	r3, 800691c <_fstat_r+0x1c>
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	20004c74 	.word	0x20004c74

08006924 <_isatty_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	; (8006940 <_isatty_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa f963 	bl	8000bfa <_isatty>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_isatty_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_isatty_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20004c74 	.word	0x20004c74

08006944 <_sbrk_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4d06      	ldr	r5, [pc, #24]	; (8006960 <_sbrk_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	4608      	mov	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fa f96c 	bl	8000c2c <_sbrk>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_sbrk_r+0x1a>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_sbrk_r+0x1a>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20004c74 	.word	0x20004c74

08006964 <_init>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	bf00      	nop
 8006968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696a:	bc08      	pop	{r3}
 800696c:	469e      	mov	lr, r3
 800696e:	4770      	bx	lr

08006970 <_fini>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr
