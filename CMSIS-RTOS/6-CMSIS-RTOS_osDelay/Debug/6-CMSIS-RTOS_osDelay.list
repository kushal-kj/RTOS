
6-CMSIS-RTOS_osDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005204  08005204  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800520c  0800520c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  20000060  08005274  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  08005274  00024c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173b2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a9  00000000  00000000  00037485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f55  00000000  00000000  0003b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034dc  00000000  00000000  0003c935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157d9  00000000  00000000  0003fe11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000977f0  00000000  00000000  000555ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005630  00000000  00000000  000ecddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000f240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005190 	.word	0x08005190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005190 	.word	0x08005190

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:




int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b0a4      	sub	sp, #144	; 0x90
 80004e0:	af00      	add	r7, sp, #0

  HAL_Init();		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 80004e2:	f000 faf9 	bl	8000ad8 <HAL_Init>
  SystemClock_Config();		/* Configure the system clock */
 80004e6:	f000 f8ed 	bl	80006c4 <SystemClock_Config>
  MX_GPIO_Init();		    /* Initialize all configured peripherals */
 80004ea:	f000 f981 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f955 	bl	800079c <MX_USART2_UART_Init>

  //Initialize the kernel
  osKernelInitialize();
 80004f2:	f001 ffe9 	bl	80024c8 <osKernelInitialize>

  //Create Threads

  osThreadAttr_t greenThreadAtrribs={
 80004f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004fa:	2224      	movs	r2, #36	; 0x24
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fd5c 	bl	8004fbc <memset>
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <main+0xe0>)
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000510:	2318      	movs	r3, #24
 8000512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal

  	  	  	  	  	  	  	  	  	};

  green_id = osThreadNew(vGreenLedControllerTask, NULL, &greenThreadAtrribs);
 8000516:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051a:	461a      	mov	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <main+0xe4>)
 8000520:	f002 f81c 	bl	800255c <osThreadNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <main+0xe8>)
 8000528:	6013      	str	r3, [r2, #0]

  osThreadAttr_t redThreadAtrribs={
 800052a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800052e:	2224      	movs	r2, #36	; 0x24
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fd42 	bl	8004fbc <memset>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <main+0xec>)
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
 800053c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000542:	2319      	movs	r3, #25
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal1

  	  	  	  	  	  	  	  	  	};

  red_id = osThreadNew(vRedLedControllerTask, NULL, &redThreadAtrribs);
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xf0>)
 8000550:	f002 f804 	bl	800255c <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xf4>)
 8000558:	6013      	str	r3, [r2, #0]

  osThreadAttr_t orangeThreadAtrribs={
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fd2a 	bl	8004fbc <memset>
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xf8>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
 800056c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
 8000572:	231a      	movs	r3, #26
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal2

  	  	  	  	  	  	  	  	  	};

  orange_id = osThreadNew(vOrangeLedControllerTask, NULL, &orangeThreadAtrribs);
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	461a      	mov	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <main+0xfc>)
 8000580:	f001 ffec 	bl	800255c <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x100>)
 8000588:	6013      	str	r3, [r2, #0]

  osThreadAttr_t blueThreadAtrribs={
 800058a:	463b      	mov	r3, r7
 800058c:	2224      	movs	r2, #36	; 0x24
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fd13 	bl	8004fbc <memset>
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <main+0x104>)
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	231b      	movs	r3, #27
 80005a2:	61bb      	str	r3, [r7, #24]
									  .stack_size = STACK_SIZE,
									  .priority=osPriorityNormal3

  	  	  	  	  	  	  	  	  	};

  blue_id = osThreadNew(vBlueLedControllerTask, NULL, &blueThreadAtrribs);
 80005a4:	463b      	mov	r3, r7
 80005a6:	461a      	mov	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x108>)
 80005ac:	f001 ffd6 	bl	800255c <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x10c>)
 80005b4:	6013      	str	r3, [r2, #0]

  //Start the kernel
  osKernelStart();
 80005b6:	f001 ffab 	bl	8002510 <osKernelStart>

  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xde>
 80005bc:	080051a8 	.word	0x080051a8
 80005c0:	080005ed 	.word	0x080005ed
 80005c4:	200000d4 	.word	0x200000d4
 80005c8:	080051b4 	.word	0x080051b4
 80005cc:	08000625 	.word	0x08000625
 80005d0:	200000d0 	.word	0x200000d0
 80005d4:	080051bc 	.word	0x080051bc
 80005d8:	0800065d 	.word	0x0800065d
 80005dc:	200000dc 	.word	0x200000dc
 80005e0:	080051c8 	.word	0x080051c8
 80005e4:	08000695 	.word	0x08000695
 80005e8:	200000d8 	.word	0x200000d8

080005ec <vGreenLedControllerTask>:

}


void vGreenLedControllerTask(void *pvParameters)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Green_TaskProfiler++;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <vGreenLedControllerTask+0x30>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <vGreenLedControllerTask+0x30>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vGreenLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <vGreenLedControllerTask+0x34>)
 800060e:	4293      	cmp	r3, r2
 8000610:	ddf8      	ble.n	8000604 <vGreenLedControllerTask+0x18>
		osDelay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f002 f834 	bl	8002680 <osDelay>
		Green_TaskProfiler++;
 8000618:	e7ec      	b.n	80005f4 <vGreenLedControllerTask+0x8>
 800061a:	bf00      	nop
 800061c:	200000c8 	.word	0x200000c8
 8000620:	000c34ff 	.word	0x000c34ff

08000624 <vRedLedControllerTask>:
	}
}


void vRedLedControllerTask(void *pvParameters)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Red_TaskProfiler++;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <vRedLedControllerTask+0x30>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <vRedLedControllerTask+0x30>)
 8000634:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e002      	b.n	8000642 <vRedLedControllerTask+0x1e>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <vRedLedControllerTask+0x34>)
 8000646:	4293      	cmp	r3, r2
 8000648:	ddf8      	ble.n	800063c <vRedLedControllerTask+0x18>
		osDelay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f002 f818 	bl	8002680 <osDelay>
		Red_TaskProfiler++;
 8000650:	e7ec      	b.n	800062c <vRedLedControllerTask+0x8>
 8000652:	bf00      	nop
 8000654:	200000c4 	.word	0x200000c4
 8000658:	000c34ff 	.word	0x000c34ff

0800065c <vOrangeLedControllerTask>:

	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Orange_TaskProfiler++;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <vOrangeLedControllerTask+0x30>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <vOrangeLedControllerTask+0x30>)
 800066c:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	e002      	b.n	800067a <vOrangeLedControllerTask+0x1e>
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <vOrangeLedControllerTask+0x34>)
 800067e:	4293      	cmp	r3, r2
 8000680:	ddf8      	ble.n	8000674 <vOrangeLedControllerTask+0x18>
		osDelay(100);
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f001 fffc 	bl	8002680 <osDelay>
		Orange_TaskProfiler++;
 8000688:	e7ec      	b.n	8000664 <vOrangeLedControllerTask+0x8>
 800068a:	bf00      	nop
 800068c:	200000c0 	.word	0x200000c0
 8000690:	000c34ff 	.word	0x000c34ff

08000694 <vBlueLedControllerTask>:

	}
}

void vBlueLedControllerTask(void *pvParameters)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Blue_TaskProfiler++;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <vBlueLedControllerTask+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a06      	ldr	r2, [pc, #24]	; (80006bc <vBlueLedControllerTask+0x28>)
 80006a4:	6013      	str	r3, [r2, #0]
		for(i=0;i<800000;i++){}
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e002      	b.n	80006b2 <vBlueLedControllerTask+0x1e>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a02      	ldr	r2, [pc, #8]	; (80006c0 <vBlueLedControllerTask+0x2c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	ddf8      	ble.n	80006ac <vBlueLedControllerTask+0x18>
		Blue_TaskProfiler++;
 80006ba:	e7ef      	b.n	800069c <vBlueLedControllerTask+0x8>
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	000c34ff 	.word	0x000c34ff

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 fc72 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd4>)
 8000712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000746:	2307      	movs	r3, #7
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fc6a 	bl	8001028 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f875 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fecc 	bl	8001518 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 f85f 	bl	8000848 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f001 fb72 	bl	8001ebc <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f833 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000007c 	.word	0x2000007c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_GPIO_Init+0x30>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MX_GPIO_Init+0x30>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_GPIO_Init+0x30>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000836:	f000 f971 	bl	8000b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa17 	bl	8000ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 f9fd 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <HAL_InitTick+0xd0>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	4a2d      	ldr	r2, [pc, #180]	; (8000a0c <HAL_InitTick+0xd0>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6453      	str	r3, [r2, #68]	; 0x44
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <HAL_InitTick+0xd0>)
 800095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fff0 	bl	8001958 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000978:	f000 ffda 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 800097c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_InitTick+0xd4>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3b01      	subs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_InitTick+0xd8>)
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_InitTick+0xdc>)
 8000990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_InitTick+0xd8>)
 8000994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000998:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_InitTick+0xd8>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_InitTick+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_InitTick+0xd8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_InitTick+0xd8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <HAL_InitTick+0xd8>)
 80009b4:	f001 f802 	bl	80019bc <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d11b      	bne.n	80009fe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009c6:	4813      	ldr	r0, [pc, #76]	; (8000a14 <HAL_InitTick+0xd8>)
 80009c8:	f001 f852 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d111      	bne.n	80009fe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f992 	bl	8000d04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d808      	bhi.n	80009f8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009e6:	2200      	movs	r2, #0
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	2019      	movs	r0, #25
 80009ec:	f000 f96e 	bl	8000ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_InitTick+0xe0>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e002      	b.n	80009fe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	431bde83 	.word	0x431bde83
 8000a14:	200000e0 	.word	0x200000e0
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	20000004 	.word	0x20000004

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a52:	f001 f86f 	bl	8001b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000e0 	.word	0x200000e0

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f004 fae1 	bl	8005078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd11 	bl	80004dc <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000abc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ac8:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 8000acc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ad0:	20004c54 	.word	0x20004c54

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f8d8 	bl	8000cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	200f      	movs	r0, #15
 8000b08:	f7ff ff18 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff fea2 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000128 	.word	0x20000128

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000128 	.word	0x20000128

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff4c 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cde:	f7ff ff61 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	f7ff ffb1 	bl	8000c50 <NVIC_EncodePriority>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff80 	bl	8000bfc <__NVIC_SetPriority>
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff54 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e159      	b.n	8000ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8148 	bne.w	8000fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d005      	beq.n	8000d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80a2 	beq.w	8000fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b57      	ldr	r3, [pc, #348]	; (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a56      	ldr	r2, [pc, #344]	; (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b54      	ldr	r3, [pc, #336]	; (8001008 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec2:	4a52      	ldr	r2, [pc, #328]	; (800100c <HAL_GPIO_Init+0x2ec>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a49      	ldr	r2, [pc, #292]	; (8001010 <HAL_GPIO_Init+0x2f0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x202>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a48      	ldr	r2, [pc, #288]	; (8001014 <HAL_GPIO_Init+0x2f4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x1fe>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a47      	ldr	r2, [pc, #284]	; (8001018 <HAL_GPIO_Init+0x2f8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x1fa>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a46      	ldr	r2, [pc, #280]	; (800101c <HAL_GPIO_Init+0x2fc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x1f6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a45      	ldr	r2, [pc, #276]	; (8001020 <HAL_GPIO_Init+0x300>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x1f2>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x204>
 8000f22:	2300      	movs	r3, #0
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	f002 0203 	and.w	r2, r2, #3
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	; (800100c <HAL_GPIO_Init+0x2ec>)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f90:	4a24      	ldr	r2, [pc, #144]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fba:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_GPIO_Init+0x304>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	f67f aea2 	bls.w	8000d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40013800 	.word	0x40013800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e267      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d075      	beq.n	8001132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001046:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b04      	cmp	r3, #4
 8001050:	d00c      	beq.n	800106c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001052:	4b85      	ldr	r3, [pc, #532]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105a:	2b08      	cmp	r3, #8
 800105c:	d112      	bne.n	8001084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	4b82      	ldr	r3, [pc, #520]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800106a:	d10b      	bne.n	8001084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	4b7e      	ldr	r3, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d05b      	beq.n	8001130 <HAL_RCC_OscConfig+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d157      	bne.n	8001130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e242      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108c:	d106      	bne.n	800109c <HAL_RCC_OscConfig+0x74>
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a75      	ldr	r2, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0xb0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010a6:	4b70      	ldr	r3, [pc, #448]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6f      	ldr	r2, [pc, #444]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6c      	ldr	r2, [pc, #432]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xb0>
 80010c0:	4b69      	ldr	r3, [pc, #420]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a68      	ldr	r2, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fd30 	bl	8000b44 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fd2c 	bl	8000b44 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e207      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0xc0>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fd1c 	bl	8000b44 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fd18 	bl	8000b44 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1f3      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0xe8>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d063      	beq.n	8001206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800113e:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x152>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1c7      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4937      	ldr	r1, [pc, #220]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e03a      	b.n	8001206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <HAL_RCC_OscConfig+0x244>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fcd1 	bl	8000b44 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fccd 	bl	8000b44 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1a8      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4925      	ldr	r1, [pc, #148]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_OscConfig+0x244>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcb0 	bl	8000b44 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fcac 	bl	8000b44 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e187      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d036      	beq.n	8001280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d016      	beq.n	8001248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_RCC_OscConfig+0x248>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fc90 	bl	8000b44 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc8c 	bl	8000b44 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e167      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x240>)
 800123c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x200>
 8001246:	e01b      	b.n	8001280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x248>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fc79 	bl	8000b44 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e00e      	b.n	8001274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fc75 	bl	8000b44 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d907      	bls.n	8001274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e150      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
 8001268:	40023800 	.word	0x40023800
 800126c:	42470000 	.word	0x42470000
 8001270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b88      	ldr	r3, [pc, #544]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ea      	bne.n	8001256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8097 	beq.w	80013bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4b81      	ldr	r3, [pc, #516]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b7d      	ldr	r3, [pc, #500]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a7c      	ldr	r2, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b7a      	ldr	r3, [pc, #488]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x474>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d118      	bne.n	80012fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <HAL_RCC_OscConfig+0x474>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a73      	ldr	r2, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x474>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc35 	bl	8000b44 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012de:	f7ff fc31 	bl	8000b44 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e10c      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x474>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x2ea>
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001308:	4a63      	ldr	r2, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6713      	str	r3, [r2, #112]	; 0x70
 8001310:	e01c      	b.n	800134c <HAL_RCC_OscConfig+0x324>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x30c>
 800131a:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	4a5e      	ldr	r2, [pc, #376]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6713      	str	r3, [r2, #112]	; 0x70
 8001326:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6713      	str	r3, [r2, #112]	; 0x70
 8001332:	e00b      	b.n	800134c <HAL_RCC_OscConfig+0x324>
 8001334:	4b58      	ldr	r3, [pc, #352]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	4b55      	ldr	r3, [pc, #340]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	4a54      	ldr	r2, [pc, #336]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001346:	f023 0304 	bic.w	r3, r3, #4
 800134a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d015      	beq.n	8001380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001354:	f7ff fbf6 	bl	8000b44 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff fbf2 	bl	8000b44 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0cb      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0ee      	beq.n	800135c <HAL_RCC_OscConfig+0x334>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fbe0 	bl	8000b44 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001388:	f7ff fbdc 	bl	8000b44 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f241 3288 	movw	r2, #5000	; 0x1388
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e0b5      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ee      	bne.n	8001388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d105      	bne.n	80013bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a38      	ldr	r2, [pc, #224]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a1 	beq.w	8001508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d05c      	beq.n	800148c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d141      	bne.n	800145e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_RCC_OscConfig+0x478>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbb0 	bl	8000b44 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fbac 	bl	8000b44 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e087      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	3b01      	subs	r3, #1
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	491b      	ldr	r1, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x478>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb85 	bl	8000b44 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb81 	bl	8000b44 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e05c      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x416>
 800145c:	e054      	b.n	8001508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_RCC_OscConfig+0x478>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb6e 	bl	8000b44 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fb6a 	bl	8000b44 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e045      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x470>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
 800148a:	e03d      	b.n	8001508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e038      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000
 80014a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x4ec>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d028      	beq.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d121      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d11a      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014dc:	4293      	cmp	r3, r2
 80014de:	d111      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0cc      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d90c      	bls.n	8001554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0b8      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800158e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	494d      	ldr	r1, [pc, #308]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d044      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e067      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4934      	ldr	r1, [pc, #208]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fa9c 	bl	8000b44 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa98 	bl	8000b44 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e04f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d20c      	bcs.n	8001660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e032      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	490e      	ldr	r1, [pc, #56]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800169e:	f000 f821 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a2:	4602      	mov	r2, r0
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	5ccb      	ldrb	r3, [r1, r3]
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f93c 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00
 80016d4:	40023800 	.word	0x40023800
 80016d8:	080051ec 	.word	0x080051ec
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e8:	b094      	sub	sp, #80	; 0x50
 80016ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
 80016f0:	2300      	movs	r3, #0
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016f4:	2300      	movs	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fc:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	d00d      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x40>
 8001708:	2b08      	cmp	r3, #8
 800170a:	f200 80e1 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x34>
 8001712:	2b04      	cmp	r3, #4
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x3a>
 8001716:	e0db      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001718:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800171c:	e0db      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800171e:	4b73      	ldr	r3, [pc, #460]	; (80018ec <HAL_RCC_GetSysClockFreq+0x208>)
 8001720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001722:	e0d8      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172e:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d063      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173a:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	2200      	movs	r2, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
 8001744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001756:	4622      	mov	r2, r4
 8001758:	462b      	mov	r3, r5
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0159      	lsls	r1, r3, #5
 8001764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001768:	0150      	lsls	r0, r2, #5
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4621      	mov	r1, r4
 8001770:	1a51      	subs	r1, r2, r1
 8001772:	6139      	str	r1, [r7, #16]
 8001774:	4629      	mov	r1, r5
 8001776:	eb63 0301 	sbc.w	r3, r3, r1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001788:	4659      	mov	r1, fp
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	4651      	mov	r1, sl
 800178e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001792:	4651      	mov	r1, sl
 8001794:	018a      	lsls	r2, r1, #6
 8001796:	4651      	mov	r1, sl
 8001798:	ebb2 0801 	subs.w	r8, r2, r1
 800179c:	4659      	mov	r1, fp
 800179e:	eb63 0901 	sbc.w	r9, r3, r1
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b6:	4690      	mov	r8, r2
 80017b8:	4699      	mov	r9, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	eb18 0303 	adds.w	r3, r8, r3
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	462b      	mov	r3, r5
 80017c4:	eb49 0303 	adc.w	r3, r9, r3
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017d6:	4629      	mov	r1, r5
 80017d8:	024b      	lsls	r3, r1, #9
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e0:	4621      	mov	r1, r4
 80017e2:	024a      	lsls	r2, r1, #9
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ea:	2200      	movs	r2, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017f4:	f7fe fcf4 	bl	80001e0 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001800:	e058      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	4618      	mov	r0, r3
 800180c:	4611      	mov	r1, r2
 800180e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800181c:	4642      	mov	r2, r8
 800181e:	464b      	mov	r3, r9
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	0159      	lsls	r1, r3, #5
 800182a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182e:	0150      	lsls	r0, r2, #5
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4641      	mov	r1, r8
 8001836:	ebb2 0a01 	subs.w	sl, r2, r1
 800183a:	4649      	mov	r1, r9
 800183c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001854:	ebb2 040a 	subs.w	r4, r2, sl
 8001858:	eb63 050b 	sbc.w	r5, r3, fp
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	00eb      	lsls	r3, r5, #3
 8001866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186a:	00e2      	lsls	r2, r4, #3
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	4643      	mov	r3, r8
 8001872:	18e3      	adds	r3, r4, r3
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	464b      	mov	r3, r9
 8001878:	eb45 0303 	adc.w	r3, r5, r3
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188a:	4629      	mov	r1, r5
 800188c:	028b      	lsls	r3, r1, #10
 800188e:	4621      	mov	r1, r4
 8001890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001894:	4621      	mov	r1, r4
 8001896:	028a      	lsls	r2, r1, #10
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189e:	2200      	movs	r2, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	61fa      	str	r2, [r7, #28]
 80018a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a8:	f7fe fc9a 	bl	80001e0 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3750      	adds	r7, #80	; 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	080051fc 	.word	0x080051fc

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	080051fc 	.word	0x080051fc

08001958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RCC_GetClockConfig+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e041      	b.n	8001a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f839 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 f9ca 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e044      	b.n	8001b12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d018      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab2:	d013      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00e      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d004      	beq.n	8001adc <HAL_TIM_Base_Start_IT+0x6c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d010      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	e007      	b.n	8001b10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40014000 	.word	0x40014000

08001b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0202 	mvn.w	r2, #2
 8001b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8ee 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8e0 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8f1 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0204 	mvn.w	r2, #4
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8c4 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8b6 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8c7 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0208 	mvn.w	r2, #8
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f89a 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f88c 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f89d 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0210 	mvn.w	r2, #16
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2208      	movs	r2, #8
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f870 	bl	8001d58 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f862 	bl	8001d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f873 	bl	8001d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0201 	mvn.w	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fdb6 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc2:	2b80      	cmp	r3, #128	; 0x80
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd0:	2b80      	cmp	r3, #128	; 0x80
 8001cd2:	d107      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8e2 	bl	8001ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b40      	cmp	r3, #64	; 0x40
 8001cf0:	d10e      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	d107      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f838 	bl	8001d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d107      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0220 	mvn.w	r2, #32
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8ac 	bl	8001e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00f      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d00b      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a2f      	ldr	r2, [pc, #188]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dec:	d017      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <TIM_Base_SetConfig+0xe8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <TIM_Base_SetConfig+0xec>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00f      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <TIM_Base_SetConfig+0xf0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <TIM_Base_SetConfig+0xf4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <TIM_Base_SetConfig+0xf8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <TIM_Base_SetConfig+0xfc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <TIM_Base_SetConfig+0xe4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40014400 	.word	0x40014400
 8001e90:	40014800 	.word	0x40014800

08001e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e03f      	b.n	8001f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fce2 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f829 	bl	8001f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b0c0      	sub	sp, #256	; 0x100
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	ea40 0301 	orr.w	r3, r0, r1
 8001f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fb0:	f021 010c 	bic.w	r1, r1, #12
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd2:	6999      	ldr	r1, [r3, #24]
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	ea40 0301 	orr.w	r3, r0, r1
 8001fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <UART_SetConfig+0x2cc>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d005      	beq.n	8001ff8 <UART_SetConfig+0xa0>
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <UART_SetConfig+0x2d0>)
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d104      	bne.n	8002002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff8:	f7ff fc9a 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8001ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002000:	e003      	b.n	800200a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002002:	f7ff fc81 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002014:	f040 810c 	bne.w	8002230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800202a:	4622      	mov	r2, r4
 800202c:	462b      	mov	r3, r5
 800202e:	1891      	adds	r1, r2, r2
 8002030:	65b9      	str	r1, [r7, #88]	; 0x58
 8002032:	415b      	adcs	r3, r3
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800203a:	4621      	mov	r1, r4
 800203c:	eb12 0801 	adds.w	r8, r2, r1
 8002040:	4629      	mov	r1, r5
 8002042:	eb43 0901 	adc.w	r9, r3, r1
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800205a:	4690      	mov	r8, r2
 800205c:	4699      	mov	r9, r3
 800205e:	4623      	mov	r3, r4
 8002060:	eb18 0303 	adds.w	r3, r8, r3
 8002064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002068:	462b      	mov	r3, r5
 800206a:	eb49 0303 	adc.w	r3, r9, r3
 800206e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800207e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002086:	460b      	mov	r3, r1
 8002088:	18db      	adds	r3, r3, r3
 800208a:	653b      	str	r3, [r7, #80]	; 0x50
 800208c:	4613      	mov	r3, r2
 800208e:	eb42 0303 	adc.w	r3, r2, r3
 8002092:	657b      	str	r3, [r7, #84]	; 0x54
 8002094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800209c:	f7fe f8a0 	bl	80001e0 <__aeabi_uldivmod>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <UART_SetConfig+0x2d4>)
 80020a6:	fba3 2302 	umull	r2, r3, r3, r2
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	011c      	lsls	r4, r3, #4
 80020ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020c0:	4642      	mov	r2, r8
 80020c2:	464b      	mov	r3, r9
 80020c4:	1891      	adds	r1, r2, r2
 80020c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80020c8:	415b      	adcs	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020d0:	4641      	mov	r1, r8
 80020d2:	eb12 0a01 	adds.w	sl, r2, r1
 80020d6:	4649      	mov	r1, r9
 80020d8:	eb43 0b01 	adc.w	fp, r3, r1
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f0:	4692      	mov	sl, r2
 80020f2:	469b      	mov	fp, r3
 80020f4:	4643      	mov	r3, r8
 80020f6:	eb1a 0303 	adds.w	r3, sl, r3
 80020fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020fe:	464b      	mov	r3, r9
 8002100:	eb4b 0303 	adc.w	r3, fp, r3
 8002104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800211c:	460b      	mov	r3, r1
 800211e:	18db      	adds	r3, r3, r3
 8002120:	643b      	str	r3, [r7, #64]	; 0x40
 8002122:	4613      	mov	r3, r2
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
 800212a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800212e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002132:	f7fe f855 	bl	80001e0 <__aeabi_uldivmod>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4611      	mov	r1, r2
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <UART_SetConfig+0x2d4>)
 800213e:	fba3 2301 	umull	r2, r3, r3, r1
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2264      	movs	r2, #100	; 0x64
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	1acb      	subs	r3, r1, r3
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <UART_SetConfig+0x2d4>)
 8002154:	fba3 2302 	umull	r2, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002160:	441c      	add	r4, r3
 8002162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800216c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002174:	4642      	mov	r2, r8
 8002176:	464b      	mov	r3, r9
 8002178:	1891      	adds	r1, r2, r2
 800217a:	63b9      	str	r1, [r7, #56]	; 0x38
 800217c:	415b      	adcs	r3, r3
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002184:	4641      	mov	r1, r8
 8002186:	1851      	adds	r1, r2, r1
 8002188:	6339      	str	r1, [r7, #48]	; 0x30
 800218a:	4649      	mov	r1, r9
 800218c:	414b      	adcs	r3, r1
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800219c:	4659      	mov	r1, fp
 800219e:	00cb      	lsls	r3, r1, #3
 80021a0:	4651      	mov	r1, sl
 80021a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021a6:	4651      	mov	r1, sl
 80021a8:	00ca      	lsls	r2, r1, #3
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	4642      	mov	r2, r8
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021b8:	464b      	mov	r3, r9
 80021ba:	460a      	mov	r2, r1
 80021bc:	eb42 0303 	adc.w	r3, r2, r3
 80021c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021d8:	460b      	mov	r3, r1
 80021da:	18db      	adds	r3, r3, r3
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021de:	4613      	mov	r3, r2
 80021e0:	eb42 0303 	adc.w	r3, r2, r3
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021ee:	f7fd fff7 	bl	80001e0 <__aeabi_uldivmod>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <UART_SetConfig+0x2d4>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3332      	adds	r3, #50	; 0x32
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <UART_SetConfig+0x2d4>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	f003 0207 	and.w	r2, r3, #7
 8002216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4422      	add	r2, r4
 800221e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002220:	e106      	b.n	8002430 <UART_SetConfig+0x4d8>
 8002222:	bf00      	nop
 8002224:	40011000 	.word	0x40011000
 8002228:	40011400 	.word	0x40011400
 800222c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002234:	2200      	movs	r2, #0
 8002236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800223a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800223e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002242:	4642      	mov	r2, r8
 8002244:	464b      	mov	r3, r9
 8002246:	1891      	adds	r1, r2, r2
 8002248:	6239      	str	r1, [r7, #32]
 800224a:	415b      	adcs	r3, r3
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002252:	4641      	mov	r1, r8
 8002254:	1854      	adds	r4, r2, r1
 8002256:	4649      	mov	r1, r9
 8002258:	eb43 0501 	adc.w	r5, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	00eb      	lsls	r3, r5, #3
 8002266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800226a:	00e2      	lsls	r2, r4, #3
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	4643      	mov	r3, r8
 8002272:	18e3      	adds	r3, r4, r3
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002278:	464b      	mov	r3, r9
 800227a:	eb45 0303 	adc.w	r3, r5, r3
 800227e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800228e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800229e:	4629      	mov	r1, r5
 80022a0:	008b      	lsls	r3, r1, #2
 80022a2:	4621      	mov	r1, r4
 80022a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a8:	4621      	mov	r1, r4
 80022aa:	008a      	lsls	r2, r1, #2
 80022ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022b0:	f7fd ff96 	bl	80001e0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4b60      	ldr	r3, [pc, #384]	; (800243c <UART_SetConfig+0x4e4>)
 80022ba:	fba3 2302 	umull	r2, r3, r3, r2
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	011c      	lsls	r4, r3, #4
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	61b9      	str	r1, [r7, #24]
 80022dc:	415b      	adcs	r3, r3
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e4:	4641      	mov	r1, r8
 80022e6:	1851      	adds	r1, r2, r1
 80022e8:	6139      	str	r1, [r7, #16]
 80022ea:	4649      	mov	r1, r9
 80022ec:	414b      	adcs	r3, r1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022fc:	4659      	mov	r1, fp
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4651      	mov	r1, sl
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4642      	mov	r2, r8
 8002312:	189b      	adds	r3, r3, r2
 8002314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002318:	464b      	mov	r3, r9
 800231a:	460a      	mov	r2, r1
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	67bb      	str	r3, [r7, #120]	; 0x78
 800232e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800233c:	4649      	mov	r1, r9
 800233e:	008b      	lsls	r3, r1, #2
 8002340:	4641      	mov	r1, r8
 8002342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002346:	4641      	mov	r1, r8
 8002348:	008a      	lsls	r2, r1, #2
 800234a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800234e:	f7fd ff47 	bl	80001e0 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4611      	mov	r1, r2
 8002358:	4b38      	ldr	r3, [pc, #224]	; (800243c <UART_SetConfig+0x4e4>)
 800235a:	fba3 2301 	umull	r2, r3, r3, r1
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2264      	movs	r2, #100	; 0x64
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	1acb      	subs	r3, r1, r3
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	3332      	adds	r3, #50	; 0x32
 800236c:	4a33      	ldr	r2, [pc, #204]	; (800243c <UART_SetConfig+0x4e4>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	441c      	add	r4, r3
 800237a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800237e:	2200      	movs	r2, #0
 8002380:	673b      	str	r3, [r7, #112]	; 0x70
 8002382:	677a      	str	r2, [r7, #116]	; 0x74
 8002384:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002388:	4642      	mov	r2, r8
 800238a:	464b      	mov	r3, r9
 800238c:	1891      	adds	r1, r2, r2
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	415b      	adcs	r3, r3
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002398:	4641      	mov	r1, r8
 800239a:	1851      	adds	r1, r2, r1
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	4649      	mov	r1, r9
 80023a0:	414b      	adcs	r3, r1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023b0:	4659      	mov	r1, fp
 80023b2:	00cb      	lsls	r3, r1, #3
 80023b4:	4651      	mov	r1, sl
 80023b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ba:	4651      	mov	r1, sl
 80023bc:	00ca      	lsls	r2, r1, #3
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	4642      	mov	r2, r8
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80023ca:	464b      	mov	r3, r9
 80023cc:	460a      	mov	r2, r1
 80023ce:	eb42 0303 	adc.w	r3, r2, r3
 80023d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	663b      	str	r3, [r7, #96]	; 0x60
 80023de:	667a      	str	r2, [r7, #100]	; 0x64
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023ec:	4649      	mov	r1, r9
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	4641      	mov	r1, r8
 80023f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f6:	4641      	mov	r1, r8
 80023f8:	008a      	lsls	r2, r1, #2
 80023fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023fe:	f7fd feef 	bl	80001e0 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <UART_SetConfig+0x4e4>)
 8002408:	fba3 1302 	umull	r1, r3, r3, r2
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	2164      	movs	r1, #100	; 0x64
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <UART_SetConfig+0x4e4>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4422      	add	r2, r4
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002436:	46bd      	mov	sp, r7
 8002438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243c:	51eb851f 	.word	0x51eb851f

08002440 <__NVIC_SetPriority>:
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Handler+0x1c>)
 800249a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800249c:	f001 fd28 	bl	8003ef0 <xTaskGetSchedulerState>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80024a6:	f002 fb0f 	bl	8004ac8 <xPortSysTickHandler>
  }
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80024b8:	2100      	movs	r1, #0
 80024ba:	f06f 0004 	mvn.w	r0, #4
 80024be:	f7ff ffbf 	bl	8002440 <__NVIC_SetPriority>
#endif
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ce:	f3ef 8305 	mrs	r3, IPSR
 80024d2:	603b      	str	r3, [r7, #0]
  return(result);
 80024d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80024da:	f06f 0305 	mvn.w	r3, #5
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	e00c      	b.n	80024fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <osKernelInitialize+0x44>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <osKernelInitialize+0x44>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	e002      	b.n	80024fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000012c 	.word	0x2000012c

08002510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002516:	f3ef 8305 	mrs	r3, IPSR
 800251a:	603b      	str	r3, [r7, #0]
  return(result);
 800251c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002522:	f06f 0305 	mvn.w	r3, #5
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	e010      	b.n	800254c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <osKernelStart+0x48>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d109      	bne.n	8002546 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002532:	f7ff ffbf 	bl	80024b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <osKernelStart+0x48>)
 8002538:	2202      	movs	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800253c:	f001 f87c 	bl	8003638 <vTaskStartScheduler>
      stat = osOK;
 8002540:	2300      	movs	r3, #0
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	e002      	b.n	800254c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
 800254a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000012c 	.word	0x2000012c

0800255c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af04      	add	r7, sp, #16
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800256c:	f3ef 8305 	mrs	r3, IPSR
 8002570:	617b      	str	r3, [r7, #20]
  return(result);
 8002572:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002574:	2b00      	cmp	r3, #0
 8002576:	d17e      	bne.n	8002676 <osThreadNew+0x11a>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d07b      	beq.n	8002676 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002582:	2318      	movs	r3, #24
 8002584:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d045      	beq.n	8002622 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <osThreadNew+0x48>
        name = attr->name;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <osThreadNew+0x6e>
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b38      	cmp	r3, #56	; 0x38
 80025bc:	d805      	bhi.n	80025ca <osThreadNew+0x6e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <osThreadNew+0x72>
        return (NULL);
 80025ca:	2300      	movs	r3, #0
 80025cc:	e054      	b.n	8002678 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <osThreadNew+0xa8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2ba7      	cmp	r3, #167	; 0xa7
 80025ec:	d90a      	bls.n	8002604 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <osThreadNew+0xa8>
        mem = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e010      	b.n	8002626 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10c      	bne.n	8002626 <osThreadNew+0xca>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <osThreadNew+0xca>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <osThreadNew+0xca>
          mem = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	e001      	b.n	8002626 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d110      	bne.n	800264e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002634:	9202      	str	r2, [sp, #8]
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6a3a      	ldr	r2, [r7, #32]
 8002640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fe0c 	bl	8003260 <xTaskCreateStatic>
 8002648:	4603      	mov	r3, r0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e013      	b.n	8002676 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d110      	bne.n	8002676 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	b29a      	uxth	r2, r3
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fe57 	bl	800331a <xTaskCreate>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <osThreadNew+0x11a>
            hTask = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002676:	693b      	ldr	r3, [r7, #16]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002688:	f3ef 8305 	mrs	r3, IPSR
 800268c:	60bb      	str	r3, [r7, #8]
  return(result);
 800268e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <osDelay+0x1c>
    stat = osErrorISR;
 8002694:	f06f 0305 	mvn.w	r3, #5
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e007      	b.n	80026ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 ff92 	bl	80035d0 <vTaskDelay>
    }
  }

  return (stat);
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80026c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <vApplicationGetIdleTaskMemory+0x30>)
 80026ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	601a      	str	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000130 	.word	0x20000130
 80026e8:	200001d8 	.word	0x200001d8

080026ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <vApplicationGetTimerTaskMemory+0x2c>)
 80026fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <vApplicationGetTimerTaskMemory+0x30>)
 8002702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270a:	601a      	str	r2, [r3, #0]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	200003d8 	.word	0x200003d8
 800271c:	20000480 	.word	0x20000480

08002720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0208 	add.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f103 0208 	add.w	r2, r3, #8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 0208 	add.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d103      	bne.n	80027e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00c      	b.n	80027fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3308      	adds	r3, #8
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e002      	b.n	80027f0 <vListInsert+0x2e>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d2f6      	bcs.n	80027ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6852      	ldr	r2, [r2, #4]
 8002854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d103      	bne.n	8002868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028b2:	f002 f877 	bl	80049a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	441a      	add	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	3b01      	subs	r3, #1
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	441a      	add	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	22ff      	movs	r2, #255	; 0xff
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d114      	bne.n	8002932 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01a      	beq.n	8002946 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3310      	adds	r3, #16
 8002914:	4618      	mov	r0, r3
 8002916:	f001 f929 	bl	8003b6c <xTaskRemoveFromEventList>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <xQueueGenericReset+0xcc>)
 8002922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	e009      	b.n	8002946 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3310      	adds	r3, #16
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fef2 	bl	8002720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3324      	adds	r3, #36	; 0x24
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff feed 	bl	8002720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002946:	f002 f85d 	bl	8004a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e000ed04 	.word	0xe000ed04

08002958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <xQueueGenericCreateStatic+0x52>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <xQueueGenericCreateStatic+0x56>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericCreateStatic+0x58>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	623b      	str	r3, [r7, #32]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <xQueueGenericCreateStatic+0x7e>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <xQueueGenericCreateStatic+0x82>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericCreateStatic+0x84>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	61fb      	str	r3, [r7, #28]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029f6:	2350      	movs	r3, #80	; 0x50
 80029f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b50      	cmp	r3, #80	; 0x50
 80029fe:	d00a      	beq.n	8002a16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61bb      	str	r3, [r7, #24]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f805 	bl	8002a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e002      	b.n	8002a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a76:	2101      	movs	r1, #1
 8002a78:	69b8      	ldr	r0, [r7, #24]
 8002a7a:	f7ff ff05 	bl	8002888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	; 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <xQueueGenericSend+0x32>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <xQueueGenericSend+0x40>
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <xQueueGenericSend+0x44>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <xQueueGenericSend+0x46>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <xQueueGenericSend+0x60>
	__asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aec:	bf00      	nop
 8002aee:	e7fe      	b.n	8002aee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d103      	bne.n	8002afe <xQueueGenericSend+0x6e>
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <xQueueGenericSend+0x72>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueGenericSend+0x74>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericSend+0x8e>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	623b      	str	r3, [r7, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b1e:	f001 f9e7 	bl	8003ef0 <xTaskGetSchedulerState>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <xQueueGenericSend+0x9e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <xQueueGenericSend+0xa2>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <xQueueGenericSend+0xa4>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericSend+0xbe>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61fb      	str	r3, [r7, #28]
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b4e:	f001 ff29 	bl	80049a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <xQueueGenericSend+0xd4>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d129      	bne.n	8002bb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b6a:	f000 fa0b 	bl	8002f84 <prvCopyDataToQueue>
 8002b6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	3324      	adds	r3, #36	; 0x24
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fff5 	bl	8003b6c <xTaskRemoveFromEventList>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <xQueueGenericSend+0x1f8>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	e00a      	b.n	8002bb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <xQueueGenericSend+0x1f8>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bb0:	f001 ff28 	bl	8004a04 <vPortExitCritical>
				return pdPASS;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e063      	b.n	8002c80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bbe:	f001 ff21 	bl	8004a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e05c      	b.n	8002c80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f82f 	bl	8003c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bda:	f001 ff13 	bl	8004a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bde:	f000 fd9b 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002be2:	f001 fedf 	bl	80049a4 <vPortEnterCritical>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d103      	bne.n	8002bfc <xQueueGenericSend+0x16c>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <xQueueGenericSend+0x182>
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c12:	f001 fef7 	bl	8004a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c16:	1d3a      	adds	r2, r7, #4
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f81e 	bl	8003c60 <xTaskCheckForTimeOut>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d124      	bne.n	8002c74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2c:	f000 faa2 	bl	8003174 <prvIsQueueFull>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d018      	beq.n	8002c68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	3310      	adds	r3, #16
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ff44 	bl	8003acc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c46:	f000 fa2d 	bl	80030a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c4a:	f000 fd73 	bl	8003734 <xTaskResumeAll>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af7c 	bne.w	8002b4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <xQueueGenericSend+0x1f8>)
 8002c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	e772      	b.n	8002b4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6a:	f000 fa1b 	bl	80030a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c6e:	f000 fd61 	bl	8003734 <xTaskResumeAll>
 8002c72:	e76c      	b.n	8002b4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c76:	f000 fa15 	bl	80030a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c7a:	f000 fd5b 	bl	8003734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b090      	sub	sp, #64	; 0x40
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <xQueueGenericSendFromISR+0x3c>
 8002cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <xQueueGenericSendFromISR+0x40>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <xQueueGenericSendFromISR+0x42>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d103      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x6a>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <xQueueGenericSendFromISR+0x6e>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueGenericSendFromISR+0x70>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	623b      	str	r3, [r7, #32]
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d16:	f001 ff27 	bl	8004b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d1a:	f3ef 8211 	mrs	r2, BASEPRI
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	61fa      	str	r2, [r7, #28]
 8002d30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <xQueueGenericSendFromISR+0xbc>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d12f      	bne.n	8002da8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d5e:	f000 f911 	bl	8002f84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d112      	bne.n	8002d92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	3324      	adds	r3, #36	; 0x24
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fef7 	bl	8003b6c <xTaskRemoveFromEventList>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e007      	b.n	8002da2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d96:	3301      	adds	r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002da2:	2301      	movs	r3, #1
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002da6:	e001      	b.n	8002dac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002db6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3740      	adds	r7, #64	; 0x40
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <xQueueReceive+0x30>
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	623b      	str	r3, [r7, #32]
}
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <xQueueReceive+0x3e>
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <xQueueReceive+0x42>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <xQueueReceive+0x44>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xQueueReceive+0x5e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61fb      	str	r3, [r7, #28]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e22:	f001 f865 	bl	8003ef0 <xTaskGetSchedulerState>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <xQueueReceive+0x6e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <xQueueReceive+0x72>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <xQueueReceive+0x74>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <xQueueReceive+0x8e>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61bb      	str	r3, [r7, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	e7fe      	b.n	8002e50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e52:	f001 fda7 	bl	80049a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01f      	beq.n	8002ea2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e66:	f000 f8f7 	bl	8003058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00f      	beq.n	8002e9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fe74 	bl	8003b6c <xTaskRemoveFromEventList>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <xQueueReceive+0x1bc>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e9a:	f001 fdb3 	bl	8004a04 <vPortExitCritical>
				return pdPASS;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e069      	b.n	8002f76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ea8:	f001 fdac 	bl	8004a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e062      	b.n	8002f76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 feba 	bl	8003c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ec4:	f001 fd9e 	bl	8004a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ec8:	f000 fc26 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ecc:	f001 fd6a 	bl	80049a4 <vPortEnterCritical>
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d103      	bne.n	8002ee6 <xQueueReceive+0x122>
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d103      	bne.n	8002efc <xQueueReceive+0x138>
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002efc:	f001 fd82 	bl	8004a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f00:	1d3a      	adds	r2, r7, #4
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fea9 	bl	8003c60 <xTaskCheckForTimeOut>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d123      	bne.n	8002f5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f16:	f000 f917 	bl	8003148 <prvIsQueueEmpty>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	3324      	adds	r3, #36	; 0x24
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fdcf 	bl	8003acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f30:	f000 f8b8 	bl	80030a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f34:	f000 fbfe 	bl	8003734 <xTaskResumeAll>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d189      	bne.n	8002e52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <xQueueReceive+0x1bc>)
 8002f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	e780      	b.n	8002e52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f000 f8a7 	bl	80030a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f56:	f000 fbed 	bl	8003734 <xTaskResumeAll>
 8002f5a:	e77a      	b.n	8002e52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5e:	f000 f8a1 	bl	80030a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f62:	f000 fbe7 	bl	8003734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f68:	f000 f8ee 	bl	8003148 <prvIsQueueEmpty>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f43f af6f 	beq.w	8002e52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3730      	adds	r7, #48	; 0x30
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d14d      	bne.n	8003046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 ffbc 	bl	8003f2c <xTaskPriorityDisinherit>
 8002fb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	e043      	b.n	8003046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d119      	bne.n	8002ff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6858      	ldr	r0, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	f002 f878 	bl	80050c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	441a      	add	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d32b      	bcc.n	8003046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	e026      	b.n	8003046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68d8      	ldr	r0, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	461a      	mov	r2, r3
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	f002 f85e 	bl	80050c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	425b      	negs	r3, r3
 8003012:	441a      	add	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	425b      	negs	r3, r3
 800302e:	441a      	add	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d105      	bne.n	8003046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3b01      	subs	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800304e:	697b      	ldr	r3, [r7, #20]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	441a      	add	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d303      	bcc.n	800308c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68d9      	ldr	r1, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	461a      	mov	r2, r3
 8003096:	6838      	ldr	r0, [r7, #0]
 8003098:	f002 f814 	bl	80050c4 <memcpy>
	}
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030ac:	f001 fc7a 	bl	80049a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030b8:	e011      	b.n	80030de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3324      	adds	r3, #36	; 0x24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd50 	bl	8003b6c <xTaskRemoveFromEventList>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030d2:	f000 fe27 	bl	8003d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	3b01      	subs	r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	dce9      	bgt.n	80030ba <prvUnlockQueue+0x16>
 80030e6:	e000      	b.n	80030ea <prvUnlockQueue+0x46>
					break;
 80030e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030f2:	f001 fc87 	bl	8004a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030f6:	f001 fc55 	bl	80049a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003102:	e011      	b.n	8003128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3310      	adds	r3, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd2b 	bl	8003b6c <xTaskRemoveFromEventList>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800311c:	f000 fe02 	bl	8003d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003120:	7bbb      	ldrb	r3, [r7, #14]
 8003122:	3b01      	subs	r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800312c:	2b00      	cmp	r3, #0
 800312e:	dce9      	bgt.n	8003104 <prvUnlockQueue+0x60>
 8003130:	e000      	b.n	8003134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800313c:	f001 fc62 	bl	8004a04 <vPortExitCritical>
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003150:	f001 fc28 	bl	80049a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800315c:	2301      	movs	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e001      	b.n	8003166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003166:	f001 fc4d 	bl	8004a04 <vPortExitCritical>

	return xReturn;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800317c:	f001 fc12 	bl	80049a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	429a      	cmp	r2, r3
 800318a:	d102      	bne.n	8003192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e001      	b.n	8003196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003196:	f001 fc35 	bl	8004a04 <vPortExitCritical>

	return xReturn;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e014      	b.n	80031de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <vQueueAddToRegistry+0x50>)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031c0:	490c      	ldr	r1, [pc, #48]	; (80031f4 <vQueueAddToRegistry+0x50>)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <vQueueAddToRegistry+0x50>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031d6:	e006      	b.n	80031e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b07      	cmp	r3, #7
 80031e2:	d9e7      	bls.n	80031b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000880 	.word	0x20000880

080031f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003208:	f001 fbcc 	bl	80049a4 <vPortEnterCritical>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003212:	b25b      	sxtb	r3, r3
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d103      	bne.n	8003222 <vQueueWaitForMessageRestricted+0x2a>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003228:	b25b      	sxtb	r3, r3
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d103      	bne.n	8003238 <vQueueWaitForMessageRestricted+0x40>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003238:	f001 fbe4 	bl	8004a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3324      	adds	r3, #36	; 0x24
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fc61 	bl	8003b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7ff ff26 	bl	80030a4 <prvUnlockQueue>
	}
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08e      	sub	sp, #56	; 0x38
 8003264:	af04      	add	r7, sp, #16
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	623b      	str	r3, [r7, #32]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	61fb      	str	r3, [r7, #28]
}
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032a6:	23a8      	movs	r3, #168	; 0xa8
 80032a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2ba8      	cmp	r3, #168	; 0xa8
 80032ae:	d00a      	beq.n	80032c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80032b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	61bb      	str	r3, [r7, #24]
}
 80032c2:	bf00      	nop
 80032c4:	e7fe      	b.n	80032c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01e      	beq.n	800330c <xTaskCreateStatic+0xac>
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032e6:	2300      	movs	r3, #0
 80032e8:	9303      	str	r3, [sp, #12]
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f850 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f000 f8f3 	bl	80034f0 <prvAddNewTaskToReadyList>
 800330a:	e001      	b.n	8003310 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003310:	697b      	ldr	r3, [r7, #20]
	}
 8003312:	4618      	mov	r0, r3
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af04      	add	r7, sp, #16
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fc5a 	bl	8004be8 <pvPortMalloc>
 8003334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800333c:	20a8      	movs	r0, #168	; 0xa8
 800333e:	f001 fc53 	bl	8004be8 <pvPortMalloc>
 8003342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
 8003350:	e005      	b.n	800335e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f001 fd14 	bl	8004d80 <vPortFree>
 8003358:	e001      	b.n	800335e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	2300      	movs	r3, #0
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f80e 	bl	80033a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003388:	69f8      	ldr	r0, [r7, #28]
 800338a:	f000 f8b1 	bl	80034f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	e002      	b.n	800339a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800339a:	69bb      	ldr	r3, [r7, #24]
	}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	461a      	mov	r2, r3
 80033bc:	21a5      	movs	r1, #165	; 0xa5
 80033be:	f001 fdfd 	bl	8004fbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	3b01      	subs	r3, #1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	617b      	str	r3, [r7, #20]
}
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01f      	beq.n	8003442 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e012      	b.n	800342e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	7819      	ldrb	r1, [r3, #0]
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	3334      	adds	r3, #52	; 0x34
 8003418:	460a      	mov	r2, r1
 800341a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	3301      	adds	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d9e9      	bls.n	8003408 <prvInitialiseNewTask+0x64>
 8003434:	e000      	b.n	8003438 <prvInitialiseNewTask+0x94>
			{
				break;
 8003436:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003440:	e003      	b.n	800344a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	2b37      	cmp	r3, #55	; 0x37
 800344e:	d901      	bls.n	8003454 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003450:	2337      	movs	r3, #55	; 0x37
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	2200      	movs	r2, #0
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	3304      	adds	r3, #4
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f978 	bl	8002760 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	3318      	adds	r3, #24
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f973 	bl	8002760 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	2200      	movs	r2, #0
 8003494:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	2200      	movs	r2, #0
 800349c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	3354      	adds	r3, #84	; 0x54
 80034a4:	224c      	movs	r2, #76	; 0x4c
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fd87 	bl	8004fbc <memset>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <prvInitialiseNewTask+0x140>)
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <prvInitialiseNewTask+0x144>)
 80034b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <prvInitialiseNewTask+0x148>)
 80034be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	69b8      	ldr	r0, [r7, #24]
 80034c6:	f001 f941 	bl	800474c <pxPortInitialiseStack>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034dc:	bf00      	nop
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20004b14 	.word	0x20004b14
 80034e8:	20004b7c 	.word	0x20004b7c
 80034ec:	20004be4 	.word	0x20004be4

080034f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034f8:	f001 fa54 	bl	80049a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <prvAddNewTaskToReadyList+0xc4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <prvAddNewTaskToReadyList+0xc4>)
 8003504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <prvAddNewTaskToReadyList+0xc8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800350e:	4a2a      	ldr	r2, [pc, #168]	; (80035b8 <prvAddNewTaskToReadyList+0xc8>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <prvAddNewTaskToReadyList+0xc4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d110      	bne.n	800353e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800351c:	f000 fc26 	bl	8003d6c <prvInitialiseTaskLists>
 8003520:	e00d      	b.n	800353e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <prvAddNewTaskToReadyList+0xcc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <prvAddNewTaskToReadyList+0xc8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	429a      	cmp	r2, r3
 8003536:	d802      	bhi.n	800353e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <prvAddNewTaskToReadyList+0xc8>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <prvAddNewTaskToReadyList+0xd0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <prvAddNewTaskToReadyList+0xd0>)
 8003546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <prvAddNewTaskToReadyList+0xd0>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <prvAddNewTaskToReadyList+0xd4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d903      	bls.n	8003564 <prvAddNewTaskToReadyList+0x74>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <prvAddNewTaskToReadyList+0xd4>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <prvAddNewTaskToReadyList+0xd8>)
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7ff f8fd 	bl	800277a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003580:	f001 fa40 	bl	8004a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <prvAddNewTaskToReadyList+0xcc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <prvAddNewTaskToReadyList+0xc8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d207      	bcs.n	80035aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <prvAddNewTaskToReadyList+0xdc>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000d94 	.word	0x20000d94
 80035b8:	200008c0 	.word	0x200008c0
 80035bc:	20000da0 	.word	0x20000da0
 80035c0:	20000db0 	.word	0x20000db0
 80035c4:	20000d9c 	.word	0x20000d9c
 80035c8:	200008c4 	.word	0x200008c4
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d017      	beq.n	8003612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <vTaskDelay+0x60>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <vTaskDelay+0x30>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60bb      	str	r3, [r7, #8]
}
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003600:	f000 f88a 	bl	8003718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003604:	2100      	movs	r1, #0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fcfe 	bl	8004008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800360c:	f000 f892 	bl	8003734 <xTaskResumeAll>
 8003610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <vTaskDelay+0x64>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000dbc 	.word	0x20000dbc
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003646:	463a      	mov	r2, r7
 8003648:	1d39      	adds	r1, r7, #4
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f832 	bl	80026b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	9202      	str	r2, [sp, #8]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2300      	movs	r3, #0
 8003664:	460a      	mov	r2, r1
 8003666:	4924      	ldr	r1, [pc, #144]	; (80036f8 <vTaskStartScheduler+0xc0>)
 8003668:	4824      	ldr	r0, [pc, #144]	; (80036fc <vTaskStartScheduler+0xc4>)
 800366a:	f7ff fdf9 	bl	8003260 <xTaskCreateStatic>
 800366e:	4603      	mov	r3, r0
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <vTaskStartScheduler+0xc8>)
 8003672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <vTaskStartScheduler+0xc8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e001      	b.n	8003686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800368c:	f000 fd10 	bl	80040b0 <xTimerCreateTimerTask>
 8003690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d11b      	bne.n	80036d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	613b      	str	r3, [r7, #16]
}
 80036aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <vTaskStartScheduler+0xcc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3354      	adds	r3, #84	; 0x54
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <vTaskStartScheduler+0xd0>)
 80036b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <vTaskStartScheduler+0xd4>)
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <vTaskStartScheduler+0xd8>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <vTaskStartScheduler+0xdc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036ca:	f001 f8c9 	bl	8004860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036ce:	e00e      	b.n	80036ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d10a      	bne.n	80036ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	60fb      	str	r3, [r7, #12]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <vTaskStartScheduler+0xb4>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	080051d4 	.word	0x080051d4
 80036fc:	08003d3d 	.word	0x08003d3d
 8003700:	20000db8 	.word	0x20000db8
 8003704:	200008c0 	.word	0x200008c0
 8003708:	2000005c 	.word	0x2000005c
 800370c:	20000db4 	.word	0x20000db4
 8003710:	20000da0 	.word	0x20000da0
 8003714:	20000d98 	.word	0x20000d98

08003718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vTaskSuspendAll+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a03      	ldr	r2, [pc, #12]	; (8003730 <vTaskSuspendAll+0x18>)
 8003724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	20000dbc 	.word	0x20000dbc

08003734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <xTaskResumeAll+0x118>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <xTaskResumeAll+0x2c>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	603b      	str	r3, [r7, #0]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003760:	f001 f920 	bl	80049a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <xTaskResumeAll+0x118>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	4a38      	ldr	r2, [pc, #224]	; (800384c <xTaskResumeAll+0x118>)
 800376c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b37      	ldr	r3, [pc, #220]	; (800384c <xTaskResumeAll+0x118>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d162      	bne.n	800383c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <xTaskResumeAll+0x11c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d05e      	beq.n	800383c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800377e:	e02f      	b.n	80037e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b34      	ldr	r3, [pc, #208]	; (8003854 <xTaskResumeAll+0x120>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3318      	adds	r3, #24
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f851 	bl	8002834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f84c 	bl	8002834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <xTaskResumeAll+0x124>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d903      	bls.n	80037b0 <xTaskResumeAll+0x7c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <xTaskResumeAll+0x124>)
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4a27      	ldr	r2, [pc, #156]	; (800385c <xTaskResumeAll+0x128>)
 80037be:	441a      	add	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7fe ffd7 	bl	800277a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <xTaskResumeAll+0x12c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <xTaskResumeAll+0x130>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <xTaskResumeAll+0x120>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1cb      	bne.n	8003780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ee:	f000 fb5f 	bl	8003eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <xTaskResumeAll+0x134>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037fe:	f000 f847 	bl	8003890 <xTaskIncrementTick>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <xTaskResumeAll+0x130>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3b01      	subs	r3, #1
 8003812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f1      	bne.n	80037fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800381a:	4b13      	ldr	r3, [pc, #76]	; (8003868 <xTaskResumeAll+0x134>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <xTaskResumeAll+0x130>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d009      	beq.n	800383c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <xTaskResumeAll+0x138>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800383c:	f001 f8e2 	bl	8004a04 <vPortExitCritical>

	return xAlreadyYielded;
 8003840:	68bb      	ldr	r3, [r7, #8]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000dbc 	.word	0x20000dbc
 8003850:	20000d94 	.word	0x20000d94
 8003854:	20000d54 	.word	0x20000d54
 8003858:	20000d9c 	.word	0x20000d9c
 800385c:	200008c4 	.word	0x200008c4
 8003860:	200008c0 	.word	0x200008c0
 8003864:	20000da8 	.word	0x20000da8
 8003868:	20000da4 	.word	0x20000da4
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <xTaskGetTickCount+0x1c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800387c:	687b      	ldr	r3, [r7, #4]
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000d98 	.word	0x20000d98

08003890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800389a:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <xTaskIncrementTick+0x148>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 808f 	bne.w	80039c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038a4:	4b4d      	ldr	r3, [pc, #308]	; (80039dc <xTaskIncrementTick+0x14c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <xTaskIncrementTick+0x14c>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d120      	bne.n	80038fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <xTaskIncrementTick+0x150>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	603b      	str	r3, [r7, #0]
}
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xTaskIncrementTick+0x46>
 80038d8:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <xTaskIncrementTick+0x150>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <xTaskIncrementTick+0x154>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3f      	ldr	r2, [pc, #252]	; (80039e0 <xTaskIncrementTick+0x150>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4a3f      	ldr	r2, [pc, #252]	; (80039e4 <xTaskIncrementTick+0x154>)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	4b3e      	ldr	r3, [pc, #248]	; (80039e8 <xTaskIncrementTick+0x158>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <xTaskIncrementTick+0x158>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	f000 fadb 	bl	8003eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038fa:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <xTaskIncrementTick+0x15c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d349      	bcc.n	8003998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <xTaskIncrementTick+0x150>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <xTaskIncrementTick+0x15c>)
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	601a      	str	r2, [r3, #0]
					break;
 8003916:	e03f      	b.n	8003998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <xTaskIncrementTick+0x150>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d203      	bcs.n	8003938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <xTaskIncrementTick+0x15c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003936:	e02f      	b.n	8003998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3304      	adds	r3, #4
 800393c:	4618      	mov	r0, r3
 800393e:	f7fe ff79 	bl	8002834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3318      	adds	r3, #24
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe ff70 	bl	8002834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <xTaskIncrementTick+0x160>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d903      	bls.n	8003968 <xTaskIncrementTick+0xd8>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <xTaskIncrementTick+0x160>)
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <xTaskIncrementTick+0x164>)
 8003976:	441a      	add	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7fe fefb 	bl	800277a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <xTaskIncrementTick+0x168>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d3b8      	bcc.n	8003904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003992:	2301      	movs	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003996:	e7b5      	b.n	8003904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <xTaskIncrementTick+0x168>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4915      	ldr	r1, [pc, #84]	; (80039f4 <xTaskIncrementTick+0x164>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d901      	bls.n	80039b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80039b0:	2301      	movs	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <xTaskIncrementTick+0x16c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e004      	b.n	80039cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <xTaskIncrementTick+0x170>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <xTaskIncrementTick+0x170>)
 80039ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039cc:	697b      	ldr	r3, [r7, #20]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000dbc 	.word	0x20000dbc
 80039dc:	20000d98 	.word	0x20000d98
 80039e0:	20000d4c 	.word	0x20000d4c
 80039e4:	20000d50 	.word	0x20000d50
 80039e8:	20000dac 	.word	0x20000dac
 80039ec:	20000db4 	.word	0x20000db4
 80039f0:	20000d9c 	.word	0x20000d9c
 80039f4:	200008c4 	.word	0x200008c4
 80039f8:	200008c0 	.word	0x200008c0
 80039fc:	20000da8 	.word	0x20000da8
 8003a00:	20000da4 	.word	0x20000da4

08003a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <vTaskSwitchContext+0xb0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a12:	4b29      	ldr	r3, [pc, #164]	; (8003ab8 <vTaskSwitchContext+0xb4>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a18:	e046      	b.n	8003aa8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003a1a:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <vTaskSwitchContext+0xb4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <vTaskSwitchContext+0xb8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e010      	b.n	8003a4a <vTaskSwitchContext+0x46>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	607b      	str	r3, [r7, #4]
}
 8003a40:	bf00      	nop
 8003a42:	e7fe      	b.n	8003a42 <vTaskSwitchContext+0x3e>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	491d      	ldr	r1, [pc, #116]	; (8003ac0 <vTaskSwitchContext+0xbc>)
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0e4      	beq.n	8003a28 <vTaskSwitchContext+0x24>
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <vTaskSwitchContext+0xbc>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d104      	bne.n	8003a8e <vTaskSwitchContext+0x8a>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <vTaskSwitchContext+0xc0>)
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <vTaskSwitchContext+0xb8>)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <vTaskSwitchContext+0xc0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3354      	adds	r3, #84	; 0x54
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <vTaskSwitchContext+0xc4>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000dbc 	.word	0x20000dbc
 8003ab8:	20000da8 	.word	0x20000da8
 8003abc:	20000d9c 	.word	0x20000d9c
 8003ac0:	200008c4 	.word	0x200008c4
 8003ac4:	200008c0 	.word	0x200008c0
 8003ac8:	2000005c 	.word	0x2000005c

08003acc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <vTaskPlaceOnEventList+0x44>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3318      	adds	r3, #24
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe fe61 	bl	80027c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b00:	2101      	movs	r1, #1
 8003b02:	6838      	ldr	r0, [r7, #0]
 8003b04:	f000 fa80 	bl	8004008 <prvAddCurrentTaskToDelayedList>
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	200008c0 	.word	0x200008c0

08003b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	617b      	str	r3, [r7, #20]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3318      	adds	r3, #24
 8003b42:	4619      	mov	r1, r3
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7fe fe18 	bl	800277a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	68b8      	ldr	r0, [r7, #8]
 8003b5a:	f000 fa55 	bl	8004008 <prvAddCurrentTaskToDelayedList>
	}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200008c0 	.word	0x200008c0

08003b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60fb      	str	r3, [r7, #12]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	3318      	adds	r3, #24
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fe49 	bl	8002834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <xTaskRemoveFromEventList+0xb0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11d      	bne.n	8003be6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fe40 	bl	8002834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <xTaskRemoveFromEventList+0xb4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d903      	bls.n	8003bc8 <xTaskRemoveFromEventList+0x5c>
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <xTaskRemoveFromEventList+0xb4>)
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <xTaskRemoveFromEventList+0xb8>)
 8003bd6:	441a      	add	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7fe fdcb 	bl	800277a <vListInsertEnd>
 8003be4:	e005      	b.n	8003bf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3318      	adds	r3, #24
 8003bea:	4619      	mov	r1, r3
 8003bec:	480e      	ldr	r0, [pc, #56]	; (8003c28 <xTaskRemoveFromEventList+0xbc>)
 8003bee:	f7fe fdc4 	bl	800277a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <xTaskRemoveFromEventList+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d905      	bls.n	8003c0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <xTaskRemoveFromEventList+0xc4>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e001      	b.n	8003c10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c10:	697b      	ldr	r3, [r7, #20]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000dbc 	.word	0x20000dbc
 8003c20:	20000d9c 	.word	0x20000d9c
 8003c24:	200008c4 	.word	0x200008c4
 8003c28:	20000d54 	.word	0x20000d54
 8003c2c:	200008c0 	.word	0x200008c0
 8003c30:	20000da8 	.word	0x20000da8

08003c34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <vTaskInternalSetTimeOutState+0x24>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <vTaskInternalSetTimeOutState+0x28>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	605a      	str	r2, [r3, #4]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000dac 	.word	0x20000dac
 8003c5c:	20000d98 	.word	0x20000d98

08003c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	613b      	str	r3, [r7, #16]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	60fb      	str	r3, [r7, #12]
}
 8003c9e:	bf00      	nop
 8003ca0:	e7fe      	b.n	8003ca0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ca2:	f000 fe7f 	bl	80049a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <xTaskCheckForTimeOut+0xbc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d102      	bne.n	8003cc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	e023      	b.n	8003d0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <xTaskCheckForTimeOut+0xc0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d007      	beq.n	8003ce2 <xTaskCheckForTimeOut+0x82>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e015      	b.n	8003d0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d20b      	bcs.n	8003d04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff9b 	bl	8003c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e004      	b.n	8003d0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d0e:	f000 fe79 	bl	8004a04 <vPortExitCritical>

	return xReturn;
 8003d12:	69fb      	ldr	r3, [r7, #28]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000d98 	.word	0x20000d98
 8003d20:	20000dac 	.word	0x20000dac

08003d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <vTaskMissedYield+0x14>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20000da8 	.word	0x20000da8

08003d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d44:	f000 f852 	bl	8003dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <prvIdleTask+0x28>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d9f9      	bls.n	8003d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <prvIdleTask+0x2c>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d60:	e7f0      	b.n	8003d44 <prvIdleTask+0x8>
 8003d62:	bf00      	nop
 8003d64:	200008c4 	.word	0x200008c4
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	e00c      	b.n	8003d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <prvInitialiseTaskLists+0x60>)
 8003d84:	4413      	add	r3, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fcca 	bl	8002720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b37      	cmp	r3, #55	; 0x37
 8003d96:	d9ef      	bls.n	8003d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d98:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <prvInitialiseTaskLists+0x64>)
 8003d9a:	f7fe fcc1 	bl	8002720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d9e:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <prvInitialiseTaskLists+0x68>)
 8003da0:	f7fe fcbe 	bl	8002720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <prvInitialiseTaskLists+0x6c>)
 8003da6:	f7fe fcbb 	bl	8002720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003daa:	480c      	ldr	r0, [pc, #48]	; (8003ddc <prvInitialiseTaskLists+0x70>)
 8003dac:	f7fe fcb8 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <prvInitialiseTaskLists+0x74>)
 8003db2:	f7fe fcb5 	bl	8002720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <prvInitialiseTaskLists+0x78>)
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <prvInitialiseTaskLists+0x64>)
 8003dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvInitialiseTaskLists+0x7c>)
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <prvInitialiseTaskLists+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200008c4 	.word	0x200008c4
 8003dd0:	20000d24 	.word	0x20000d24
 8003dd4:	20000d38 	.word	0x20000d38
 8003dd8:	20000d54 	.word	0x20000d54
 8003ddc:	20000d68 	.word	0x20000d68
 8003de0:	20000d80 	.word	0x20000d80
 8003de4:	20000d4c 	.word	0x20000d4c
 8003de8:	20000d50 	.word	0x20000d50

08003dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df2:	e019      	b.n	8003e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003df4:	f000 fdd6 	bl	80049a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <prvCheckTasksWaitingTermination+0x50>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fd15 	bl	8002834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e1e:	f000 fdf1 	bl	8004a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f810 	bl	8003e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <prvCheckTasksWaitingTermination+0x58>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e1      	bne.n	8003df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000d68 	.word	0x20000d68
 8003e40:	20000d94 	.word	0x20000d94
 8003e44:	20000d7c 	.word	0x20000d7c

08003e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3354      	adds	r3, #84	; 0x54
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 f8b9 	bl	8004fcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 ff89 	bl	8004d80 <vPortFree>
				vPortFree( pxTCB );
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 ff86 	bl	8004d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e74:	e018      	b.n	8003ea8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d103      	bne.n	8003e88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 ff7d 	bl	8004d80 <vPortFree>
	}
 8003e86:	e00f      	b.n	8003ea8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d00a      	beq.n	8003ea8 <prvDeleteTCB+0x60>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60fb      	str	r3, [r7, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <prvDeleteTCB+0x5e>
	}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <prvResetNextTaskUnblockTime+0x38>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvResetNextTaskUnblockTime+0x3c>)
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ec8:	e008      	b.n	8003edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvResetNextTaskUnblockTime+0x38>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <prvResetNextTaskUnblockTime+0x3c>)
 8003eda:	6013      	str	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000d4c 	.word	0x20000d4c
 8003eec:	20000db4 	.word	0x20000db4

08003ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <xTaskGetSchedulerState+0x34>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003efe:	2301      	movs	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e008      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <xTaskGetSchedulerState+0x38>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	e001      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f16:	687b      	ldr	r3, [r7, #4]
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20000da0 	.word	0x20000da0
 8003f28:	20000dbc 	.word	0x20000dbc

08003f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d056      	beq.n	8003ff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f42:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <xTaskPriorityDisinherit+0xd0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d00a      	beq.n	8003f62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	60fb      	str	r3, [r7, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	e7fe      	b.n	8003f7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d02c      	beq.n	8003ff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d128      	bne.n	8003ff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fc46 	bl	8002834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <xTaskPriorityDisinherit+0xd4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d903      	bls.n	8003fd0 <xTaskPriorityDisinherit+0xa4>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <xTaskPriorityDisinherit+0xd4>)
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <xTaskPriorityDisinherit+0xd8>)
 8003fde:	441a      	add	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fe fbc7 	bl	800277a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ff0:	697b      	ldr	r3, [r7, #20]
	}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200008c0 	.word	0x200008c0
 8004000:	20000d9c 	.word	0x20000d9c
 8004004:	200008c4 	.word	0x200008c4

08004008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004012:	4b21      	ldr	r3, [pc, #132]	; (8004098 <prvAddCurrentTaskToDelayedList+0x90>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <prvAddCurrentTaskToDelayedList+0x94>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3304      	adds	r3, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fc08 	bl	8002834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d10a      	bne.n	8004042 <prvAddCurrentTaskToDelayedList+0x3a>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004032:	4b1a      	ldr	r3, [pc, #104]	; (800409c <prvAddCurrentTaskToDelayedList+0x94>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4819      	ldr	r0, [pc, #100]	; (80040a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800403c:	f7fe fb9d 	bl	800277a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004040:	e026      	b.n	8004090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <prvAddCurrentTaskToDelayedList+0x94>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	429a      	cmp	r2, r3
 8004058:	d209      	bcs.n	800406e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <prvAddCurrentTaskToDelayedList+0x94>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f7fe fbab 	bl	80027c2 <vListInsert>
}
 800406c:	e010      	b.n	8004090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <prvAddCurrentTaskToDelayedList+0x94>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f7fe fba1 	bl	80027c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	429a      	cmp	r2, r3
 8004088:	d202      	bcs.n	8004090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000d98 	.word	0x20000d98
 800409c:	200008c0 	.word	0x200008c0
 80040a0:	20000d80 	.word	0x20000d80
 80040a4:	20000d50 	.word	0x20000d50
 80040a8:	20000d4c 	.word	0x20000d4c
 80040ac:	20000db4 	.word	0x20000db4

080040b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040ba:	f000 fb07 	bl	80046cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <xTimerCreateTimerTask+0x80>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d021      	beq.n	800410a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	f107 0108 	add.w	r1, r7, #8
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fb07 	bl	80026ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	9202      	str	r2, [sp, #8]
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	2302      	movs	r3, #2
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	460a      	mov	r2, r1
 80040f0:	4910      	ldr	r1, [pc, #64]	; (8004134 <xTimerCreateTimerTask+0x84>)
 80040f2:	4811      	ldr	r0, [pc, #68]	; (8004138 <xTimerCreateTimerTask+0x88>)
 80040f4:	f7ff f8b4 	bl	8003260 <xTaskCreateStatic>
 80040f8:	4603      	mov	r3, r0
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <xTimerCreateTimerTask+0x8c>)
 80040fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <xTimerCreateTimerTask+0x8c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004106:	2301      	movs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004126:	697b      	ldr	r3, [r7, #20]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000df0 	.word	0x20000df0
 8004134:	080051dc 	.word	0x080051dc
 8004138:	08004275 	.word	0x08004275
 800413c:	20000df4 	.word	0x20000df4

08004140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	623b      	str	r3, [r7, #32]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <xTimerGenericCommand+0x98>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d02a      	beq.n	80041cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b05      	cmp	r3, #5
 8004186:	dc18      	bgt.n	80041ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004188:	f7ff feb2 	bl	8003ef0 <xTaskGetSchedulerState>
 800418c:	4603      	mov	r3, r0
 800418e:	2b02      	cmp	r3, #2
 8004190:	d109      	bne.n	80041a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <xTimerGenericCommand+0x98>)
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f107 0110 	add.w	r1, r7, #16
 800419a:	2300      	movs	r3, #0
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	f7fe fc77 	bl	8002a90 <xQueueGenericSend>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24
 80041a4:	e012      	b.n	80041cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <xTimerGenericCommand+0x98>)
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	f107 0110 	add.w	r1, r7, #16
 80041ae:	2300      	movs	r3, #0
 80041b0:	2200      	movs	r2, #0
 80041b2:	f7fe fc6d 	bl	8002a90 <xQueueGenericSend>
 80041b6:	6278      	str	r0, [r7, #36]	; 0x24
 80041b8:	e008      	b.n	80041cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <xTimerGenericCommand+0x98>)
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	f107 0110 	add.w	r1, r7, #16
 80041c2:	2300      	movs	r3, #0
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	f7fe fd61 	bl	8002c8c <xQueueGenericSendFromISR>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000df0 	.word	0x20000df0

080041dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <prvProcessExpiredTimer+0x94>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fb1d 	bl	8002834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d022      	beq.n	800424e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	18d1      	adds	r1, r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	6978      	ldr	r0, [r7, #20]
 8004216:	f000 f8d1 	bl	80043bc <prvInsertTimerInActiveList>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01f      	beq.n	8004260 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	2100      	movs	r1, #0
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7ff ff88 	bl	8004140 <xTimerGenericCommand>
 8004230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d113      	bne.n	8004260 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	60fb      	str	r3, [r7, #12]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	b2da      	uxtb	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	6978      	ldr	r0, [r7, #20]
 8004266:	4798      	blx	r3
}
 8004268:	bf00      	nop
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000de8 	.word	0x20000de8

08004274 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f857 	bl	8004334 <prvGetNextExpireTime>
 8004286:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4619      	mov	r1, r3
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f803 	bl	8004298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004292:	f000 f8d5 	bl	8004440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004296:	e7f1      	b.n	800427c <prvTimerTask+0x8>

08004298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042a2:	f7ff fa39 	bl	8003718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f866 	bl	800437c <prvSampleTimeNow>
 80042b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d130      	bne.n	800431a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <prvProcessTimerOrBlockTask+0x3c>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d806      	bhi.n	80042d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042c6:	f7ff fa35 	bl	8003734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff85 	bl	80041dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042d2:	e024      	b.n	800431e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <prvProcessTimerOrBlockTask+0x90>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <prvProcessTimerOrBlockTask+0x50>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <prvProcessTimerOrBlockTask+0x52>
 80042e8:	2300      	movs	r3, #0
 80042ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <prvProcessTimerOrBlockTask+0x94>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7fe ff7d 	bl	80031f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042fe:	f7ff fa19 	bl	8003734 <xTaskResumeAll>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <prvProcessTimerOrBlockTask+0x98>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
}
 8004318:	e001      	b.n	800431e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800431a:	f7ff fa0b 	bl	8003734 <xTaskResumeAll>
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000dec 	.word	0x20000dec
 800432c:	20000df0 	.word	0x20000df0
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <prvGetNextExpireTime+0x44>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <prvGetNextExpireTime+0x16>
 8004346:	2201      	movs	r2, #1
 8004348:	e000      	b.n	800434c <prvGetNextExpireTime+0x18>
 800434a:	2200      	movs	r2, #0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <prvGetNextExpireTime+0x44>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e001      	b.n	8004368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000de8 	.word	0x20000de8

0800437c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004384:	f7ff fa74 	bl	8003870 <xTaskGetTickCount>
 8004388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <prvSampleTimeNow+0x3c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d205      	bcs.n	80043a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004394:	f000 f936 	bl	8004604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e002      	b.n	80043a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043a6:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <prvSampleTimeNow+0x3c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000df8 	.word	0x20000df8

080043bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d812      	bhi.n	8004408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e01b      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <prvInsertTimerInActiveList+0x7c>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe f9de 	bl	80027c2 <vListInsert>
 8004406:	e012      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d206      	bcs.n	800441e <prvInsertTimerInActiveList+0x62>
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e007      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <prvInsertTimerInActiveList+0x80>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7fe f9ca 	bl	80027c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000dec 	.word	0x20000dec
 800443c:	20000de8 	.word	0x20000de8

08004440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004446:	e0ca      	b.n	80045de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da18      	bge.n	8004480 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	3304      	adds	r3, #4
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61fb      	str	r3, [r7, #28]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004476:	6850      	ldr	r0, [r2, #4]
 8004478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	4611      	mov	r1, r2
 800447e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f2c0 80ab 	blt.w	80045de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe f9cb 	bl	8002834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800449e:	463b      	mov	r3, r7
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff6b 	bl	800437c <prvSampleTimeNow>
 80044a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b09      	cmp	r3, #9
 80044ac:	f200 8096 	bhi.w	80045dc <prvProcessReceivedCommands+0x19c>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <prvProcessReceivedCommands+0x78>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080044e1 	.word	0x080044e1
 80044c4:	08004555 	.word	0x08004555
 80044c8:	08004569 	.word	0x08004569
 80044cc:	080045b3 	.word	0x080045b3
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044e1 	.word	0x080044e1
 80044d8:	08004555 	.word	0x08004555
 80044dc:	08004569 	.word	0x08004569
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	18d1      	adds	r1, r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004500:	f7ff ff5c 	bl	80043bc <prvInsertTimerInActiveList>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d069      	beq.n	80045de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d05e      	beq.n	80045de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	441a      	add	r2, r3
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	2100      	movs	r1, #0
 8004530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004532:	f7ff fe05 	bl	8004140 <xTimerGenericCommand>
 8004536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d14f      	bne.n	80045de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	61bb      	str	r3, [r7, #24]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004566:	e03a      	b.n	80045de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	617b      	str	r3, [r7, #20]
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	18d1      	adds	r1, r2, r3
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ac:	f7ff ff06 	bl	80043bc <prvInsertTimerInActiveList>
					break;
 80045b0:	e015      	b.n	80045de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80045c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045c2:	f000 fbdd 	bl	8004d80 <vPortFree>
 80045c6:	e00a      	b.n	80045de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80045da:	e000      	b.n	80045de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80045dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <prvProcessReceivedCommands+0x1c0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1d39      	adds	r1, r7, #4
 80045e4:	2200      	movs	r2, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fbec 	bl	8002dc4 <xQueueReceive>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f47f af2a 	bne.w	8004448 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3730      	adds	r7, #48	; 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000df0 	.word	0x20000df0

08004604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800460a:	e048      	b.n	800469e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004616:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3304      	adds	r3, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe f905 	bl	8002834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d02e      	beq.n	800469e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	429a      	cmp	r2, r3
 8004650:	d90e      	bls.n	8004670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe f8aa 	bl	80027c2 <vListInsert>
 800466e:	e016      	b.n	800469e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004670:	2300      	movs	r3, #0
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	2100      	movs	r1, #0
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fd60 	bl	8004140 <xTimerGenericCommand>
 8004680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	603b      	str	r3, [r7, #0]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1b1      	bne.n	800460c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <prvSwitchTimerLists+0xc4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <prvSwitchTimerLists+0xc0>)
 80046b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046b6:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <prvSwitchTimerLists+0xc4>)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000de8 	.word	0x20000de8
 80046c8:	20000dec 	.word	0x20000dec

080046cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046d2:	f000 f967 	bl	80049a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <prvCheckForValidListAndQueue+0x60>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d120      	bne.n	8004720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046de:	4814      	ldr	r0, [pc, #80]	; (8004730 <prvCheckForValidListAndQueue+0x64>)
 80046e0:	f7fe f81e 	bl	8002720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046e4:	4813      	ldr	r0, [pc, #76]	; (8004734 <prvCheckForValidListAndQueue+0x68>)
 80046e6:	f7fe f81b 	bl	8002720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <prvCheckForValidListAndQueue+0x6c>)
 80046ec:	4a10      	ldr	r2, [pc, #64]	; (8004730 <prvCheckForValidListAndQueue+0x64>)
 80046ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <prvCheckForValidListAndQueue+0x70>)
 80046f2:	4a10      	ldr	r2, [pc, #64]	; (8004734 <prvCheckForValidListAndQueue+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046f6:	2300      	movs	r3, #0
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <prvCheckForValidListAndQueue+0x74>)
 80046fc:	4a11      	ldr	r2, [pc, #68]	; (8004744 <prvCheckForValidListAndQueue+0x78>)
 80046fe:	2110      	movs	r1, #16
 8004700:	200a      	movs	r0, #10
 8004702:	f7fe f929 	bl	8002958 <xQueueGenericCreateStatic>
 8004706:	4603      	mov	r3, r0
 8004708:	4a08      	ldr	r2, [pc, #32]	; (800472c <prvCheckForValidListAndQueue+0x60>)
 800470a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <prvCheckForValidListAndQueue+0x60>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <prvCheckForValidListAndQueue+0x60>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <prvCheckForValidListAndQueue+0x7c>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fd42 	bl	80031a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004720:	f000 f970 	bl	8004a04 <vPortExitCritical>
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000df0 	.word	0x20000df0
 8004730:	20000dc0 	.word	0x20000dc0
 8004734:	20000dd4 	.word	0x20000dd4
 8004738:	20000de8 	.word	0x20000de8
 800473c:	20000dec 	.word	0x20000dec
 8004740:	20000e9c 	.word	0x20000e9c
 8004744:	20000dfc 	.word	0x20000dfc
 8004748:	080051e4 	.word	0x080051e4

0800474c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b04      	subs	r3, #4
 800475c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3b04      	subs	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b04      	subs	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800477c:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <pxPortInitialiseStack+0x64>)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3b14      	subs	r3, #20
 8004786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b04      	subs	r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f06f 0202 	mvn.w	r2, #2
 800479a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3b20      	subs	r3, #32
 80047a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047a2:	68fb      	ldr	r3, [r7, #12]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	080047b5 	.word	0x080047b5

080047b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <prvTaskExitError+0x54>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d00a      	beq.n	80047de <prvTaskExitError+0x2a>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60fb      	str	r3, [r7, #12]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <prvTaskExitError+0x28>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60bb      	str	r3, [r7, #8]
}
 80047f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047f2:	bf00      	nop
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0fc      	beq.n	80047f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	2000000c 	.word	0x2000000c
 800480c:	00000000 	.word	0x00000000

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	4770      	bx	lr
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst2>:
 8004830:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004838:	4808      	ldr	r0, [pc, #32]	; (800485c <prvPortStartFirstTask+0x24>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8814 	msr	CONTROL, r0
 800484a:	b662      	cpsie	i
 800484c:	b661      	cpsie	f
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	df00      	svc	0
 8004858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800485a:	bf00      	nop
 800485c:	e000ed08 	.word	0xe000ed08

08004860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004866:	4b46      	ldr	r3, [pc, #280]	; (8004980 <xPortStartScheduler+0x120>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a46      	ldr	r2, [pc, #280]	; (8004984 <xPortStartScheduler+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10a      	bne.n	8004886 <xPortStartScheduler+0x26>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	613b      	str	r3, [r7, #16]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <xPortStartScheduler+0x120>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <xPortStartScheduler+0x128>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10a      	bne.n	80048a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048a6:	4b39      	ldr	r3, [pc, #228]	; (800498c <xPortStartScheduler+0x12c>)
 80048a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <xPortStartScheduler+0x130>)
 80048cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <xPortStartScheduler+0x134>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048d4:	e009      	b.n	80048ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <xPortStartScheduler+0x134>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3b01      	subs	r3, #1
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <xPortStartScheduler+0x134>)
 80048de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d0ef      	beq.n	80048d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <xPortStartScheduler+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d00a      	beq.n	8004918 <xPortStartScheduler+0xb8>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60bb      	str	r3, [r7, #8]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <xPortStartScheduler+0x134>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <xPortStartScheduler+0x134>)
 8004920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <xPortStartScheduler+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <xPortStartScheduler+0x134>)
 800492c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <xPortStartScheduler+0x138>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a17      	ldr	r2, [pc, #92]	; (8004998 <xPortStartScheduler+0x138>)
 800493c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <xPortStartScheduler+0x138>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <xPortStartScheduler+0x138>)
 8004948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800494c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800494e:	f000 f8dd 	bl	8004b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <xPortStartScheduler+0x13c>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004958:	f000 f8fc 	bl	8004b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <xPortStartScheduler+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0f      	ldr	r2, [pc, #60]	; (80049a0 <xPortStartScheduler+0x140>)
 8004962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004968:	f7ff ff66 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800496c:	f7ff f84a 	bl	8003a04 <vTaskSwitchContext>
	prvTaskExitError();
 8004970:	f7ff ff20 	bl	80047b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00
 8004984:	410fc271 	.word	0x410fc271
 8004988:	410fc270 	.word	0x410fc270
 800498c:	e000e400 	.word	0xe000e400
 8004990:	20000eec 	.word	0x20000eec
 8004994:	20000ef0 	.word	0x20000ef0
 8004998:	e000ed20 	.word	0xe000ed20
 800499c:	2000000c 	.word	0x2000000c
 80049a0:	e000ef34 	.word	0xe000ef34

080049a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <vPortEnterCritical+0x58>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <vPortEnterCritical+0x58>)
 80049c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <vPortEnterCritical+0x58>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10f      	bne.n	80049f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortEnterCritical+0x5c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	603b      	str	r3, [r7, #0]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <vPortEnterCritical+0x4a>
	}
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	2000000c 	.word	0x2000000c
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <vPortExitCritical+0x50>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <vPortExitCritical+0x24>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <vPortExitCritical+0x50>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <vPortExitCritical+0x50>)
 8004a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <vPortExitCritical+0x50>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <vPortExitCritical+0x42>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f383 8811 	msr	BASEPRI, r3
}
 8004a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c
	...

08004a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a60:	f3ef 8009 	mrs	r0, PSP
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <pxCurrentTCBConst>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f01e 0f10 	tst.w	lr, #16
 8004a70:	bf08      	it	eq
 8004a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a84:	f380 8811 	msr	BASEPRI, r0
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f7fe ffb8 	bl	8003a04 <vTaskSwitchContext>
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f380 8811 	msr	BASEPRI, r0
 8004a9c:	bc09      	pop	{r0, r3}
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa6:	f01e 0f10 	tst.w	lr, #16
 8004aaa:	bf08      	it	eq
 8004aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ab0:	f380 8809 	msr	PSP, r0
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w

08004ac0 <pxCurrentTCBConst>:
 8004ac0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ae2:	f7fe fed5 	bl	8003890 <xTaskIncrementTick>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <xPortSysTickHandler+0x40>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <vPortSetupTimerInterrupt+0x38>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <vPortSetupTimerInterrupt+0x3c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <vPortSetupTimerInterrupt+0x40>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <vPortSetupTimerInterrupt+0x44>)
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e010 	.word	0xe000e010
 8004b44:	e000e018 	.word	0xe000e018
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	10624dd3 	.word	0x10624dd3
 8004b50:	e000e014 	.word	0xe000e014

08004b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b64 <vPortEnableVFP+0x10>
 8004b58:	6801      	ldr	r1, [r0, #0]
 8004b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b5e:	6001      	str	r1, [r0, #0]
 8004b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b62:	bf00      	nop
 8004b64:	e000ed88 	.word	0xe000ed88

08004b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b6e:	f3ef 8305 	mrs	r3, IPSR
 8004b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	d914      	bls.n	8004ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <vPortValidateInterruptPriority+0x70>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b84:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <vPortValidateInterruptPriority+0x74>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	7afa      	ldrb	r2, [r7, #11]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d20a      	bcs.n	8004ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <vPortValidateInterruptPriority+0x78>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bac:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <vPortValidateInterruptPriority+0x7c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d90a      	bls.n	8004bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	603b      	str	r3, [r7, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <vPortValidateInterruptPriority+0x60>
	}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e3f0 	.word	0xe000e3f0
 8004bdc:	20000eec 	.word	0x20000eec
 8004be0:	e000ed0c 	.word	0xe000ed0c
 8004be4:	20000ef0 	.word	0x20000ef0

08004be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bf4:	f7fe fd90 	bl	8003718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bf8:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <pvPortMalloc+0x180>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c00:	f000 f920 	bl	8004e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <pvPortMalloc+0x184>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 8093 	bne.w	8004d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01d      	beq.n	8004c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c18:	2208      	movs	r2, #8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d014      	beq.n	8004c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	3308      	adds	r3, #8
 8004c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <pvPortMalloc+0x6c>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	617b      	str	r3, [r7, #20]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d06e      	beq.n	8004d38 <pvPortMalloc+0x150>
 8004c5a:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <pvPortMalloc+0x188>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d869      	bhi.n	8004d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <pvPortMalloc+0x18c>)
 8004c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c68:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <pvPortMalloc+0x18c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c6e:	e004      	b.n	8004c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <pvPortMalloc+0xa4>
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f1      	bne.n	8004c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <pvPortMalloc+0x180>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d050      	beq.n	8004d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d91f      	bls.n	8004cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	613b      	str	r3, [r7, #16]
}
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cf2:	69b8      	ldr	r0, [r7, #24]
 8004cf4:	f000 f908 	bl	8004f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <pvPortMalloc+0x188>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <pvPortMalloc+0x188>)
 8004d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <pvPortMalloc+0x188>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <pvPortMalloc+0x190>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d203      	bcs.n	8004d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <pvPortMalloc+0x188>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <pvPortMalloc+0x190>)
 8004d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <pvPortMalloc+0x184>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <pvPortMalloc+0x194>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <pvPortMalloc+0x194>)
 8004d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d38:	f7fe fcfc 	bl	8003734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <pvPortMalloc+0x174>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60fb      	str	r3, [r7, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <pvPortMalloc+0x172>
	return pvReturn;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20004afc 	.word	0x20004afc
 8004d6c:	20004b10 	.word	0x20004b10
 8004d70:	20004b00 	.word	0x20004b00
 8004d74:	20004af4 	.word	0x20004af4
 8004d78:	20004b04 	.word	0x20004b04
 8004d7c:	20004b08 	.word	0x20004b08

08004d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d04d      	beq.n	8004e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d92:	2308      	movs	r3, #8
 8004d94:	425b      	negs	r3, r3
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <vPortFree+0xb8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <vPortFree+0x44>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <vPortFree+0x62>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60bb      	str	r3, [r7, #8]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	4b14      	ldr	r3, [pc, #80]	; (8004e38 <vPortFree+0xb8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01e      	beq.n	8004e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11a      	bne.n	8004e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <vPortFree+0xb8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	401a      	ands	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e08:	f7fe fc86 	bl	8003718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <vPortFree+0xbc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <vPortFree+0xbc>)
 8004e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e1a:	6938      	ldr	r0, [r7, #16]
 8004e1c:	f000 f874 	bl	8004f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <vPortFree+0xc0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	4a06      	ldr	r2, [pc, #24]	; (8004e40 <vPortFree+0xc0>)
 8004e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e2a:	f7fe fc83 	bl	8003734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20004b10 	.word	0x20004b10
 8004e3c:	20004b00 	.word	0x20004b00
 8004e40:	20004b0c 	.word	0x20004b0c

08004e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <prvHeapInit+0xac>)
 8004e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3307      	adds	r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <prvHeapInit+0xac>)
 8004e74:	4413      	add	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <prvHeapInit+0xb0>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <prvHeapInit+0xb0>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e90:	2208      	movs	r2, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0307 	bic.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <prvHeapInit+0xb4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <prvHeapInit+0xb4>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <prvHeapInit+0xb8>)
 8004ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <prvHeapInit+0xbc>)
 8004eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <prvHeapInit+0xc0>)
 8004ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	20000ef4 	.word	0x20000ef4
 8004ef4:	20004af4 	.word	0x20004af4
 8004ef8:	20004afc 	.word	0x20004afc
 8004efc:	20004b04 	.word	0x20004b04
 8004f00:	20004b00 	.word	0x20004b00
 8004f04:	20004b10 	.word	0x20004b10

08004f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <prvInsertBlockIntoFreeList+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e002      	b.n	8004f1c <prvInsertBlockIntoFreeList+0x14>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d8f7      	bhi.n	8004f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d108      	bne.n	8004f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d118      	bne.n	8004f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d00d      	beq.n	8004f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	441a      	add	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e008      	b.n	8004f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e003      	b.n	8004f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d002      	beq.n	8004fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20004af4 	.word	0x20004af4
 8004fb8:	20004afc 	.word	0x20004afc

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <_reclaim_reent>:
 8004fcc:	4b29      	ldr	r3, [pc, #164]	; (8005074 <_reclaim_reent+0xa8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4283      	cmp	r3, r0
 8004fd2:	b570      	push	{r4, r5, r6, lr}
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	d04b      	beq.n	8005070 <_reclaim_reent+0xa4>
 8004fd8:	69c3      	ldr	r3, [r0, #28]
 8004fda:	b143      	cbz	r3, 8004fee <_reclaim_reent+0x22>
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d144      	bne.n	800506c <_reclaim_reent+0xa0>
 8004fe2:	69e3      	ldr	r3, [r4, #28]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	b111      	cbz	r1, 8004fee <_reclaim_reent+0x22>
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 f879 	bl	80050e0 <_free_r>
 8004fee:	6961      	ldr	r1, [r4, #20]
 8004ff0:	b111      	cbz	r1, 8004ff8 <_reclaim_reent+0x2c>
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f000 f874 	bl	80050e0 <_free_r>
 8004ff8:	69e1      	ldr	r1, [r4, #28]
 8004ffa:	b111      	cbz	r1, 8005002 <_reclaim_reent+0x36>
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 f86f 	bl	80050e0 <_free_r>
 8005002:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005004:	b111      	cbz	r1, 800500c <_reclaim_reent+0x40>
 8005006:	4620      	mov	r0, r4
 8005008:	f000 f86a 	bl	80050e0 <_free_r>
 800500c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500e:	b111      	cbz	r1, 8005016 <_reclaim_reent+0x4a>
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f865 	bl	80050e0 <_free_r>
 8005016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005018:	b111      	cbz	r1, 8005020 <_reclaim_reent+0x54>
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f860 	bl	80050e0 <_free_r>
 8005020:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005022:	b111      	cbz	r1, 800502a <_reclaim_reent+0x5e>
 8005024:	4620      	mov	r0, r4
 8005026:	f000 f85b 	bl	80050e0 <_free_r>
 800502a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800502c:	b111      	cbz	r1, 8005034 <_reclaim_reent+0x68>
 800502e:	4620      	mov	r0, r4
 8005030:	f000 f856 	bl	80050e0 <_free_r>
 8005034:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005036:	b111      	cbz	r1, 800503e <_reclaim_reent+0x72>
 8005038:	4620      	mov	r0, r4
 800503a:	f000 f851 	bl	80050e0 <_free_r>
 800503e:	6a23      	ldr	r3, [r4, #32]
 8005040:	b1b3      	cbz	r3, 8005070 <_reclaim_reent+0xa4>
 8005042:	4620      	mov	r0, r4
 8005044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005048:	4718      	bx	r3
 800504a:	5949      	ldr	r1, [r1, r5]
 800504c:	b941      	cbnz	r1, 8005060 <_reclaim_reent+0x94>
 800504e:	3504      	adds	r5, #4
 8005050:	69e3      	ldr	r3, [r4, #28]
 8005052:	2d80      	cmp	r5, #128	; 0x80
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	d1f8      	bne.n	800504a <_reclaim_reent+0x7e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 f841 	bl	80050e0 <_free_r>
 800505e:	e7c0      	b.n	8004fe2 <_reclaim_reent+0x16>
 8005060:	680e      	ldr	r6, [r1, #0]
 8005062:	4620      	mov	r0, r4
 8005064:	f000 f83c 	bl	80050e0 <_free_r>
 8005068:	4631      	mov	r1, r6
 800506a:	e7ef      	b.n	800504c <_reclaim_reent+0x80>
 800506c:	2500      	movs	r5, #0
 800506e:	e7ef      	b.n	8005050 <_reclaim_reent+0x84>
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	bf00      	nop
 8005074:	2000005c 	.word	0x2000005c

08005078 <__libc_init_array>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4d0d      	ldr	r5, [pc, #52]	; (80050b0 <__libc_init_array+0x38>)
 800507c:	4c0d      	ldr	r4, [pc, #52]	; (80050b4 <__libc_init_array+0x3c>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	2600      	movs	r6, #0
 8005084:	42a6      	cmp	r6, r4
 8005086:	d109      	bne.n	800509c <__libc_init_array+0x24>
 8005088:	4d0b      	ldr	r5, [pc, #44]	; (80050b8 <__libc_init_array+0x40>)
 800508a:	4c0c      	ldr	r4, [pc, #48]	; (80050bc <__libc_init_array+0x44>)
 800508c:	f000 f880 	bl	8005190 <_init>
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	2600      	movs	r6, #0
 8005096:	42a6      	cmp	r6, r4
 8005098:	d105      	bne.n	80050a6 <__libc_init_array+0x2e>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a0:	4798      	blx	r3
 80050a2:	3601      	adds	r6, #1
 80050a4:	e7ee      	b.n	8005084 <__libc_init_array+0xc>
 80050a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050aa:	4798      	blx	r3
 80050ac:	3601      	adds	r6, #1
 80050ae:	e7f2      	b.n	8005096 <__libc_init_array+0x1e>
 80050b0:	0800520c 	.word	0x0800520c
 80050b4:	0800520c 	.word	0x0800520c
 80050b8:	0800520c 	.word	0x0800520c
 80050bc:	08005210 	.word	0x08005210

080050c0 <__retarget_lock_acquire_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <__retarget_lock_release_recursive>:
 80050c2:	4770      	bx	lr

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050da:	4291      	cmp	r1, r2
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <_free_r>:
 80050e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050e2:	2900      	cmp	r1, #0
 80050e4:	d044      	beq.n	8005170 <_free_r+0x90>
 80050e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ea:	9001      	str	r0, [sp, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f1a1 0404 	sub.w	r4, r1, #4
 80050f2:	bfb8      	it	lt
 80050f4:	18e4      	addlt	r4, r4, r3
 80050f6:	f000 f83f 	bl	8005178 <__malloc_lock>
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <_free_r+0x94>)
 80050fc:	9801      	ldr	r0, [sp, #4]
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	b933      	cbnz	r3, 8005110 <_free_r+0x30>
 8005102:	6063      	str	r3, [r4, #4]
 8005104:	6014      	str	r4, [r2, #0]
 8005106:	b003      	add	sp, #12
 8005108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800510c:	f000 b83a 	b.w	8005184 <__malloc_unlock>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d908      	bls.n	8005126 <_free_r+0x46>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf01      	itttt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	1949      	addeq	r1, r1, r5
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	e7ed      	b.n	8005102 <_free_r+0x22>
 8005126:	461a      	mov	r2, r3
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b10b      	cbz	r3, 8005130 <_free_r+0x50>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x46>
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	1855      	adds	r5, r2, r1
 8005134:	42a5      	cmp	r5, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x70>
 8005138:	6824      	ldr	r4, [r4, #0]
 800513a:	4421      	add	r1, r4
 800513c:	1854      	adds	r4, r2, r1
 800513e:	42a3      	cmp	r3, r4
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	d1e0      	bne.n	8005106 <_free_r+0x26>
 8005144:	681c      	ldr	r4, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	6053      	str	r3, [r2, #4]
 800514a:	440c      	add	r4, r1
 800514c:	6014      	str	r4, [r2, #0]
 800514e:	e7da      	b.n	8005106 <_free_r+0x26>
 8005150:	d902      	bls.n	8005158 <_free_r+0x78>
 8005152:	230c      	movs	r3, #12
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	e7d6      	b.n	8005106 <_free_r+0x26>
 8005158:	6825      	ldr	r5, [r4, #0]
 800515a:	1961      	adds	r1, r4, r5
 800515c:	428b      	cmp	r3, r1
 800515e:	bf04      	itt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	6063      	str	r3, [r4, #4]
 8005166:	bf04      	itt	eq
 8005168:	1949      	addeq	r1, r1, r5
 800516a:	6021      	streq	r1, [r4, #0]
 800516c:	6054      	str	r4, [r2, #4]
 800516e:	e7ca      	b.n	8005106 <_free_r+0x26>
 8005170:	b003      	add	sp, #12
 8005172:	bd30      	pop	{r4, r5, pc}
 8005174:	20004c50 	.word	0x20004c50

08005178 <__malloc_lock>:
 8005178:	4801      	ldr	r0, [pc, #4]	; (8005180 <__malloc_lock+0x8>)
 800517a:	f7ff bfa1 	b.w	80050c0 <__retarget_lock_acquire_recursive>
 800517e:	bf00      	nop
 8005180:	20004c4c 	.word	0x20004c4c

08005184 <__malloc_unlock>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__malloc_unlock+0x8>)
 8005186:	f7ff bf9c 	b.w	80050c2 <__retarget_lock_release_recursive>
 800518a:	bf00      	nop
 800518c:	20004c4c 	.word	0x20004c4c

08005190 <_init>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr

0800519c <_fini>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr
