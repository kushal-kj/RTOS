
18-Workin_with_QueueSets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800617c  0800617c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006184  08006184  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800618c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  2000006c  080061f8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  080061f8  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cb4  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000343d  00000000  00000000  00037d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0003b1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001000  00000000  00000000  0003c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044cf  00000000  00000000  0003d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016778  00000000  00000000  00041b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099652  00000000  00000000  000582b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e74  00000000  00000000  000f190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000f7780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800607c 	.word	0x0800607c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800607c 	.word	0x0800607c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
//Declare a QueueSet Handle
static QueueSetHandle_t xQueueSet=NULL;


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  HAL_Init();	/* Reset of all peripherals, Initializes the Flash interface and the SysTick. */
 8000582:	f000 fb93 	bl	8000cac <HAL_Init>
  SystemClock_Config(); 	/* Configure the system clock */
 8000586:	f000 f8d5 	bl	8000734 <SystemClock_Config>
  MX_GPIO_Init();	/* Initialize all configured peripherals */
 800058a:	f000 f969 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f93d 	bl	800080c <MX_USART2_UART_Init>

  printf("System initializing....\n\r");
 8000592:	4825      	ldr	r0, [pc, #148]	; (8000628 <main+0xac>)
 8000594:	f004 fe9a 	bl	80052cc <iprintf>

  //Create 2 queues, each send Character pointer
  xQueue1=xQueueCreate(1,sizeof(char *));
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	2001      	movs	r0, #1
 800059e:	f002 fa11 	bl	80029c4 <xQueueGenericCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <main+0xb0>)
 80005a6:	6013      	str	r3, [r2, #0]
  xQueue2=xQueueCreate(1,sizeof(char *));
 80005a8:	2200      	movs	r2, #0
 80005aa:	2104      	movs	r1, #4
 80005ac:	2001      	movs	r0, #1
 80005ae:	f002 fa09 	bl	80029c4 <xQueueGenericCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <main+0xb4>)
 80005b6:	6013      	str	r3, [r2, #0]

  //Create a QueueSet to hold 2 queues which holds 1 element each
  xQueueSet=xQueueCreateSet(1*2);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f002 fe8b 	bl	80032d4 <xQueueCreateSet>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <main+0xb8>)
 80005c2:	6013      	str	r3, [r2, #0]

  //Add 2 queues to the queue set
  xQueueAddToSet(xQueue1, xQueueSet);
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0xb0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <main+0xb8>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe8f 	bl	80032f2 <xQueueAddToSet>
  xQueueAddToSet(xQueue2, xQueueSet);
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0xb4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a16      	ldr	r2, [pc, #88]	; (8000634 <main+0xb8>)
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe87 	bl	80032f2 <xQueueAddToSet>

  //Create 2 sender tasks with same priority of 1
  xTaskCreate(vSenderTask1,
 80005e4:	2300      	movs	r3, #0
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2300      	movs	r3, #0
 80005ee:	2264      	movs	r2, #100	; 0x64
 80005f0:	4911      	ldr	r1, [pc, #68]	; (8000638 <main+0xbc>)
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0xc0>)
 80005f4:	f002 ff67 	bl	80034c6 <xTaskCreate>
		  100,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(vSenderTask2,
 80005f8:	2300      	movs	r3, #0
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2264      	movs	r2, #100	; 0x64
 8000604:	490e      	ldr	r1, [pc, #56]	; (8000640 <main+0xc4>)
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0xc8>)
 8000608:	f002 ff5d 	bl	80034c6 <xTaskCreate>
		  NULL,
		  1,
		  NULL);

  //Create a receiver task with higher priority of 2
  xTaskCreate(vReceiverTask,
 800060c:	2300      	movs	r3, #0
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2302      	movs	r3, #2
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2264      	movs	r2, #100	; 0x64
 8000618:	490b      	ldr	r1, [pc, #44]	; (8000648 <main+0xcc>)
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <main+0xd0>)
 800061c:	f002 ff53 	bl	80034c6 <xTaskCreate>
		  100,
		  NULL,
		  2,
		  NULL);

  vTaskStartScheduler();
 8000620:	f003 f8e0 	bl	80037e4 <vTaskStartScheduler>

  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0xa8>
 8000626:	bf00      	nop
 8000628:	08006094 	.word	0x08006094
 800062c:	200000cc 	.word	0x200000cc
 8000630:	200000d0 	.word	0x200000d0
 8000634:	200000d4 	.word	0x200000d4
 8000638:	080060b0 	.word	0x080060b0
 800063c:	08000651 	.word	0x08000651
 8000640:	080060bc 	.word	0x080060bc
 8000644:	08000681 	.word	0x08000681
 8000648:	080060c8 	.word	0x080060c8
 800064c:	080006b1 	.word	0x080006b1

08000650 <vSenderTask1>:
  }

}

void vSenderTask1(void *pvParameters)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime=pdMS_TO_TICKS(100);
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	60fb      	str	r3, [r7, #12]

	char *msg="Message from vSenderTask1 \n\r";
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <vSenderTask1+0x28>)
 800065e:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Block for 10ms
		vTaskDelay(xBlockTime);
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f003 f88b 	bl	800377c <vTaskDelay>

		//Send the string "msg" to xQueue1
		xQueueSend(xQueue1,&msg,0);
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <vSenderTask1+0x2c>)
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	f107 0108 	add.w	r1, r7, #8
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	f002 fa07 	bl	8002a84 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 8000676:	e7f3      	b.n	8000660 <vSenderTask1+0x10>
 8000678:	080060d4 	.word	0x080060d4
 800067c:	200000cc 	.word	0x200000cc

08000680 <vSenderTask2>:
	}

}

void vSenderTask2(void *pvParameters)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	const TickType_t xBlockTime=pdMS_TO_TICKS(200);
 8000688:	23c8      	movs	r3, #200	; 0xc8
 800068a:	60fb      	str	r3, [r7, #12]

	char *msg="Message from vSenderTask2 \n\r";
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <vSenderTask2+0x28>)
 800068e:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Block for 10ms
		vTaskDelay(xBlockTime);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f003 f873 	bl	800377c <vTaskDelay>

		//Send the string "msg" to xQueue2
		xQueueSend(xQueue2,&msg,0);
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <vSenderTask2+0x2c>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 0108 	add.w	r1, r7, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	2200      	movs	r2, #0
 80006a2:	f002 f9ef 	bl	8002a84 <xQueueGenericSend>
		vTaskDelay(xBlockTime);
 80006a6:	e7f3      	b.n	8000690 <vSenderTask2+0x10>
 80006a8:	080060f4 	.word	0x080060f4
 80006ac:	200000d0 	.word	0x200000d0

080006b0 <vReceiverTask>:
	}

}

void vReceiverTask(void *pvParameters)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//portMAX_DELAY is used to block for infinite amount of time

		xQueueThatContainsData=(QueueHandle_t)xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <vReceiverTask+0x34>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f04f 31ff 	mov.w	r1, #4294967295
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fe37 	bl	8003334 <xQueueSelectFromSet>
 80006c6:	60f8      	str	r0, [r7, #12]

		//Receive data from queue whose handle was returned
		xQueueReceive(xQueueThatContainsData,&pcReceivedString , 0);
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	4619      	mov	r1, r3
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f002 fba3 	bl	8002e1c <xQueueReceive>

		printf("%s",pcReceivedString);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4619      	mov	r1, r3
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <vReceiverTask+0x38>)
 80006dc:	f004 fdf6 	bl	80052cc <iprintf>
		xQueueThatContainsData=(QueueHandle_t)xQueueSelectFromSet(xQueueSet, portMAX_DELAY);
 80006e0:	e7ea      	b.n	80006b8 <vReceiverTask+0x8>
 80006e2:	bf00      	nop
 80006e4:	200000d4 	.word	0x200000d4
 80006e8:	08006114 	.word	0x08006114

080006ec <uart2_write>:

}


int uart2_write(int ch)						//For transmitting the data through USART
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 80006f4:	bf00      	nop
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <uart2_write+0x2c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0f9      	beq.n	80006f6 <uart2_write+0xa>
	USART2->DR=(ch&0xFF);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <uart2_write+0x2c>)
 8000706:	b2db      	uxtb	r3, r3
 8000708:	6053      	str	r3, [r2, #4]
	return ch;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40004400 	.word	0x40004400

0800071c <__io_putchar>:


int __io_putchar(int ch)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	uart2_write(ch);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffe1 	bl	80006ec <uart2_write>
	return ch;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fe17 	bl	8005376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a28      	ldr	r2, [pc, #160]	; (8000804 <SystemClock_Config+0xd0>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <SystemClock_Config+0xd4>)
 8000782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a8:	2310      	movs	r3, #16
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fd1c 	bl	80011fc <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 f883 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 ff7e 	bl	80016ec <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f6:	f000 f86d 	bl	80008d4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f001 fc24 	bl	8002090 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f841 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000088 	.word	0x20000088
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_GPIO_Init+0x4c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_GPIO_Init+0x4c>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_GPIO_Init+0x4c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_GPIO_Init+0x4c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <MX_GPIO_Init+0x4c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_GPIO_Init+0x4c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 fa15 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010000 	.word	0x40010000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fabb 	bl	8000ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	; (80009bc <HAL_UART_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12b      	bne.n	80009b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_UART_MspInit+0x88>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000992:	230c      	movs	r3, #12
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_UART_MspInit+0x8c>)
 80009ae:	f000 faa1 	bl	8000ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000

080009c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <HAL_InitTick+0xd0>)
 80009de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e0:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <HAL_InitTick+0xd0>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6453      	str	r3, [r2, #68]	; 0x44
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <HAL_InitTick+0xd0>)
 80009ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 020c 	add.w	r2, r7, #12
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f894 	bl	8001b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a04:	f001 f87e 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8000a08:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <HAL_InitTick+0xd4>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0c9b      	lsrs	r3, r3, #18
 8000a14:	3b01      	subs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <HAL_InitTick+0xdc>)
 8000a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a26:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a40:	f001 f8a6 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a52:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <HAL_InitTick+0xd8>)
 8000a54:	f001 f8f6 	bl	8001c44 <HAL_TIM_Base_Start_IT>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d111      	bne.n	8000a8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a66:	2019      	movs	r0, #25
 8000a68:	f000 fa36 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d808      	bhi.n	8000a84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a72:	2200      	movs	r2, #0
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	2019      	movs	r0, #25
 8000a78:	f000 fa12 	bl	8000ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_InitTick+0xe0>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e002      	b.n	8000a8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	200000d8 	.word	0x200000d8
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	20000004 	.word	0x20000004

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ade:	f001 f913 	bl	8001d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d8 	.word	0x200000d8

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdeb 	bl	800071c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 fc62 	bl	80054c0 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20018000 	.word	0x20018000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000120 	.word	0x20000120
 8000c30:	20004c60 	.word	0x20004c60

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f004 fc21 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc77 	bl	800057c <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c9c:	0800618c 	.word	0x0800618c
  ldr r2, =_sbss
 8000ca0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ca4:	20004c5c 	.word	0x20004c5c

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8d8 	bl	8000e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff fe74 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fdfe 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000124 	.word	0x20000124

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000124 	.word	0x20000124

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4c 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff61 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb1 	bl	8000e24 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff80 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff54 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e159      	b.n	80011c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 8148 	bne.w	80011be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	69b9      	ldr	r1, [r7, #24]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80a2 	beq.w	80011be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b57      	ldr	r3, [pc, #348]	; (80011dc <HAL_GPIO_Init+0x2e8>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a56      	ldr	r2, [pc, #344]	; (80011dc <HAL_GPIO_Init+0x2e8>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b54      	ldr	r3, [pc, #336]	; (80011dc <HAL_GPIO_Init+0x2e8>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a52      	ldr	r2, [pc, #328]	; (80011e0 <HAL_GPIO_Init+0x2ec>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a49      	ldr	r2, [pc, #292]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x202>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <HAL_GPIO_Init+0x2f4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x1fe>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a47      	ldr	r2, [pc, #284]	; (80011ec <HAL_GPIO_Init+0x2f8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x1fa>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <HAL_GPIO_Init+0x2fc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x1f6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a45      	ldr	r2, [pc, #276]	; (80011f4 <HAL_GPIO_Init+0x300>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x1f2>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x204>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x204>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x204>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x204>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x204>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4935      	ldr	r1, [pc, #212]	; (80011e0 <HAL_GPIO_Init+0x2ec>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_GPIO_Init+0x304>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118e:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f aea2 	bls.w	8000f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e267      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d075      	beq.n	8001306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121a:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b04      	cmp	r3, #4
 8001224:	d00c      	beq.n	8001240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	2b08      	cmp	r3, #8
 8001230:	d112      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001232:	4b82      	ldr	r3, [pc, #520]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800123e:	d10b      	bne.n	8001258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d05b      	beq.n	8001304 <HAL_RCC_OscConfig+0x108>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d157      	bne.n	8001304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e242      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d106      	bne.n	8001270 <HAL_RCC_OscConfig+0x74>
 8001262:	4b76      	ldr	r3, [pc, #472]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a75      	ldr	r2, [pc, #468]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b70      	ldr	r3, [pc, #448]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6f      	ldr	r2, [pc, #444]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b6d      	ldr	r3, [pc, #436]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6c      	ldr	r2, [pc, #432]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xb0>
 8001294:	4b69      	ldr	r3, [pc, #420]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a68      	ldr	r2, [pc, #416]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fd30 	bl	8000d18 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fd2c 	bl	8000d18 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e207      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b5b      	ldr	r3, [pc, #364]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xc0>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fd1c 	bl	8000d18 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fd18 	bl	8000d18 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1f3      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	4b51      	ldr	r3, [pc, #324]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0xe8>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d063      	beq.n	80013da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001312:	4b4a      	ldr	r3, [pc, #296]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b47      	ldr	r3, [pc, #284]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d11c      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132a:	4b44      	ldr	r3, [pc, #272]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	4b41      	ldr	r3, [pc, #260]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e1c7      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4937      	ldr	r1, [pc, #220]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	e03a      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_RCC_OscConfig+0x244>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fcd1 	bl	8000d18 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fccd 	bl	8000d18 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1a8      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4925      	ldr	r1, [pc, #148]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_OscConfig+0x244>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcb0 	bl	8000d18 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fcac 	bl	8000d18 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e187      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d036      	beq.n	8001454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d016      	beq.n	800141c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_RCC_OscConfig+0x248>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc90 	bl	8000d18 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc8c 	bl	8000d18 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e167      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_OscConfig+0x240>)
 8001410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x200>
 800141a:	e01b      	b.n	8001454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_RCC_OscConfig+0x248>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc79 	bl	8000d18 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	e00e      	b.n	8001448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fc75 	bl	8000d18 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d907      	bls.n	8001448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e150      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
 800143c:	40023800 	.word	0x40023800
 8001440:	42470000 	.word	0x42470000
 8001444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ea      	bne.n	800142a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8097 	beq.w	8001590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b7d      	ldr	r3, [pc, #500]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a7c      	ldr	r2, [pc, #496]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b7a      	ldr	r3, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149e:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x474>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a73      	ldr	r2, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x474>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fc35 	bl	8000d18 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7ff fc31 	bl	8000d18 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e10c      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_RCC_OscConfig+0x474>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2ea>
 80014d8:	4b64      	ldr	r3, [pc, #400]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a63      	ldr	r2, [pc, #396]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x324>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x30c>
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a5e      	ldr	r2, [pc, #376]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a5b      	ldr	r2, [pc, #364]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x324>
 8001508:	4b58      	ldr	r3, [pc, #352]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a57      	ldr	r2, [pc, #348]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b55      	ldr	r3, [pc, #340]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a54      	ldr	r2, [pc, #336]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fbf6 	bl	8000d18 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fbf2 	bl	8000d18 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0cb      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0ee      	beq.n	8001530 <HAL_RCC_OscConfig+0x334>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fbe0 	bl	8000d18 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155a:	e00a      	b.n	8001572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155c:	f7ff fbdc 	bl	8000d18 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0b5      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ee      	bne.n	800155c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a38      	ldr	r2, [pc, #224]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a1 	beq.w	80016dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <HAL_RCC_OscConfig+0x470>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d05c      	beq.n	8001660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d141      	bne.n	8001632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_OscConfig+0x478>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbb0 	bl	8000d18 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fbac 	bl	8000d18 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e087      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x470>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	3b01      	subs	r3, #1
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	491b      	ldr	r1, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x478>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fb85 	bl	8000d18 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fb81 	bl	8000d18 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e05c      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x416>
 8001630:	e054      	b.n	80016dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_RCC_OscConfig+0x478>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fb6e 	bl	8000d18 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fb6a 	bl	8000d18 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e045      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RCC_OscConfig+0x470>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x444>
 800165e:	e03d      	b.n	80016dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e038      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000
 8001674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x4ec>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d028      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d121      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d11a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016a8:	4013      	ands	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d111      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0cc      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d90c      	bls.n	8001728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b8      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	494d      	ldr	r1, [pc, #308]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d044      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e07f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e067      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4934      	ldr	r1, [pc, #208]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa9c 	bl	8000d18 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa98 	bl	8000d18 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04f      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d20c      	bcs.n	8001834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e032      	b.n	800189a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4916      	ldr	r1, [pc, #88]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001872:	f000 f821 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	490a      	ldr	r1, [pc, #40]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f898 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08006130 	.word	0x08006130
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018bc:	b094      	sub	sp, #80	; 0x50
 80018be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
 80018c4:	2300      	movs	r3, #0
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c8:	2300      	movs	r3, #0
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d0:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d00d      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x40>
 80018dc:	2b08      	cmp	r3, #8
 80018de:	f200 80e1 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x34>
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ea:	e0db      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_GetSysClockFreq+0x204>)
 80018ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018f0:	e0db      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80018f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018f6:	e0d8      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001902:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	2200      	movs	r2, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
 8001918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
 8001926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800192a:	4622      	mov	r2, r4
 800192c:	462b      	mov	r3, r5
 800192e:	f04f 0000 	mov.w	r0, #0
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	0159      	lsls	r1, r3, #5
 8001938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800193c:	0150      	lsls	r0, r2, #5
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4621      	mov	r1, r4
 8001944:	1a51      	subs	r1, r2, r1
 8001946:	6139      	str	r1, [r7, #16]
 8001948:	4629      	mov	r1, r5
 800194a:	eb63 0301 	sbc.w	r3, r3, r1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800195c:	4659      	mov	r1, fp
 800195e:	018b      	lsls	r3, r1, #6
 8001960:	4651      	mov	r1, sl
 8001962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001966:	4651      	mov	r1, sl
 8001968:	018a      	lsls	r2, r1, #6
 800196a:	4651      	mov	r1, sl
 800196c:	ebb2 0801 	subs.w	r8, r2, r1
 8001970:	4659      	mov	r1, fp
 8001972:	eb63 0901 	sbc.w	r9, r3, r1
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198a:	4690      	mov	r8, r2
 800198c:	4699      	mov	r9, r3
 800198e:	4623      	mov	r3, r4
 8001990:	eb18 0303 	adds.w	r3, r8, r3
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	462b      	mov	r3, r5
 8001998:	eb49 0303 	adc.w	r3, r9, r3
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019aa:	4629      	mov	r1, r5
 80019ac:	024b      	lsls	r3, r1, #9
 80019ae:	4621      	mov	r1, r4
 80019b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019b4:	4621      	mov	r1, r4
 80019b6:	024a      	lsls	r2, r1, #9
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019be:	2200      	movs	r2, #0
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019c8:	f7fe fc5a 	bl	8000280 <__aeabi_uldivmod>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4613      	mov	r3, r2
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019d4:	e058      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	4611      	mov	r1, r2
 80019e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019e6:	623b      	str	r3, [r7, #32]
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019f0:	4642      	mov	r2, r8
 80019f2:	464b      	mov	r3, r9
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	0159      	lsls	r1, r3, #5
 80019fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a02:	0150      	lsls	r0, r2, #5
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4641      	mov	r1, r8
 8001a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a0e:	4649      	mov	r1, r9
 8001a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a28:	ebb2 040a 	subs.w	r4, r2, sl
 8001a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	00eb      	lsls	r3, r5, #3
 8001a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a3e:	00e2      	lsls	r2, r4, #3
 8001a40:	4614      	mov	r4, r2
 8001a42:	461d      	mov	r5, r3
 8001a44:	4643      	mov	r3, r8
 8001a46:	18e3      	adds	r3, r4, r3
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	eb45 0303 	adc.w	r3, r5, r3
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5e:	4629      	mov	r1, r5
 8001a60:	028b      	lsls	r3, r1, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a68:	4621      	mov	r1, r4
 8001a6a:	028a      	lsls	r2, r1, #10
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a72:	2200      	movs	r2, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	61fa      	str	r2, [r7, #28]
 8001a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a7c:	f7fe fc00 	bl	8000280 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3750      	adds	r7, #80	; 0x50
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08006140 	.word	0x08006140

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b08:	f7ff ffdc 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08006140 	.word	0x08006140

08001b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCC_GetClockConfig+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0207 	and.w	r2, r3, #7
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f839 	bl	8001c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 f9ca 	bl	8001f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e044      	b.n	8001ce6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d018      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d013      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_TIM_Base_Start_IT+0xb8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d010      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd2:	e007      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	40000c00 	.word	0x40000c00
 8001d04:	40014000 	.word	0x40014000

08001d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d122      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d11b      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0202 	mvn.w	r2, #2
 8001d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8ee 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8e0 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8f1 	bl	8001f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0204 	mvn.w	r2, #4
 8001d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8c4 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8b6 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8c7 	bl	8001f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0208 	mvn.w	r2, #8
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2204      	movs	r2, #4
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f89a 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f88c 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f89d 	bl	8001f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0210 	mvn.w	r2, #16
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2208      	movs	r2, #8
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f870 	bl	8001f2c <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f862 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f873 	bl	8001f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0201 	mvn.w	r2, #1
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fd12 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e96:	2b80      	cmp	r3, #128	; 0x80
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d107      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8e2 	bl	800207c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b40      	cmp	r3, #64	; 0x40
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f838 	bl	8001f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0220 	mvn.w	r2, #32
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8ac 	bl	8002068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	; (800204c <TIM_Base_SetConfig+0xe4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00f      	beq.n	8001fa0 <TIM_Base_SetConfig+0x38>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d00b      	beq.n	8001fa0 <TIM_Base_SetConfig+0x38>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a31      	ldr	r2, [pc, #196]	; (8002050 <TIM_Base_SetConfig+0xe8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <TIM_Base_SetConfig+0x38>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a30      	ldr	r2, [pc, #192]	; (8002054 <TIM_Base_SetConfig+0xec>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_Base_SetConfig+0x38>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a2f      	ldr	r2, [pc, #188]	; (8002058 <TIM_Base_SetConfig+0xf0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	; (800204c <TIM_Base_SetConfig+0xe4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01b      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d017      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a22      	ldr	r2, [pc, #136]	; (8002050 <TIM_Base_SetConfig+0xe8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a21      	ldr	r2, [pc, #132]	; (8002054 <TIM_Base_SetConfig+0xec>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00f      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <TIM_Base_SetConfig+0xf0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <TIM_Base_SetConfig+0xf4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <TIM_Base_SetConfig+0xf8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <TIM_Base_SetConfig+0xfc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d108      	bne.n	8002004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <TIM_Base_SetConfig+0xe4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d103      	bne.n	8002038 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	615a      	str	r2, [r3, #20]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40010000 	.word	0x40010000
 8002050:	40000400 	.word	0x40000400
 8002054:	40000800 	.word	0x40000800
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800

08002068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e03f      	b.n	8002122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fc3e 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f829 	bl	800212c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800212c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002130:	b0c0      	sub	sp, #256	; 0x100
 8002132:	af00      	add	r7, sp, #0
 8002134:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	ea40 0301 	orr.w	r3, r0, r1
 8002154:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	431a      	orrs	r2, r3
 8002164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	431a      	orrs	r2, r3
 800216c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002184:	f021 010c 	bic.w	r1, r1, #12
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a6:	6999      	ldr	r1, [r3, #24]
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	ea40 0301 	orr.w	r3, r0, r1
 80021b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b8f      	ldr	r3, [pc, #572]	; (80023f8 <UART_SetConfig+0x2cc>)
 80021bc:	429a      	cmp	r2, r3
 80021be:	d005      	beq.n	80021cc <UART_SetConfig+0xa0>
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b8d      	ldr	r3, [pc, #564]	; (80023fc <UART_SetConfig+0x2d0>)
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d104      	bne.n	80021d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021cc:	f7ff fc9a 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 80021d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021d4:	e003      	b.n	80021de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021d6:	f7ff fc81 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 80021da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e8:	f040 810c 	bne.w	8002404 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f0:	2200      	movs	r2, #0
 80021f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021fe:	4622      	mov	r2, r4
 8002200:	462b      	mov	r3, r5
 8002202:	1891      	adds	r1, r2, r2
 8002204:	65b9      	str	r1, [r7, #88]	; 0x58
 8002206:	415b      	adcs	r3, r3
 8002208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800220a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800220e:	4621      	mov	r1, r4
 8002210:	eb12 0801 	adds.w	r8, r2, r1
 8002214:	4629      	mov	r1, r5
 8002216:	eb43 0901 	adc.w	r9, r3, r1
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800222e:	4690      	mov	r8, r2
 8002230:	4699      	mov	r9, r3
 8002232:	4623      	mov	r3, r4
 8002234:	eb18 0303 	adds.w	r3, r8, r3
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800223c:	462b      	mov	r3, r5
 800223e:	eb49 0303 	adc.w	r3, r9, r3
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002252:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002256:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800225a:	460b      	mov	r3, r1
 800225c:	18db      	adds	r3, r3, r3
 800225e:	653b      	str	r3, [r7, #80]	; 0x50
 8002260:	4613      	mov	r3, r2
 8002262:	eb42 0303 	adc.w	r3, r2, r3
 8002266:	657b      	str	r3, [r7, #84]	; 0x54
 8002268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800226c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002270:	f7fe f806 	bl	8000280 <__aeabi_uldivmod>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4b61      	ldr	r3, [pc, #388]	; (8002400 <UART_SetConfig+0x2d4>)
 800227a:	fba3 2302 	umull	r2, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	011c      	lsls	r4, r3, #4
 8002282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002286:	2200      	movs	r2, #0
 8002288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800228c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002290:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002294:	4642      	mov	r2, r8
 8002296:	464b      	mov	r3, r9
 8002298:	1891      	adds	r1, r2, r2
 800229a:	64b9      	str	r1, [r7, #72]	; 0x48
 800229c:	415b      	adcs	r3, r3
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022a4:	4641      	mov	r1, r8
 80022a6:	eb12 0a01 	adds.w	sl, r2, r1
 80022aa:	4649      	mov	r1, r9
 80022ac:	eb43 0b01 	adc.w	fp, r3, r1
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c4:	4692      	mov	sl, r2
 80022c6:	469b      	mov	fp, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	eb1a 0303 	adds.w	r3, sl, r3
 80022ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022d2:	464b      	mov	r3, r9
 80022d4:	eb4b 0303 	adc.w	r3, fp, r3
 80022d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022f0:	460b      	mov	r3, r1
 80022f2:	18db      	adds	r3, r3, r3
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
 80022f6:	4613      	mov	r3, r2
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
 80022fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002302:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002306:	f7fd ffbb 	bl	8000280 <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4611      	mov	r1, r2
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <UART_SetConfig+0x2d4>)
 8002312:	fba3 2301 	umull	r2, r3, r3, r1
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2264      	movs	r2, #100	; 0x64
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	1acb      	subs	r3, r1, r3
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <UART_SetConfig+0x2d4>)
 8002328:	fba3 2302 	umull	r2, r3, r3, r2
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002334:	441c      	add	r4, r3
 8002336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233a:	2200      	movs	r2, #0
 800233c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002340:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002344:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002348:	4642      	mov	r2, r8
 800234a:	464b      	mov	r3, r9
 800234c:	1891      	adds	r1, r2, r2
 800234e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002350:	415b      	adcs	r3, r3
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002358:	4641      	mov	r1, r8
 800235a:	1851      	adds	r1, r2, r1
 800235c:	6339      	str	r1, [r7, #48]	; 0x30
 800235e:	4649      	mov	r1, r9
 8002360:	414b      	adcs	r3, r1
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002370:	4659      	mov	r1, fp
 8002372:	00cb      	lsls	r3, r1, #3
 8002374:	4651      	mov	r1, sl
 8002376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800237a:	4651      	mov	r1, sl
 800237c:	00ca      	lsls	r2, r1, #3
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	4603      	mov	r3, r0
 8002384:	4642      	mov	r2, r8
 8002386:	189b      	adds	r3, r3, r2
 8002388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800238c:	464b      	mov	r3, r9
 800238e:	460a      	mov	r2, r1
 8002390:	eb42 0303 	adc.w	r3, r2, r3
 8002394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023ac:	460b      	mov	r3, r1
 80023ae:	18db      	adds	r3, r3, r3
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b2:	4613      	mov	r3, r2
 80023b4:	eb42 0303 	adc.w	r3, r2, r3
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023c2:	f7fd ff5d 	bl	8000280 <__aeabi_uldivmod>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <UART_SetConfig+0x2d4>)
 80023cc:	fba3 1302 	umull	r1, r3, r3, r2
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	2164      	movs	r1, #100	; 0x64
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	3332      	adds	r3, #50	; 0x32
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <UART_SetConfig+0x2d4>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4422      	add	r2, r4
 80023f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023f4:	e106      	b.n	8002604 <UART_SetConfig+0x4d8>
 80023f6:	bf00      	nop
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002408:	2200      	movs	r2, #0
 800240a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800240e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002412:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002416:	4642      	mov	r2, r8
 8002418:	464b      	mov	r3, r9
 800241a:	1891      	adds	r1, r2, r2
 800241c:	6239      	str	r1, [r7, #32]
 800241e:	415b      	adcs	r3, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002426:	4641      	mov	r1, r8
 8002428:	1854      	adds	r4, r2, r1
 800242a:	4649      	mov	r1, r9
 800242c:	eb43 0501 	adc.w	r5, r3, r1
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	00eb      	lsls	r3, r5, #3
 800243a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800243e:	00e2      	lsls	r2, r4, #3
 8002440:	4614      	mov	r4, r2
 8002442:	461d      	mov	r5, r3
 8002444:	4643      	mov	r3, r8
 8002446:	18e3      	adds	r3, r4, r3
 8002448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800244c:	464b      	mov	r3, r9
 800244e:	eb45 0303 	adc.w	r3, r5, r3
 8002452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002472:	4629      	mov	r1, r5
 8002474:	008b      	lsls	r3, r1, #2
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800247c:	4621      	mov	r1, r4
 800247e:	008a      	lsls	r2, r1, #2
 8002480:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002484:	f7fd fefc 	bl	8000280 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <UART_SetConfig+0x4e4>)
 800248e:	fba3 2302 	umull	r2, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	011c      	lsls	r4, r3, #4
 8002496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024a8:	4642      	mov	r2, r8
 80024aa:	464b      	mov	r3, r9
 80024ac:	1891      	adds	r1, r2, r2
 80024ae:	61b9      	str	r1, [r7, #24]
 80024b0:	415b      	adcs	r3, r3
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024b8:	4641      	mov	r1, r8
 80024ba:	1851      	adds	r1, r2, r1
 80024bc:	6139      	str	r1, [r7, #16]
 80024be:	4649      	mov	r1, r9
 80024c0:	414b      	adcs	r3, r1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d0:	4659      	mov	r1, fp
 80024d2:	00cb      	lsls	r3, r1, #3
 80024d4:	4651      	mov	r1, sl
 80024d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024da:	4651      	mov	r1, sl
 80024dc:	00ca      	lsls	r2, r1, #3
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	4642      	mov	r2, r8
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024ec:	464b      	mov	r3, r9
 80024ee:	460a      	mov	r2, r1
 80024f0:	eb42 0303 	adc.w	r3, r2, r3
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	67bb      	str	r3, [r7, #120]	; 0x78
 8002502:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002510:	4649      	mov	r1, r9
 8002512:	008b      	lsls	r3, r1, #2
 8002514:	4641      	mov	r1, r8
 8002516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800251a:	4641      	mov	r1, r8
 800251c:	008a      	lsls	r2, r1, #2
 800251e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002522:	f7fd fead 	bl	8000280 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4611      	mov	r1, r2
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <UART_SetConfig+0x4e4>)
 800252e:	fba3 2301 	umull	r2, r3, r3, r1
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2264      	movs	r2, #100	; 0x64
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	3332      	adds	r3, #50	; 0x32
 8002540:	4a33      	ldr	r2, [pc, #204]	; (8002610 <UART_SetConfig+0x4e4>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254c:	441c      	add	r4, r3
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
 8002556:	677a      	str	r2, [r7, #116]	; 0x74
 8002558:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	415b      	adcs	r3, r3
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	4641      	mov	r1, r8
 800256e:	1851      	adds	r1, r2, r1
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	4649      	mov	r1, r9
 8002574:	414b      	adcs	r3, r1
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002584:	4659      	mov	r1, fp
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	4651      	mov	r1, sl
 800258a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258e:	4651      	mov	r1, sl
 8002590:	00ca      	lsls	r2, r1, #3
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	4603      	mov	r3, r0
 8002598:	4642      	mov	r2, r8
 800259a:	189b      	adds	r3, r3, r2
 800259c:	66bb      	str	r3, [r7, #104]	; 0x68
 800259e:	464b      	mov	r3, r9
 80025a0:	460a      	mov	r2, r1
 80025a2:	eb42 0303 	adc.w	r3, r2, r3
 80025a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	663b      	str	r3, [r7, #96]	; 0x60
 80025b2:	667a      	str	r2, [r7, #100]	; 0x64
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025c0:	4649      	mov	r1, r9
 80025c2:	008b      	lsls	r3, r1, #2
 80025c4:	4641      	mov	r1, r8
 80025c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ca:	4641      	mov	r1, r8
 80025cc:	008a      	lsls	r2, r1, #2
 80025ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025d2:	f7fd fe55 	bl	8000280 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <UART_SetConfig+0x4e4>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <UART_SetConfig+0x4e4>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	f003 020f 	and.w	r2, r3, #15
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4422      	add	r2, r4
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800260a:	46bd      	mov	sp, r7
 800260c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002610:	51eb851f 	.word	0x51eb851f

08002614 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Handler+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800261c:	f001 fd3e 	bl	800409c <xTaskGetSchedulerState>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002626:	f002 fb27 	bl	8004c78 <xPortSysTickHandler>
  }
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <vApplicationGetIdleTaskMemory+0x2c>)
 8002644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <vApplicationGetIdleTaskMemory+0x30>)
 800264a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000128 	.word	0x20000128
 8002664:	200001d0 	.word	0x200001d0

08002668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <vApplicationGetTimerTaskMemory+0x2c>)
 8002678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <vApplicationGetTimerTaskMemory+0x30>)
 800267e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	200003d0 	.word	0x200003d0
 8002698:	20000478 	.word	0x20000478

0800269c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0208 	add.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0208 	add.w	r2, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0208 	add.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d103      	bne.n	800275e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e00c      	b.n	8002778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3308      	adds	r3, #8
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e002      	b.n	800276c <vListInsert+0x2e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d2f6      	bcs.n	8002766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6852      	ldr	r2, [r2, #4]
 80027d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800282e:	f002 f991 	bl	8004b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	3b01      	subs	r3, #1
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	441a      	add	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d114      	bne.n	80028ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01a      	beq.n	80028c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3310      	adds	r3, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fa41 	bl	8003d18 <xTaskRemoveFromEventList>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <xQueueGenericReset+0xcc>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	e009      	b.n	80028c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3310      	adds	r3, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fef2 	bl	800269c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3324      	adds	r3, #36	; 0x24
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff feed 	bl	800269c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028c2:	f002 f977 	bl	8004bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	; 0x38
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <xQueueGenericCreateStatic+0x52>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <xQueueGenericCreateStatic+0x56>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <xQueueGenericCreateStatic+0x58>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	623b      	str	r3, [r7, #32]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <xQueueGenericCreateStatic+0x7e>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueGenericCreateStatic+0x82>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <xQueueGenericCreateStatic+0x84>
 8002956:	2300      	movs	r3, #0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10a      	bne.n	8002972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	61fb      	str	r3, [r7, #28]
}
 800296e:	bf00      	nop
 8002970:	e7fe      	b.n	8002970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002972:	2354      	movs	r3, #84	; 0x54
 8002974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b54      	cmp	r3, #84	; 0x54
 800297a:	d00a      	beq.n	8002992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	61bb      	str	r3, [r7, #24]
}
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f83f 	bl	8002a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029bc:	4618      	mov	r0, r3
 80029be:	3730      	adds	r7, #48	; 0x30
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	613b      	str	r3, [r7, #16]
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3354      	adds	r3, #84	; 0x54
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 f9cb 	bl	8004d98 <pvPortMalloc>
 8002a02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d011      	beq.n	8002a2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3354      	adds	r3, #84	; 0x54
 8002a12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a1c:	79fa      	ldrb	r2, [r7, #7]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f805 	bl	8002a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e002      	b.n	8002a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a66:	2101      	movs	r1, #1
 8002a68:	69b8      	ldr	r0, [r7, #24]
 8002a6a:	f7ff fecb 	bl	8002804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08e      	sub	sp, #56	; 0x38
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a92:	2300      	movs	r3, #0
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <xQueueGenericSend+0x32>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ab2:	bf00      	nop
 8002ab4:	e7fe      	b.n	8002ab4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <xQueueGenericSend+0x40>
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <xQueueGenericSend+0x44>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <xQueueGenericSend+0x46>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <xQueueGenericSend+0x60>
	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	623b      	str	r3, [r7, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x6e>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0x72>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0x74>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueGenericSend+0x8e>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	61fb      	str	r3, [r7, #28]
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b12:	f001 fac3 	bl	800409c <xTaskGetSchedulerState>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <xQueueGenericSend+0x9e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xQueueGenericSend+0xa2>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueGenericSend+0xa4>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	61bb      	str	r3, [r7, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b42:	f002 f807 	bl	8004b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <xQueueGenericSend+0xd4>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d145      	bne.n	8002be4 <xQueueGenericSend+0x160>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b64:	f000 fa3a 	bl	8002fdc <prvCopyDataToQueue>
 8002b68:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d014      	beq.n	8002b9c <xQueueGenericSend+0x118>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d102      	bne.n	8002b7e <xQueueGenericSend+0xfa>
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d12e      	bne.n	8002bdc <xQueueGenericSend+0x158>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002b7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b80:	f000 fbeb 	bl	800335a <prvNotifyQueueSetContainer>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d028      	beq.n	8002bdc <xQueueGenericSend+0x158>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <xQueueGenericSend+0x230>)
 8002b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	e01f      	b.n	8002bdc <xQueueGenericSend+0x158>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <xQueueGenericSend+0x142>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 f8b5 	bl	8003d18 <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <xQueueGenericSend+0x158>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <xQueueGenericSend+0x230>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	e00a      	b.n	8002bdc <xQueueGenericSend+0x158>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <xQueueGenericSend+0x158>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <xQueueGenericSend+0x230>)
 8002bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bdc:	f001 ffea 	bl	8004bb4 <vPortExitCritical>
				return pdPASS;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e063      	b.n	8002cac <xQueueGenericSend+0x228>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <xQueueGenericSend+0x16e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bea:	f001 ffe3 	bl	8004bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e05c      	b.n	8002cac <xQueueGenericSend+0x228>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <xQueueGenericSend+0x182>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f8ef 	bl	8003de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c06:	f001 ffd5 	bl	8004bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c0a:	f000 fe5b 	bl	80038c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c0e:	f001 ffa1 	bl	8004b54 <vPortEnterCritical>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d103      	bne.n	8002c28 <xQueueGenericSend+0x1a4>
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d103      	bne.n	8002c3e <xQueueGenericSend+0x1ba>
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3e:	f001 ffb9 	bl	8004bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c42:	1d3a      	adds	r2, r7, #4
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f8de 	bl	8003e0c <xTaskCheckForTimeOut>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d124      	bne.n	8002ca0 <xQueueGenericSend+0x21c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c58:	f000 fac5 	bl	80031e6 <prvIsQueueFull>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d018      	beq.n	8002c94 <xQueueGenericSend+0x210>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	3310      	adds	r3, #16
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f804 	bl	8003c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c72:	f000 fa43 	bl	80030fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c76:	f000 fe33 	bl	80038e0 <xTaskResumeAll>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f47f af60 	bne.w	8002b42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <xQueueGenericSend+0x230>)
 8002c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	e756      	b.n	8002b42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c96:	f000 fa31 	bl	80030fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c9a:	f000 fe21 	bl	80038e0 <xTaskResumeAll>
 8002c9e:	e750      	b.n	8002b42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca2:	f000 fa2b 	bl	80030fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ca6:	f000 fe1b 	bl	80038e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002caa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b090      	sub	sp, #64	; 0x40
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <xQueueGenericSendFromISR+0x3c>
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xQueueGenericSendFromISR+0x40>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <xQueueGenericSendFromISR+0x42>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSendFromISR+0x6a>
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <xQueueGenericSendFromISR+0x6e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericSendFromISR+0x70>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	623b      	str	r3, [r7, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f001 ffe9 	bl	8004d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d46:	f3ef 8211 	mrs	r2, BASEPRI
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	61fa      	str	r2, [r7, #28]
 8002d5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <xQueueGenericSendFromISR+0xbc>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d146      	bne.n	8002e02 <xQueueGenericSendFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d8a:	f000 f927 	bl	8002fdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d129      	bne.n	8002dec <xQueueGenericSendFromISR+0x134>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <xQueueGenericSendFromISR+0x10e>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d102      	bne.n	8002dac <xQueueGenericSendFromISR+0xf4>
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d127      	bne.n	8002dfc <xQueueGenericSendFromISR+0x144>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dae:	f000 fad4 	bl	800335a <prvNotifyQueueSetContainer>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d021      	beq.n	8002dfc <xQueueGenericSendFromISR+0x144>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01e      	beq.n	8002dfc <xQueueGenericSendFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e01a      	b.n	8002dfc <xQueueGenericSendFromISR+0x144>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <xQueueGenericSendFromISR+0x144>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	3324      	adds	r3, #36	; 0x24
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 ffa0 	bl	8003d18 <xTaskRemoveFromEventList>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <xQueueGenericSendFromISR+0x144>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <xQueueGenericSendFromISR+0x144>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e007      	b.n	8002dfc <xQueueGenericSendFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	b25a      	sxtb	r2, r3
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e00:	e001      	b.n	8002e06 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3740      	adds	r7, #64	; 0x40
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xQueueReceive+0x30>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	623b      	str	r3, [r7, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <xQueueReceive+0x3e>
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <xQueueReceive+0x42>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <xQueueReceive+0x44>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xQueueReceive+0x5e>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	61fb      	str	r3, [r7, #28]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e7a:	f001 f90f 	bl	800409c <xTaskGetSchedulerState>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <xQueueReceive+0x6e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <xQueueReceive+0x72>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueReceive+0x74>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueReceive+0x8e>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61bb      	str	r3, [r7, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eaa:	f001 fe53 	bl	8004b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01f      	beq.n	8002efa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ebe:	f000 f8f7 	bl	80030b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00f      	beq.n	8002ef2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 ff1e 	bl	8003d18 <xTaskRemoveFromEventList>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <xQueueReceive+0x1bc>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ef2:	f001 fe5f 	bl	8004bb4 <vPortExitCritical>
				return pdPASS;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e069      	b.n	8002fce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f00:	f001 fe58 	bl	8004bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e062      	b.n	8002fce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ff64 	bl	8003de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f1c:	f001 fe4a 	bl	8004bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f20:	f000 fcd0 	bl	80038c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f24:	f001 fe16 	bl	8004b54 <vPortEnterCritical>
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d103      	bne.n	8002f3e <xQueueReceive+0x122>
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d103      	bne.n	8002f54 <xQueueReceive+0x138>
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f54:	f001 fe2e 	bl	8004bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f58:	1d3a      	adds	r2, r7, #4
 8002f5a:	f107 0310 	add.w	r3, r7, #16
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 ff53 	bl	8003e0c <xTaskCheckForTimeOut>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d123      	bne.n	8002fb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6e:	f000 f924 	bl	80031ba <prvIsQueueEmpty>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fe79 	bl	8003c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f88:	f000 f8b8 	bl	80030fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f8c:	f000 fca8 	bl	80038e0 <xTaskResumeAll>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d189      	bne.n	8002eaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <xQueueReceive+0x1bc>)
 8002f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	e780      	b.n	8002eaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002faa:	f000 f8a7 	bl	80030fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fae:	f000 fc97 	bl	80038e0 <xTaskResumeAll>
 8002fb2:	e77a      	b.n	8002eaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb6:	f000 f8a1 	bl	80030fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fba:	f000 fc91 	bl	80038e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc0:	f000 f8fb 	bl	80031ba <prvIsQueueEmpty>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f43f af6f 	beq.w	8002eaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3730      	adds	r7, #48	; 0x30
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d14d      	bne.n	800309e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f866 	bl	80040d8 <xTaskPriorityDisinherit>
 800300c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e043      	b.n	800309e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6858      	ldr	r0, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	461a      	mov	r2, r3
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	f002 fa76 	bl	8005518 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d32b      	bcc.n	800309e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e026      	b.n	800309e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68d8      	ldr	r0, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	461a      	mov	r2, r3
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	f002 fa5c 	bl	8005518 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	425b      	negs	r3, r3
 800306a:	441a      	add	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	425b      	negs	r3, r3
 8003086:	441a      	add	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d105      	bne.n	800309e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3b01      	subs	r3, #1
 800309c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030a6:	697b      	ldr	r3, [r7, #20]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d018      	beq.n	80030f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d303      	bcc.n	80030e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68d9      	ldr	r1, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	461a      	mov	r2, r3
 80030ee:	6838      	ldr	r0, [r7, #0]
 80030f0:	f002 fa12 	bl	8005518 <memcpy>
	}
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003104:	f001 fd26 	bl	8004b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003110:	e01e      	b.n	8003150 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f91d 	bl	800335a <prvNotifyQueueSetContainer>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8003126:	f000 fed3 	bl	8003ed0 <vTaskMissedYield>
 800312a:	e00d      	b.n	8003148 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fded 	bl	8003d18 <xTaskRemoveFromEventList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8003144:	f000 fec4 	bl	8003ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3b01      	subs	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	dcdc      	bgt.n	8003112 <prvUnlockQueue+0x16>
 8003158:	e000      	b.n	800315c <prvUnlockQueue+0x60>
						break;
 800315a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003164:	f001 fd26 	bl	8004bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003168:	f001 fcf4 	bl	8004b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003172:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003174:	e011      	b.n	800319a <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fdc8 	bl	8003d18 <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 800318e:	f000 fe9f 	bl	8003ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	3b01      	subs	r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800319a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dce9      	bgt.n	8003176 <prvUnlockQueue+0x7a>
 80031a2:	e000      	b.n	80031a6 <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 80031a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	22ff      	movs	r2, #255	; 0xff
 80031aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031ae:	f001 fd01 	bl	8004bb4 <vPortExitCritical>
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031c2:	f001 fcc7 	bl	8004b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e001      	b.n	80031d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031d8:	f001 fcec 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031ee:	f001 fcb1 	bl	8004b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d102      	bne.n	8003204 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031fe:	2301      	movs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e001      	b.n	8003208 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003208:	f001 fcd4 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 800320c:	68fb      	ldr	r3, [r7, #12]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e014      	b.n	8003252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003228:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <vQueueAddToRegistry+0x50>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003234:	490c      	ldr	r1, [pc, #48]	; (8003268 <vQueueAddToRegistry+0x50>)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <vQueueAddToRegistry+0x50>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800324a:	e006      	b.n	800325a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b07      	cmp	r3, #7
 8003256:	d9e7      	bls.n	8003228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000878 	.word	0x20000878

0800326c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800327c:	f001 fc6a 	bl	8004b54 <vPortEnterCritical>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003286:	b25b      	sxtb	r3, r3
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d103      	bne.n	8003296 <vQueueWaitForMessageRestricted+0x2a>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800329c:	b25b      	sxtb	r3, r3
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d103      	bne.n	80032ac <vQueueWaitForMessageRestricted+0x40>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ac:	f001 fc82 	bl	8004bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3324      	adds	r3, #36	; 0x24
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fcfd 	bl	8003cc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff18 	bl	80030fc <prvUnlockQueue>
	}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80032dc:	2200      	movs	r2, #0
 80032de:	2104      	movs	r1, #4
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fb6f 	bl	80029c4 <xQueueGenericCreate>
 80032e6:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 80032e8:	68fb      	ldr	r3, [r7, #12]
	}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80032fc:	f001 fc2a 	bl	8004b54 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e00b      	b.n	8003326 <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e004      	b.n	8003326 <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	649a      	str	r2, [r3, #72]	; 0x48
				xReturn = pdPASS;
 8003322:	2301      	movs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8003326:	f001 fc45 	bl	8004bb4 <vPortExitCritical>

		return xReturn;
 800332a:	68fb      	ldr	r3, [r7, #12]
	}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 8003342:	f107 030c 	add.w	r3, r7, #12
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fd66 	bl	8002e1c <xQueueReceive>
		return xReturn;
 8003350:	68fb      	ldr	r3, [r7, #12]
	}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 800335a:	b580      	push	{r7, lr}
 800335c:	b088      	sub	sp, #32
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <prvNotifyQueueSetContainer+0x2e>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	613b      	str	r3, [r7, #16]
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	429a      	cmp	r2, r3
 8003392:	d30a      	bcc.n	80033aa <prvNotifyQueueSetContainer+0x50>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60fb      	str	r3, [r7, #12]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <prvNotifyQueueSetContainer+0x4e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d225      	bcs.n	8003402 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033bc:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	4619      	mov	r1, r3
 80033c4:	69b8      	ldr	r0, [r7, #24]
 80033c6:	f7ff fe09 	bl	8002fdc <prvCopyDataToQueue>
 80033ca:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 80033cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d10e      	bne.n	80033f4 <prvNotifyQueueSetContainer+0x9a>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d011      	beq.n	8003402 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3324      	adds	r3, #36	; 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fc98 	bl	8003d18 <xTaskRemoveFromEventList>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 80033ee:	2301      	movs	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e006      	b.n	8003402 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	b25a      	sxtb	r2, r3
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003402:	69fb      	ldr	r3, [r7, #28]
	}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af04      	add	r7, sp, #16
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	623b      	str	r3, [r7, #32]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xTaskCreateStatic+0x46>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	61fb      	str	r3, [r7, #28]
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003452:	23a8      	movs	r3, #168	; 0xa8
 8003454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2ba8      	cmp	r3, #168	; 0xa8
 800345a:	d00a      	beq.n	8003472 <xTaskCreateStatic+0x66>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	61bb      	str	r3, [r7, #24]
}
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003472:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01e      	beq.n	80034b8 <xTaskCreateStatic+0xac>
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003488:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2202      	movs	r2, #2
 800348e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003492:	2300      	movs	r3, #0
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f850 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034b2:	f000 f8f3 	bl	800369c <prvAddNewTaskToReadyList>
 80034b6:	e001      	b.n	80034bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034bc:	697b      	ldr	r3, [r7, #20]
	}
 80034be:	4618      	mov	r0, r3
 80034c0:	3728      	adds	r7, #40	; 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b08c      	sub	sp, #48	; 0x30
 80034ca:	af04      	add	r7, sp, #16
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fc5c 	bl	8004d98 <pvPortMalloc>
 80034e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034e8:	20a8      	movs	r0, #168	; 0xa8
 80034ea:	f001 fc55 	bl	8004d98 <pvPortMalloc>
 80034ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
 80034fc:	e005      	b.n	800350a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f001 fd16 	bl	8004f30 <vPortFree>
 8003504:	e001      	b.n	800350a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	2300      	movs	r3, #0
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	9302      	str	r3, [sp, #8]
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f80e 	bl	8003550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003534:	69f8      	ldr	r0, [r7, #28]
 8003536:	f000 f8b1 	bl	800369c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e002      	b.n	8003546 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003546:	69bb      	ldr	r3, [r7, #24]
	}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	21a5      	movs	r1, #165	; 0xa5
 800356a:	f001 ff04 	bl	8005376 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003578:	3b01      	subs	r3, #1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	617b      	str	r3, [r7, #20]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01f      	beq.n	80035ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	e012      	b.n	80035da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	7819      	ldrb	r1, [r3, #0]
 80035bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	3334      	adds	r3, #52	; 0x34
 80035c4:	460a      	mov	r2, r1
 80035c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b0f      	cmp	r3, #15
 80035de:	d9e9      	bls.n	80035b4 <prvInitialiseNewTask+0x64>
 80035e0:	e000      	b.n	80035e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80035e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ec:	e003      	b.n	80035f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	2b37      	cmp	r3, #55	; 0x37
 80035fa:	d901      	bls.n	8003600 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035fc:	2337      	movs	r3, #55	; 0x37
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	2200      	movs	r2, #0
 8003610:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f860 	bl	80026dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	3318      	adds	r3, #24
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff f85b 	bl	80026dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	3354      	adds	r3, #84	; 0x54
 8003650:	224c      	movs	r2, #76	; 0x4c
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fe8e 	bl	8005376 <memset>
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <prvInitialiseNewTask+0x140>)
 800365e:	659a      	str	r2, [r3, #88]	; 0x58
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <prvInitialiseNewTask+0x144>)
 8003664:	65da      	str	r2, [r3, #92]	; 0x5c
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <prvInitialiseNewTask+0x148>)
 800366a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	69b8      	ldr	r0, [r7, #24]
 8003672:	f001 f941 	bl	80048f8 <pxPortInitialiseStack>
 8003676:	4602      	mov	r2, r0
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003688:	bf00      	nop
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20004b10 	.word	0x20004b10
 8003694:	20004b78 	.word	0x20004b78
 8003698:	20004be0 	.word	0x20004be0

0800369c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036a4:	f001 fa56 	bl	8004b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <prvAddNewTaskToReadyList+0xc4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <prvAddNewTaskToReadyList+0xc4>)
 80036b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <prvAddNewTaskToReadyList+0xc8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036ba:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <prvAddNewTaskToReadyList+0xc8>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <prvAddNewTaskToReadyList+0xc4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d110      	bne.n	80036ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036c8:	f000 fc26 	bl	8003f18 <prvInitialiseTaskLists>
 80036cc:	e00d      	b.n	80036ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <prvAddNewTaskToReadyList+0xcc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <prvAddNewTaskToReadyList+0xc8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d802      	bhi.n	80036ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036e4:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <prvAddNewTaskToReadyList+0xc8>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <prvAddNewTaskToReadyList+0xd0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <prvAddNewTaskToReadyList+0xd0>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <prvAddNewTaskToReadyList+0xd4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d903      	bls.n	8003710 <prvAddNewTaskToReadyList+0x74>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <prvAddNewTaskToReadyList+0xd4>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4a15      	ldr	r2, [pc, #84]	; (8003774 <prvAddNewTaskToReadyList+0xd8>)
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe ffe5 	bl	80026f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800372c:	f001 fa42 	bl	8004bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <prvAddNewTaskToReadyList+0xcc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvAddNewTaskToReadyList+0xc8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	429a      	cmp	r2, r3
 8003744:	d207      	bcs.n	8003756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <prvAddNewTaskToReadyList+0xdc>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000d8c 	.word	0x20000d8c
 8003764:	200008b8 	.word	0x200008b8
 8003768:	20000d98 	.word	0x20000d98
 800376c:	20000da8 	.word	0x20000da8
 8003770:	20000d94 	.word	0x20000d94
 8003774:	200008bc 	.word	0x200008bc
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <vTaskDelay+0x60>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <vTaskDelay+0x30>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	60bb      	str	r3, [r7, #8]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037ac:	f000 f88a 	bl	80038c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037b0:	2100      	movs	r1, #0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fcfe 	bl	80041b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b8:	f000 f892 	bl	80038e0 <xTaskResumeAll>
 80037bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <vTaskDelay+0x64>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000db4 	.word	0x20000db4
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037f2:	463a      	mov	r2, r7
 80037f4:	1d39      	adds	r1, r7, #4
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe ff1a 	bl	8002634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	460a      	mov	r2, r1
 8003812:	4924      	ldr	r1, [pc, #144]	; (80038a4 <vTaskStartScheduler+0xc0>)
 8003814:	4824      	ldr	r0, [pc, #144]	; (80038a8 <vTaskStartScheduler+0xc4>)
 8003816:	f7ff fdf9 	bl	800340c <xTaskCreateStatic>
 800381a:	4603      	mov	r3, r0
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <vTaskStartScheduler+0xc8>)
 800381e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <vTaskStartScheduler+0xc8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003838:	f000 fd10 	bl	800425c <xTimerCreateTimerTask>
 800383c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d11b      	bne.n	800387c <vTaskStartScheduler+0x98>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	613b      	str	r3, [r7, #16]
}
 8003856:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003858:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <vTaskStartScheduler+0xcc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3354      	adds	r3, #84	; 0x54
 800385e:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <vTaskStartScheduler+0xd0>)
 8003860:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <vTaskStartScheduler+0xd4>)
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <vTaskStartScheduler+0xd8>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <vTaskStartScheduler+0xdc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003876:	f001 f8cb 	bl	8004a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800387a:	e00e      	b.n	800389a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d10a      	bne.n	800389a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <vTaskStartScheduler+0xb4>
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	08006118 	.word	0x08006118
 80038a8:	08003ee9 	.word	0x08003ee9
 80038ac:	20000db0 	.word	0x20000db0
 80038b0:	200008b8 	.word	0x200008b8
 80038b4:	20000068 	.word	0x20000068
 80038b8:	20000dac 	.word	0x20000dac
 80038bc:	20000d98 	.word	0x20000d98
 80038c0:	20000d90 	.word	0x20000d90

080038c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <vTaskSuspendAll+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a03      	ldr	r2, [pc, #12]	; (80038dc <vTaskSuspendAll+0x18>)
 80038d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000db4 	.word	0x20000db4

080038e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ee:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <xTaskResumeAll+0x118>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <xTaskResumeAll+0x2c>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	603b      	str	r3, [r7, #0]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800390c:	f001 f922 	bl	8004b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <xTaskResumeAll+0x118>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <xTaskResumeAll+0x118>)
 8003918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391a:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <xTaskResumeAll+0x118>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d162      	bne.n	80039e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <xTaskResumeAll+0x11c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d05e      	beq.n	80039e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800392a:	e02f      	b.n	800398c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <xTaskResumeAll+0x120>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3318      	adds	r3, #24
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe ff39 	bl	80027b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3304      	adds	r3, #4
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe ff34 	bl	80027b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b2d      	ldr	r3, [pc, #180]	; (8003a04 <xTaskResumeAll+0x124>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <xTaskResumeAll+0x7c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <xTaskResumeAll+0x124>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <xTaskResumeAll+0x128>)
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7fe febf 	bl	80026f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <xTaskResumeAll+0x12c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <xTaskResumeAll+0x130>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800398c:	4b1c      	ldr	r3, [pc, #112]	; (8003a00 <xTaskResumeAll+0x120>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1cb      	bne.n	800392c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800399a:	f000 fb5f 	bl	800405c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <xTaskResumeAll+0x134>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039aa:	f000 f847 	bl	8003a3c <xTaskIncrementTick>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <xTaskResumeAll+0x130>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3b01      	subs	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f1      	bne.n	80039aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <xTaskResumeAll+0x134>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <xTaskResumeAll+0x130>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <xTaskResumeAll+0x138>)
 80039da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039e8:	f001 f8e4 	bl	8004bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80039ec:	68bb      	ldr	r3, [r7, #8]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000db4 	.word	0x20000db4
 80039fc:	20000d8c 	.word	0x20000d8c
 8003a00:	20000d4c 	.word	0x20000d4c
 8003a04:	20000d94 	.word	0x20000d94
 8003a08:	200008bc 	.word	0x200008bc
 8003a0c:	200008b8 	.word	0x200008b8
 8003a10:	20000da0 	.word	0x20000da0
 8003a14:	20000d9c 	.word	0x20000d9c
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <xTaskGetTickCount+0x1c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a28:	687b      	ldr	r3, [r7, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000d90 	.word	0x20000d90

08003a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b4f      	ldr	r3, [pc, #316]	; (8003b84 <xTaskIncrementTick+0x148>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 808f 	bne.w	8003b6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a50:	4b4d      	ldr	r3, [pc, #308]	; (8003b88 <xTaskIncrementTick+0x14c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <xTaskIncrementTick+0x14c>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d120      	bne.n	8003aa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a64:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <xTaskIncrementTick+0x150>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	603b      	str	r3, [r7, #0]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <xTaskIncrementTick+0x46>
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <xTaskIncrementTick+0x150>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <xTaskIncrementTick+0x154>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <xTaskIncrementTick+0x150>)
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4a3f      	ldr	r2, [pc, #252]	; (8003b90 <xTaskIncrementTick+0x154>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <xTaskIncrementTick+0x158>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <xTaskIncrementTick+0x158>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	f000 fadb 	bl	800405c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <xTaskIncrementTick+0x15c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d349      	bcc.n	8003b44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <xTaskIncrementTick+0x150>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <xTaskIncrementTick+0x15c>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	601a      	str	r2, [r3, #0]
					break;
 8003ac2:	e03f      	b.n	8003b44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac4:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <xTaskIncrementTick+0x150>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d203      	bcs.n	8003ae4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003adc:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <xTaskIncrementTick+0x15c>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ae2:	e02f      	b.n	8003b44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fe61 	bl	80027b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3318      	adds	r3, #24
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fe58 	bl	80027b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <xTaskIncrementTick+0x160>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d903      	bls.n	8003b14 <xTaskIncrementTick+0xd8>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <xTaskIncrementTick+0x160>)
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <xTaskIncrementTick+0x164>)
 8003b22:	441a      	add	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fe fde3 	bl	80026f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <xTaskIncrementTick+0x168>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b8      	bcc.n	8003ab0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b42:	e7b5      	b.n	8003ab0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <xTaskIncrementTick+0x168>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <xTaskIncrementTick+0x164>)
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d901      	bls.n	8003b60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <xTaskIncrementTick+0x16c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e004      	b.n	8003b78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <xTaskIncrementTick+0x170>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3301      	adds	r3, #1
 8003b74:	4a0d      	ldr	r2, [pc, #52]	; (8003bac <xTaskIncrementTick+0x170>)
 8003b76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b78:	697b      	ldr	r3, [r7, #20]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000db4 	.word	0x20000db4
 8003b88:	20000d90 	.word	0x20000d90
 8003b8c:	20000d44 	.word	0x20000d44
 8003b90:	20000d48 	.word	0x20000d48
 8003b94:	20000da4 	.word	0x20000da4
 8003b98:	20000dac 	.word	0x20000dac
 8003b9c:	20000d94 	.word	0x20000d94
 8003ba0:	200008bc 	.word	0x200008bc
 8003ba4:	200008b8 	.word	0x200008b8
 8003ba8:	20000da0 	.word	0x20000da0
 8003bac:	20000d9c 	.word	0x20000d9c

08003bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <vTaskSwitchContext+0xb0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bbe:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <vTaskSwitchContext+0xb4>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bc4:	e046      	b.n	8003c54 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003bc6:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <vTaskSwitchContext+0xb4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <vTaskSwitchContext+0xb8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	e010      	b.n	8003bf6 <vTaskSwitchContext+0x46>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	607b      	str	r3, [r7, #4]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <vTaskSwitchContext+0x3e>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	491d      	ldr	r1, [pc, #116]	; (8003c6c <vTaskSwitchContext+0xbc>)
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0e4      	beq.n	8003bd4 <vTaskSwitchContext+0x24>
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <vTaskSwitchContext+0xbc>)
 8003c16:	4413      	add	r3, r2
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	605a      	str	r2, [r3, #4]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d104      	bne.n	8003c3a <vTaskSwitchContext+0x8a>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <vTaskSwitchContext+0xc0>)
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <vTaskSwitchContext+0xb8>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <vTaskSwitchContext+0xc0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3354      	adds	r3, #84	; 0x54
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <vTaskSwitchContext+0xc4>)
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	20000db4 	.word	0x20000db4
 8003c64:	20000da0 	.word	0x20000da0
 8003c68:	20000d94 	.word	0x20000d94
 8003c6c:	200008bc 	.word	0x200008bc
 8003c70:	200008b8 	.word	0x200008b8
 8003c74:	20000068 	.word	0x20000068

08003c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <vTaskPlaceOnEventList+0x44>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe fd49 	bl	800273e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cac:	2101      	movs	r1, #1
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f000 fa80 	bl	80041b4 <prvAddCurrentTaskToDelayedList>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200008b8 	.word	0x200008b8

08003cc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	617b      	str	r3, [r7, #20]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3318      	adds	r3, #24
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7fe fd00 	bl	80026f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	f000 fa55 	bl	80041b4 <prvAddCurrentTaskToDelayedList>
	}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200008b8 	.word	0x200008b8

08003d18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	60fb      	str	r3, [r7, #12]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3318      	adds	r3, #24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fd31 	bl	80027b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <xTaskRemoveFromEventList+0xb0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11d      	bne.n	8003d92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd28 	bl	80027b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <xTaskRemoveFromEventList+0xb4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d903      	bls.n	8003d74 <xTaskRemoveFromEventList+0x5c>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <xTaskRemoveFromEventList+0xb4>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <xTaskRemoveFromEventList+0xb8>)
 8003d82:	441a      	add	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7fe fcb3 	bl	80026f6 <vListInsertEnd>
 8003d90:	e005      	b.n	8003d9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3318      	adds	r3, #24
 8003d96:	4619      	mov	r1, r3
 8003d98:	480e      	ldr	r0, [pc, #56]	; (8003dd4 <xTaskRemoveFromEventList+0xbc>)
 8003d9a:	f7fe fcac 	bl	80026f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <xTaskRemoveFromEventList+0xc0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d905      	bls.n	8003db8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <xTaskRemoveFromEventList+0xc4>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e001      	b.n	8003dbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dbc:	697b      	ldr	r3, [r7, #20]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000db4 	.word	0x20000db4
 8003dcc:	20000d94 	.word	0x20000d94
 8003dd0:	200008bc 	.word	0x200008bc
 8003dd4:	20000d4c 	.word	0x20000d4c
 8003dd8:	200008b8 	.word	0x200008b8
 8003ddc:	20000da0 	.word	0x20000da0

08003de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <vTaskInternalSetTimeOutState+0x24>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <vTaskInternalSetTimeOutState+0x28>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000da4 	.word	0x20000da4
 8003e08:	20000d90 	.word	0x20000d90

08003e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	613b      	str	r3, [r7, #16]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e4e:	f000 fe81 	bl	8004b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <xTaskCheckForTimeOut+0xbc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d102      	bne.n	8003e72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e023      	b.n	8003eba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <xTaskCheckForTimeOut+0xc0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d007      	beq.n	8003e8e <xTaskCheckForTimeOut+0x82>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e015      	b.n	8003eba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d20b      	bcs.n	8003eb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff9b 	bl	8003de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e004      	b.n	8003eba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f000 fe7b 	bl	8004bb4 <vPortExitCritical>

	return xReturn;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000d90 	.word	0x20000d90
 8003ecc:	20000da4 	.word	0x20000da4

08003ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <vTaskMissedYield+0x14>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	20000da0 	.word	0x20000da0

08003ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ef0:	f000 f852 	bl	8003f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <prvIdleTask+0x28>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d9f9      	bls.n	8003ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <prvIdleTask+0x2c>)
 8003efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f0c:	e7f0      	b.n	8003ef0 <prvIdleTask+0x8>
 8003f0e:	bf00      	nop
 8003f10:	200008bc 	.word	0x200008bc
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e00c      	b.n	8003f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <prvInitialiseTaskLists+0x60>)
 8003f30:	4413      	add	r3, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fbb2 	bl	800269c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b37      	cmp	r3, #55	; 0x37
 8003f42:	d9ef      	bls.n	8003f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f44:	480d      	ldr	r0, [pc, #52]	; (8003f7c <prvInitialiseTaskLists+0x64>)
 8003f46:	f7fe fba9 	bl	800269c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f4a:	480d      	ldr	r0, [pc, #52]	; (8003f80 <prvInitialiseTaskLists+0x68>)
 8003f4c:	f7fe fba6 	bl	800269c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f50:	480c      	ldr	r0, [pc, #48]	; (8003f84 <prvInitialiseTaskLists+0x6c>)
 8003f52:	f7fe fba3 	bl	800269c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f56:	480c      	ldr	r0, [pc, #48]	; (8003f88 <prvInitialiseTaskLists+0x70>)
 8003f58:	f7fe fba0 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f5c:	480b      	ldr	r0, [pc, #44]	; (8003f8c <prvInitialiseTaskLists+0x74>)
 8003f5e:	f7fe fb9d 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <prvInitialiseTaskLists+0x78>)
 8003f64:	4a05      	ldr	r2, [pc, #20]	; (8003f7c <prvInitialiseTaskLists+0x64>)
 8003f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <prvInitialiseTaskLists+0x7c>)
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <prvInitialiseTaskLists+0x68>)
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200008bc 	.word	0x200008bc
 8003f7c:	20000d1c 	.word	0x20000d1c
 8003f80:	20000d30 	.word	0x20000d30
 8003f84:	20000d4c 	.word	0x20000d4c
 8003f88:	20000d60 	.word	0x20000d60
 8003f8c:	20000d78 	.word	0x20000d78
 8003f90:	20000d44 	.word	0x20000d44
 8003f94:	20000d48 	.word	0x20000d48

08003f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f9e:	e019      	b.n	8003fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fa0:	f000 fdd8 	bl	8004b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <prvCheckTasksWaitingTermination+0x50>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fbfd 	bl	80027b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <prvCheckTasksWaitingTermination+0x54>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <prvCheckTasksWaitingTermination+0x54>)
 8003fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fca:	f000 fdf3 	bl	8004bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f810 	bl	8003ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <prvCheckTasksWaitingTermination+0x58>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e1      	bne.n	8003fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000d60 	.word	0x20000d60
 8003fec:	20000d8c 	.word	0x20000d8c
 8003ff0:	20000d74 	.word	0x20000d74

08003ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3354      	adds	r3, #84	; 0x54
 8004000:	4618      	mov	r0, r3
 8004002:	f001 f9d1 	bl	80053a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800400c:	2b00      	cmp	r3, #0
 800400e:	d108      	bne.n	8004022 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ff8b 	bl	8004f30 <vPortFree>
				vPortFree( pxTCB );
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 ff88 	bl	8004f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004020:	e018      	b.n	8004054 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004028:	2b01      	cmp	r3, #1
 800402a:	d103      	bne.n	8004034 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 ff7f 	bl	8004f30 <vPortFree>
	}
 8004032:	e00f      	b.n	8004054 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800403a:	2b02      	cmp	r3, #2
 800403c:	d00a      	beq.n	8004054 <prvDeleteTCB+0x60>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60fb      	str	r3, [r7, #12]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <prvDeleteTCB+0x5e>
	}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <prvResetNextTaskUnblockTime+0x38>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <prvResetNextTaskUnblockTime+0x3c>)
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004074:	e008      	b.n	8004088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <prvResetNextTaskUnblockTime+0x38>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <prvResetNextTaskUnblockTime+0x3c>)
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	20000d44 	.word	0x20000d44
 8004098:	20000dac 	.word	0x20000dac

0800409c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <xTaskGetSchedulerState+0x34>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040aa:	2301      	movs	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	e008      	b.n	80040c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <xTaskGetSchedulerState+0x38>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040b8:	2302      	movs	r3, #2
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e001      	b.n	80040c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040c2:	687b      	ldr	r3, [r7, #4]
	}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000d98 	.word	0x20000d98
 80040d4:	20000db4 	.word	0x20000db4

080040d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d056      	beq.n	800419c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040ee:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <xTaskPriorityDisinherit+0xd0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d00a      	beq.n	800410e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	429a      	cmp	r2, r3
 8004140:	d02c      	beq.n	800419c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d128      	bne.n	800419c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fb2e 	bl	80027b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <xTaskPriorityDisinherit+0xd4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d903      	bls.n	800417c <xTaskPriorityDisinherit+0xa4>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <xTaskPriorityDisinherit+0xd4>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <xTaskPriorityDisinherit+0xd8>)
 800418a:	441a      	add	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f7fe faaf 	bl	80026f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800419c:	697b      	ldr	r3, [r7, #20]
	}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200008b8 	.word	0x200008b8
 80041ac:	20000d94 	.word	0x20000d94
 80041b0:	200008bc 	.word	0x200008bc

080041b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <prvAddCurrentTaskToDelayedList+0x90>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041c4:	4b20      	ldr	r3, [pc, #128]	; (8004248 <prvAddCurrentTaskToDelayedList+0x94>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe faf0 	bl	80027b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d10a      	bne.n	80041ee <prvAddCurrentTaskToDelayedList+0x3a>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <prvAddCurrentTaskToDelayedList+0x94>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4819      	ldr	r0, [pc, #100]	; (800424c <prvAddCurrentTaskToDelayedList+0x98>)
 80041e8:	f7fe fa85 	bl	80026f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ec:	e026      	b.n	800423c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <prvAddCurrentTaskToDelayedList+0x94>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	429a      	cmp	r2, r3
 8004204:	d209      	bcs.n	800421a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <prvAddCurrentTaskToDelayedList+0x94>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f7fe fa93 	bl	800273e <vListInsert>
}
 8004218:	e010      	b.n	800423c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <prvAddCurrentTaskToDelayedList+0xa0>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <prvAddCurrentTaskToDelayedList+0x94>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7fe fa89 	bl	800273e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <prvAddCurrentTaskToDelayedList+0xa4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	d202      	bcs.n	800423c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000d90 	.word	0x20000d90
 8004248:	200008b8 	.word	0x200008b8
 800424c:	20000d78 	.word	0x20000d78
 8004250:	20000d48 	.word	0x20000d48
 8004254:	20000d44 	.word	0x20000d44
 8004258:	20000dac 	.word	0x20000dac

0800425c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004266:	f000 fb07 	bl	8004878 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <xTimerCreateTimerTask+0x80>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d021      	beq.n	80042b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800427a:	1d3a      	adds	r2, r7, #4
 800427c:	f107 0108 	add.w	r1, r7, #8
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe f9ef 	bl	8002668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	9202      	str	r2, [sp, #8]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	2302      	movs	r3, #2
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2300      	movs	r3, #0
 800429a:	460a      	mov	r2, r1
 800429c:	4910      	ldr	r1, [pc, #64]	; (80042e0 <xTimerCreateTimerTask+0x84>)
 800429e:	4811      	ldr	r0, [pc, #68]	; (80042e4 <xTimerCreateTimerTask+0x88>)
 80042a0:	f7ff f8b4 	bl	800340c <xTaskCreateStatic>
 80042a4:	4603      	mov	r3, r0
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <xTimerCreateTimerTask+0x8c>)
 80042a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <xTimerCreateTimerTask+0x8c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	613b      	str	r3, [r7, #16]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20000de8 	.word	0x20000de8
 80042e0:	08006120 	.word	0x08006120
 80042e4:	08004421 	.word	0x08004421
 80042e8:	20000dec 	.word	0x20000dec

080042ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	623b      	str	r3, [r7, #32]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800431a:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <xTimerGenericCommand+0x98>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02a      	beq.n	8004378 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b05      	cmp	r3, #5
 8004332:	dc18      	bgt.n	8004366 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004334:	f7ff feb2 	bl	800409c <xTaskGetSchedulerState>
 8004338:	4603      	mov	r3, r0
 800433a:	2b02      	cmp	r3, #2
 800433c:	d109      	bne.n	8004352 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <xTimerGenericCommand+0x98>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f107 0110 	add.w	r1, r7, #16
 8004346:	2300      	movs	r3, #0
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	f7fe fb9b 	bl	8002a84 <xQueueGenericSend>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
 8004350:	e012      	b.n	8004378 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <xTimerGenericCommand+0x98>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	f107 0110 	add.w	r1, r7, #16
 800435a:	2300      	movs	r3, #0
 800435c:	2200      	movs	r2, #0
 800435e:	f7fe fb91 	bl	8002a84 <xQueueGenericSend>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24
 8004364:	e008      	b.n	8004378 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <xTimerGenericCommand+0x98>)
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f107 0110 	add.w	r1, r7, #16
 800436e:	2300      	movs	r3, #0
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	f7fe fca1 	bl	8002cb8 <xQueueGenericSendFromISR>
 8004376:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000de8 	.word	0x20000de8

08004388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <prvProcessExpiredTimer+0x94>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fa05 	bl	80027b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d022      	beq.n	80043fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6978      	ldr	r0, [r7, #20]
 80043c2:	f000 f8d1 	bl	8004568 <prvInsertTimerInActiveList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2300      	movs	r3, #0
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	2100      	movs	r1, #0
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff88 	bl	80042ec <xTimerGenericCommand>
 80043dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	4798      	blx	r3
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000de0 	.word	0x20000de0

08004420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004428:	f107 0308 	add.w	r3, r7, #8
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f857 	bl	80044e0 <prvGetNextExpireTime>
 8004432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4619      	mov	r1, r3
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f803 	bl	8004444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800443e:	f000 f8d5 	bl	80045ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004442:	e7f1      	b.n	8004428 <prvTimerTask+0x8>

08004444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800444e:	f7ff fa39 	bl	80038c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f866 	bl	8004528 <prvSampleTimeNow>
 800445c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d130      	bne.n	80044c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	429a      	cmp	r2, r3
 8004470:	d806      	bhi.n	8004480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004472:	f7ff fa35 	bl	80038e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff85 	bl	8004388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800447e:	e024      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <prvProcessTimerOrBlockTask+0x90>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <prvProcessTimerOrBlockTask+0x50>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <prvProcessTimerOrBlockTask+0x52>
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <prvProcessTimerOrBlockTask+0x94>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fe fee1 	bl	800326c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044aa:	f7ff fa19 	bl	80038e0 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <prvProcessTimerOrBlockTask+0x98>)
 80044b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	f3bf 8f6f 	isb	sy
}
 80044c4:	e001      	b.n	80044ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044c6:	f7ff fa0b 	bl	80038e0 <xTaskResumeAll>
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000de4 	.word	0x20000de4
 80044d8:	20000de8 	.word	0x20000de8
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <prvGetNextExpireTime+0x44>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <prvGetNextExpireTime+0x16>
 80044f2:	2201      	movs	r2, #1
 80044f4:	e000      	b.n	80044f8 <prvGetNextExpireTime+0x18>
 80044f6:	2200      	movs	r2, #0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvGetNextExpireTime+0x44>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e001      	b.n	8004514 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000de0 	.word	0x20000de0

08004528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004530:	f7ff fa74 	bl	8003a1c <xTaskGetTickCount>
 8004534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d205      	bcs.n	800454c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004540:	f000 f936 	bl	80047b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e002      	b.n	8004552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <prvSampleTimeNow+0x3c>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000df0 	.word	0x20000df0

08004568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d812      	bhi.n	80045b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e01b      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <prvInsertTimerInActiveList+0x7c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f8c6 	bl	800273e <vListInsert>
 80045b2:	e012      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d206      	bcs.n	80045ca <prvInsertTimerInActiveList+0x62>
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045c4:	2301      	movs	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e007      	b.n	80045da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <prvInsertTimerInActiveList+0x80>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe f8b2 	bl	800273e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045da:	697b      	ldr	r3, [r7, #20]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000de4 	.word	0x20000de4
 80045e8:	20000de0 	.word	0x20000de0

080045ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045f2:	e0ca      	b.n	800478a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da18      	bge.n	800462c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	3304      	adds	r3, #4
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	61fb      	str	r3, [r7, #28]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004622:	6850      	ldr	r0, [r2, #4]
 8004624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004626:	6892      	ldr	r2, [r2, #8]
 8004628:	4611      	mov	r1, r2
 800462a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f2c0 80ab 	blt.w	800478a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	3304      	adds	r3, #4
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f8b3 	bl	80027b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800464a:	463b      	mov	r3, r7
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff6b 	bl	8004528 <prvSampleTimeNow>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b09      	cmp	r3, #9
 8004658:	f200 8096 	bhi.w	8004788 <prvProcessReceivedCommands+0x19c>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <prvProcessReceivedCommands+0x78>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	0800468d 	.word	0x0800468d
 8004668:	0800468d 	.word	0x0800468d
 800466c:	0800468d 	.word	0x0800468d
 8004670:	08004701 	.word	0x08004701
 8004674:	08004715 	.word	0x08004715
 8004678:	0800475f 	.word	0x0800475f
 800467c:	0800468d 	.word	0x0800468d
 8004680:	0800468d 	.word	0x0800468d
 8004684:	08004701 	.word	0x08004701
 8004688:	08004715 	.word	0x08004715
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	18d1      	adds	r1, r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ac:	f7ff ff5c 	bl	8004568 <prvInsertTimerInActiveList>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d069      	beq.n	800478a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05e      	beq.n	800478a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	441a      	add	r2, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f7ff fe05 	bl	80042ec <xTimerGenericCommand>
 80046e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d14f      	bne.n	800478a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	61bb      	str	r3, [r7, #24]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	b2da      	uxtb	r2, r3
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004712:	e03a      	b.n	800478a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	617b      	str	r3, [r7, #20]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	18d1      	adds	r1, r2, r3
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004758:	f7ff ff06 	bl	8004568 <prvInsertTimerInActiveList>
					break;
 800475c:	e015      	b.n	800478a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800476c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800476e:	f000 fbdf 	bl	8004f30 <vPortFree>
 8004772:	e00a      	b.n	800478a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004786:	e000      	b.n	800478a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800478a:	4b08      	ldr	r3, [pc, #32]	; (80047ac <prvProcessReceivedCommands+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	1d39      	adds	r1, r7, #4
 8004790:	2200      	movs	r2, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fb42 	bl	8002e1c <xQueueReceive>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	f47f af2a 	bne.w	80045f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3730      	adds	r7, #48	; 0x30
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000de8 	.word	0x20000de8

080047b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047b6:	e048      	b.n	800484a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047b8:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <prvSwitchTimerLists+0xc0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c2:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <prvSwitchTimerLists+0xc0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd ffed 	bl	80027b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02e      	beq.n	800484a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d90e      	bls.n	800481c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <prvSwitchTimerLists+0xc0>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fd ff92 	bl	800273e <vListInsert>
 800481a:	e016      	b.n	800484a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800481c:	2300      	movs	r3, #0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	2100      	movs	r1, #0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff fd60 	bl	80042ec <xTimerGenericCommand>
 800482c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	603b      	str	r3, [r7, #0]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <prvSwitchTimerLists+0xc0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1b1      	bne.n	80047b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <prvSwitchTimerLists+0xc0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <prvSwitchTimerLists+0xc4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <prvSwitchTimerLists+0xc0>)
 8004860:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004862:	4a04      	ldr	r2, [pc, #16]	; (8004874 <prvSwitchTimerLists+0xc4>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000de0 	.word	0x20000de0
 8004874:	20000de4 	.word	0x20000de4

08004878 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800487e:	f000 f969 	bl	8004b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <prvCheckForValidListAndQueue+0x60>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d120      	bne.n	80048cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800488a:	4814      	ldr	r0, [pc, #80]	; (80048dc <prvCheckForValidListAndQueue+0x64>)
 800488c:	f7fd ff06 	bl	800269c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004890:	4813      	ldr	r0, [pc, #76]	; (80048e0 <prvCheckForValidListAndQueue+0x68>)
 8004892:	f7fd ff03 	bl	800269c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004896:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <prvCheckForValidListAndQueue+0x6c>)
 8004898:	4a10      	ldr	r2, [pc, #64]	; (80048dc <prvCheckForValidListAndQueue+0x64>)
 800489a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvCheckForValidListAndQueue+0x70>)
 800489e:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <prvCheckForValidListAndQueue+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048a2:	2300      	movs	r3, #0
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <prvCheckForValidListAndQueue+0x74>)
 80048a8:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <prvCheckForValidListAndQueue+0x78>)
 80048aa:	2110      	movs	r1, #16
 80048ac:	200a      	movs	r0, #10
 80048ae:	f7fe f811 	bl	80028d4 <xQueueGenericCreateStatic>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <prvCheckForValidListAndQueue+0x60>)
 80048b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <prvCheckForValidListAndQueue+0x60>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <prvCheckForValidListAndQueue+0x60>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	490b      	ldr	r1, [pc, #44]	; (80048f4 <prvCheckForValidListAndQueue+0x7c>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fca6 	bl	8003218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048cc:	f000 f972 	bl	8004bb4 <vPortExitCritical>
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000de8 	.word	0x20000de8
 80048dc:	20000db8 	.word	0x20000db8
 80048e0:	20000dcc 	.word	0x20000dcc
 80048e4:	20000de0 	.word	0x20000de0
 80048e8:	20000de4 	.word	0x20000de4
 80048ec:	20000e94 	.word	0x20000e94
 80048f0:	20000df4 	.word	0x20000df4
 80048f4:	08006128 	.word	0x08006128

080048f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b04      	subs	r3, #4
 8004908:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b04      	subs	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3b04      	subs	r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004928:	4a0c      	ldr	r2, [pc, #48]	; (800495c <pxPortInitialiseStack+0x64>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b14      	subs	r3, #20
 8004932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b04      	subs	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f06f 0202 	mvn.w	r2, #2
 8004946:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b20      	subs	r3, #32
 800494c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800494e:	68fb      	ldr	r3, [r7, #12]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	08004961 	.word	0x08004961

08004960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <prvTaskExitError+0x54>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d00a      	beq.n	800498a <prvTaskExitError+0x2a>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60fb      	str	r3, [r7, #12]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <prvTaskExitError+0x28>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800499e:	bf00      	nop
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0fc      	beq.n	80049a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	2000000c 	.word	0x2000000c
	...

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a0a:	bf00      	nop
 8004a0c:	e000ed08 	.word	0xe000ed08

08004a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a16:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <xPortStartScheduler+0x120>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a46      	ldr	r2, [pc, #280]	; (8004b34 <xPortStartScheduler+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10a      	bne.n	8004a36 <xPortStartScheduler+0x26>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a36:	4b3e      	ldr	r3, [pc, #248]	; (8004b30 <xPortStartScheduler+0x120>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <xPortStartScheduler+0x128>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10a      	bne.n	8004a56 <xPortStartScheduler+0x46>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	60fb      	str	r3, [r7, #12]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	22ff      	movs	r2, #255	; 0xff
 8004a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <xPortStartScheduler+0x130>)
 8004a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a80:	2207      	movs	r2, #7
 8004a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a84:	e009      	b.n	8004a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a86:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <xPortStartScheduler+0x134>)
 8004a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b80      	cmp	r3, #128	; 0x80
 8004aa4:	d0ef      	beq.n	8004a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <xPortStartScheduler+0x134>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d00a      	beq.n	8004ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	60bb      	str	r3, [r7, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	e7fe      	b.n	8004ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <xPortStartScheduler+0x134>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <xPortStartScheduler+0x134>)
 8004ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <xPortStartScheduler+0x134>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <xPortStartScheduler+0x134>)
 8004adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <xPortStartScheduler+0x138>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <xPortStartScheduler+0x138>)
 8004aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <xPortStartScheduler+0x138>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <xPortStartScheduler+0x138>)
 8004af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004afe:	f000 f8dd 	bl	8004cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <xPortStartScheduler+0x13c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b08:	f000 f8fc 	bl	8004d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <xPortStartScheduler+0x140>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <xPortStartScheduler+0x140>)
 8004b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b18:	f7ff ff66 	bl	80049e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b1c:	f7ff f848 	bl	8003bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004b20:	f7ff ff1e 	bl	8004960 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	e000ed00 	.word	0xe000ed00
 8004b34:	410fc271 	.word	0x410fc271
 8004b38:	410fc270 	.word	0x410fc270
 8004b3c:	e000e400 	.word	0xe000e400
 8004b40:	20000ee8 	.word	0x20000ee8
 8004b44:	20000eec 	.word	0x20000eec
 8004b48:	e000ed20 	.word	0xe000ed20
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	e000ef34 	.word	0xe000ef34

08004b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
}
 8004b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <vPortEnterCritical+0x58>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <vPortEnterCritical+0x58>)
 8004b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <vPortEnterCritical+0x58>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10f      	bne.n	8004ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <vPortEnterCritical+0x5c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <vPortEnterCritical+0x4a>
	}
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <vPortExitCritical+0x50>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vPortExitCritical+0x24>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <vPortExitCritical+0x50>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <vPortExitCritical+0x50>)
 8004be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <vPortExitCritical+0x50>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <vPortExitCritical+0x42>
 8004bea:	2300      	movs	r3, #0
 8004bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
}
 8004bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c
	...

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	f380 8811 	msr	BASEPRI, r0
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f7fe ffb6 	bl	8003bb0 <vTaskSwitchContext>
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f380 8811 	msr	BASEPRI, r0
 8004c4c:	bc09      	pop	{r0, r3}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c56:	f01e 0f10 	tst.w	lr, #16
 8004c5a:	bf08      	it	eq
 8004c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c60:	f380 8809 	msr	PSP, r0
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst>:
 8004c70:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c92:	f7fe fed3 	bl	8003a3c <xTaskIncrementTick>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <xPortSysTickHandler+0x40>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f383 8811 	msr	BASEPRI, r3
}
 8004cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortSetupTimerInterrupt+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortSetupTimerInterrupt+0x3c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x40>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <vPortSetupTimerInterrupt+0x44>)
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010
 8004cf4:	e000e018 	.word	0xe000e018
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	e000e014 	.word	0xe000e014

08004d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d14 <vPortEnableVFP+0x10>
 8004d08:	6801      	ldr	r1, [r0, #0]
 8004d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d0e:	6001      	str	r1, [r0, #0]
 8004d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d12:	bf00      	nop
 8004d14:	e000ed88 	.word	0xe000ed88

08004d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d1e:	f3ef 8305 	mrs	r3, IPSR
 8004d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d914      	bls.n	8004d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <vPortValidateInterruptPriority+0x70>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <vPortValidateInterruptPriority+0x74>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	7afa      	ldrb	r2, [r7, #11]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20a      	bcs.n	8004d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <vPortValidateInterruptPriority+0x78>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <vPortValidateInterruptPriority+0x7c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d90a      	bls.n	8004d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	603b      	str	r3, [r7, #0]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <vPortValidateInterruptPriority+0x60>
	}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000e3f0 	.word	0xe000e3f0
 8004d8c:	20000ee8 	.word	0x20000ee8
 8004d90:	e000ed0c 	.word	0xe000ed0c
 8004d94:	20000eec 	.word	0x20000eec

08004d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004da4:	f7fe fd8e 	bl	80038c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004da8:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <pvPortMalloc+0x180>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004db0:	f000 f920 	bl	8004ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <pvPortMalloc+0x184>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8093 	bne.w	8004ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01d      	beq.n	8004e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004dc8:	2208      	movs	r2, #8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d014      	beq.n	8004e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	3308      	adds	r3, #8
 8004de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <pvPortMalloc+0x6c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617b      	str	r3, [r7, #20]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d06e      	beq.n	8004ee8 <pvPortMalloc+0x150>
 8004e0a:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <pvPortMalloc+0x188>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d869      	bhi.n	8004ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e14:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <pvPortMalloc+0x18c>)
 8004e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <pvPortMalloc+0x18c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e1e:	e004      	b.n	8004e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d903      	bls.n	8004e3c <pvPortMalloc+0xa4>
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f1      	bne.n	8004e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <pvPortMalloc+0x180>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d050      	beq.n	8004ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	2308      	movs	r3, #8
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d91f      	bls.n	8004ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <pvPortMalloc+0xf8>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	613b      	str	r3, [r7, #16]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1ad2      	subs	r2, r2, r3
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ea2:	69b8      	ldr	r0, [r7, #24]
 8004ea4:	f000 f908 	bl	80050b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <pvPortMalloc+0x188>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <pvPortMalloc+0x188>)
 8004eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <pvPortMalloc+0x188>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <pvPortMalloc+0x190>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d203      	bcs.n	8004eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ec2:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <pvPortMalloc+0x188>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <pvPortMalloc+0x190>)
 8004ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <pvPortMalloc+0x184>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <pvPortMalloc+0x194>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4a11      	ldr	r2, [pc, #68]	; (8004f2c <pvPortMalloc+0x194>)
 8004ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ee8:	f7fe fcfa 	bl	80038e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <pvPortMalloc+0x174>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60fb      	str	r3, [r7, #12]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <pvPortMalloc+0x172>
	return pvReturn;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20004af8 	.word	0x20004af8
 8004f1c:	20004b0c 	.word	0x20004b0c
 8004f20:	20004afc 	.word	0x20004afc
 8004f24:	20004af0 	.word	0x20004af0
 8004f28:	20004b00 	.word	0x20004b00
 8004f2c:	20004b04 	.word	0x20004b04

08004f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04d      	beq.n	8004fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f42:	2308      	movs	r3, #8
 8004f44:	425b      	negs	r3, r3
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4413      	add	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <vPortFree+0xb8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <vPortFree+0x44>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	60fb      	str	r3, [r7, #12]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <vPortFree+0x62>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60bb      	str	r3, [r7, #8]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <vPortFree+0xb8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01e      	beq.n	8004fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11a      	bne.n	8004fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <vPortFree+0xb8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fb8:	f7fe fc84 	bl	80038c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <vPortFree+0xbc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <vPortFree+0xbc>)
 8004fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fca:	6938      	ldr	r0, [r7, #16]
 8004fcc:	f000 f874 	bl	80050b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <vPortFree+0xc0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a06      	ldr	r2, [pc, #24]	; (8004ff0 <vPortFree+0xc0>)
 8004fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fda:	f7fe fc81 	bl	80038e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20004b0c 	.word	0x20004b0c
 8004fec:	20004afc 	.word	0x20004afc
 8004ff0:	20004b08 	.word	0x20004b08

08004ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005000:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <prvHeapInit+0xac>)
 8005002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3307      	adds	r3, #7
 8005012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0307 	bic.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <prvHeapInit+0xac>)
 8005024:	4413      	add	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <prvHeapInit+0xb0>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <prvHeapInit+0xb0>)
 8005034:	2200      	movs	r2, #0
 8005036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	4413      	add	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005040:	2208      	movs	r2, #8
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0307 	bic.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <prvHeapInit+0xb4>)
 8005054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <prvHeapInit+0xb4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <prvHeapInit+0xb4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <prvHeapInit+0xb4>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a0a      	ldr	r2, [pc, #40]	; (80050ac <prvHeapInit+0xb8>)
 8005082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <prvHeapInit+0xbc>)
 800508a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <prvHeapInit+0xc0>)
 800508e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	20000ef0 	.word	0x20000ef0
 80050a4:	20004af0 	.word	0x20004af0
 80050a8:	20004af8 	.word	0x20004af8
 80050ac:	20004b00 	.word	0x20004b00
 80050b0:	20004afc 	.word	0x20004afc
 80050b4:	20004b0c 	.word	0x20004b0c

080050b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050c0:	4b28      	ldr	r3, [pc, #160]	; (8005164 <prvInsertBlockIntoFreeList+0xac>)
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e002      	b.n	80050cc <prvInsertBlockIntoFreeList+0x14>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d8f7      	bhi.n	80050c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d108      	bne.n	80050fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	441a      	add	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d118      	bne.n	8005140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <prvInsertBlockIntoFreeList+0xb0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d00d      	beq.n	8005136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	441a      	add	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e008      	b.n	8005148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvInsertBlockIntoFreeList+0xb0>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e003      	b.n	8005148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d002      	beq.n	8005156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20004af0 	.word	0x20004af0
 8005168:	20004af8 	.word	0x20004af8

0800516c <std>:
 800516c:	2300      	movs	r3, #0
 800516e:	b510      	push	{r4, lr}
 8005170:	4604      	mov	r4, r0
 8005172:	e9c0 3300 	strd	r3, r3, [r0]
 8005176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800517a:	6083      	str	r3, [r0, #8]
 800517c:	8181      	strh	r1, [r0, #12]
 800517e:	6643      	str	r3, [r0, #100]	; 0x64
 8005180:	81c2      	strh	r2, [r0, #14]
 8005182:	6183      	str	r3, [r0, #24]
 8005184:	4619      	mov	r1, r3
 8005186:	2208      	movs	r2, #8
 8005188:	305c      	adds	r0, #92	; 0x5c
 800518a:	f000 f8f4 	bl	8005376 <memset>
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <std+0x38>)
 8005190:	6263      	str	r3, [r4, #36]	; 0x24
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <std+0x3c>)
 8005194:	62a3      	str	r3, [r4, #40]	; 0x28
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x40>)
 8005198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <std+0x44>)
 800519c:	6224      	str	r4, [r4, #32]
 800519e:	6323      	str	r3, [r4, #48]	; 0x30
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	bf00      	nop
 80051a4:	080052f1 	.word	0x080052f1
 80051a8:	08005313 	.word	0x08005313
 80051ac:	0800534b 	.word	0x0800534b
 80051b0:	0800536f 	.word	0x0800536f

080051b4 <stdio_exit_handler>:
 80051b4:	4a02      	ldr	r2, [pc, #8]	; (80051c0 <stdio_exit_handler+0xc>)
 80051b6:	4903      	ldr	r1, [pc, #12]	; (80051c4 <stdio_exit_handler+0x10>)
 80051b8:	4803      	ldr	r0, [pc, #12]	; (80051c8 <stdio_exit_handler+0x14>)
 80051ba:	f000 b869 	b.w	8005290 <_fwalk_sglue>
 80051be:	bf00      	nop
 80051c0:	20000010 	.word	0x20000010
 80051c4:	08005dd9 	.word	0x08005dd9
 80051c8:	2000001c 	.word	0x2000001c

080051cc <cleanup_stdio>:
 80051cc:	6841      	ldr	r1, [r0, #4]
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <cleanup_stdio+0x34>)
 80051d0:	4299      	cmp	r1, r3
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	d001      	beq.n	80051dc <cleanup_stdio+0x10>
 80051d8:	f000 fdfe 	bl	8005dd8 <_fflush_r>
 80051dc:	68a1      	ldr	r1, [r4, #8]
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <cleanup_stdio+0x38>)
 80051e0:	4299      	cmp	r1, r3
 80051e2:	d002      	beq.n	80051ea <cleanup_stdio+0x1e>
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 fdf7 	bl	8005dd8 <_fflush_r>
 80051ea:	68e1      	ldr	r1, [r4, #12]
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <cleanup_stdio+0x3c>)
 80051ee:	4299      	cmp	r1, r3
 80051f0:	d004      	beq.n	80051fc <cleanup_stdio+0x30>
 80051f2:	4620      	mov	r0, r4
 80051f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f8:	f000 bdee 	b.w	8005dd8 <_fflush_r>
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	bf00      	nop
 8005200:	20004b10 	.word	0x20004b10
 8005204:	20004b78 	.word	0x20004b78
 8005208:	20004be0 	.word	0x20004be0

0800520c <global_stdio_init.part.0>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <global_stdio_init.part.0+0x30>)
 8005210:	4c0b      	ldr	r4, [pc, #44]	; (8005240 <global_stdio_init.part.0+0x34>)
 8005212:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <global_stdio_init.part.0+0x38>)
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	4620      	mov	r0, r4
 8005218:	2200      	movs	r2, #0
 800521a:	2104      	movs	r1, #4
 800521c:	f7ff ffa6 	bl	800516c <std>
 8005220:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005224:	2201      	movs	r2, #1
 8005226:	2109      	movs	r1, #9
 8005228:	f7ff ffa0 	bl	800516c <std>
 800522c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005230:	2202      	movs	r2, #2
 8005232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005236:	2112      	movs	r1, #18
 8005238:	f7ff bf98 	b.w	800516c <std>
 800523c:	20004c48 	.word	0x20004c48
 8005240:	20004b10 	.word	0x20004b10
 8005244:	080051b5 	.word	0x080051b5

08005248 <__sfp_lock_acquire>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__sfp_lock_acquire+0x8>)
 800524a:	f000 b963 	b.w	8005514 <__retarget_lock_acquire_recursive>
 800524e:	bf00      	nop
 8005250:	20004c51 	.word	0x20004c51

08005254 <__sfp_lock_release>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__sfp_lock_release+0x8>)
 8005256:	f000 b95e 	b.w	8005516 <__retarget_lock_release_recursive>
 800525a:	bf00      	nop
 800525c:	20004c51 	.word	0x20004c51

08005260 <__sinit>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4604      	mov	r4, r0
 8005264:	f7ff fff0 	bl	8005248 <__sfp_lock_acquire>
 8005268:	6a23      	ldr	r3, [r4, #32]
 800526a:	b11b      	cbz	r3, 8005274 <__sinit+0x14>
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005270:	f7ff bff0 	b.w	8005254 <__sfp_lock_release>
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <__sinit+0x28>)
 8005276:	6223      	str	r3, [r4, #32]
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <__sinit+0x2c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f5      	bne.n	800526c <__sinit+0xc>
 8005280:	f7ff ffc4 	bl	800520c <global_stdio_init.part.0>
 8005284:	e7f2      	b.n	800526c <__sinit+0xc>
 8005286:	bf00      	nop
 8005288:	080051cd 	.word	0x080051cd
 800528c:	20004c48 	.word	0x20004c48

08005290 <_fwalk_sglue>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	4607      	mov	r7, r0
 8005296:	4688      	mov	r8, r1
 8005298:	4614      	mov	r4, r2
 800529a:	2600      	movs	r6, #0
 800529c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a0:	f1b9 0901 	subs.w	r9, r9, #1
 80052a4:	d505      	bpl.n	80052b2 <_fwalk_sglue+0x22>
 80052a6:	6824      	ldr	r4, [r4, #0]
 80052a8:	2c00      	cmp	r4, #0
 80052aa:	d1f7      	bne.n	800529c <_fwalk_sglue+0xc>
 80052ac:	4630      	mov	r0, r6
 80052ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b2:	89ab      	ldrh	r3, [r5, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d907      	bls.n	80052c8 <_fwalk_sglue+0x38>
 80052b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052bc:	3301      	adds	r3, #1
 80052be:	d003      	beq.n	80052c8 <_fwalk_sglue+0x38>
 80052c0:	4629      	mov	r1, r5
 80052c2:	4638      	mov	r0, r7
 80052c4:	47c0      	blx	r8
 80052c6:	4306      	orrs	r6, r0
 80052c8:	3568      	adds	r5, #104	; 0x68
 80052ca:	e7e9      	b.n	80052a0 <_fwalk_sglue+0x10>

080052cc <iprintf>:
 80052cc:	b40f      	push	{r0, r1, r2, r3}
 80052ce:	b507      	push	{r0, r1, r2, lr}
 80052d0:	4906      	ldr	r1, [pc, #24]	; (80052ec <iprintf+0x20>)
 80052d2:	ab04      	add	r3, sp, #16
 80052d4:	6808      	ldr	r0, [r1, #0]
 80052d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052da:	6881      	ldr	r1, [r0, #8]
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	f000 fa4b 	bl	8005778 <_vfiprintf_r>
 80052e2:	b003      	add	sp, #12
 80052e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr
 80052ec:	20000068 	.word	0x20000068

080052f0 <__sread>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	460c      	mov	r4, r1
 80052f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f8:	f000 f8be 	bl	8005478 <_read_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	bfab      	itete	ge
 8005300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005302:	89a3      	ldrhlt	r3, [r4, #12]
 8005304:	181b      	addge	r3, r3, r0
 8005306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800530a:	bfac      	ite	ge
 800530c:	6563      	strge	r3, [r4, #84]	; 0x54
 800530e:	81a3      	strhlt	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__swrite>:
 8005312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005316:	461f      	mov	r7, r3
 8005318:	898b      	ldrh	r3, [r1, #12]
 800531a:	05db      	lsls	r3, r3, #23
 800531c:	4605      	mov	r5, r0
 800531e:	460c      	mov	r4, r1
 8005320:	4616      	mov	r6, r2
 8005322:	d505      	bpl.n	8005330 <__swrite+0x1e>
 8005324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005328:	2302      	movs	r3, #2
 800532a:	2200      	movs	r2, #0
 800532c:	f000 f892 	bl	8005454 <_lseek_r>
 8005330:	89a3      	ldrh	r3, [r4, #12]
 8005332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	4632      	mov	r2, r6
 800533e:	463b      	mov	r3, r7
 8005340:	4628      	mov	r0, r5
 8005342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005346:	f000 b8a9 	b.w	800549c <_write_r>

0800534a <__sseek>:
 800534a:	b510      	push	{r4, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005352:	f000 f87f 	bl	8005454 <_lseek_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	bf15      	itete	ne
 800535c:	6560      	strne	r0, [r4, #84]	; 0x54
 800535e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005366:	81a3      	strheq	r3, [r4, #12]
 8005368:	bf18      	it	ne
 800536a:	81a3      	strhne	r3, [r4, #12]
 800536c:	bd10      	pop	{r4, pc}

0800536e <__sclose>:
 800536e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005372:	f000 b809 	b.w	8005388 <_close_r>

08005376 <memset>:
 8005376:	4402      	add	r2, r0
 8005378:	4603      	mov	r3, r0
 800537a:	4293      	cmp	r3, r2
 800537c:	d100      	bne.n	8005380 <memset+0xa>
 800537e:	4770      	bx	lr
 8005380:	f803 1b01 	strb.w	r1, [r3], #1
 8005384:	e7f9      	b.n	800537a <memset+0x4>
	...

08005388 <_close_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d06      	ldr	r5, [pc, #24]	; (80053a4 <_close_r+0x1c>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb fbe3 	bl	8000b5e <_close>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_close_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_close_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	20004c4c 	.word	0x20004c4c

080053a8 <_reclaim_reent>:
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <_reclaim_reent+0xa8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4283      	cmp	r3, r0
 80053ae:	b570      	push	{r4, r5, r6, lr}
 80053b0:	4604      	mov	r4, r0
 80053b2:	d04b      	beq.n	800544c <_reclaim_reent+0xa4>
 80053b4:	69c3      	ldr	r3, [r0, #28]
 80053b6:	b143      	cbz	r3, 80053ca <_reclaim_reent+0x22>
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d144      	bne.n	8005448 <_reclaim_reent+0xa0>
 80053be:	69e3      	ldr	r3, [r4, #28]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	b111      	cbz	r1, 80053ca <_reclaim_reent+0x22>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f000 f8b5 	bl	8005534 <_free_r>
 80053ca:	6961      	ldr	r1, [r4, #20]
 80053cc:	b111      	cbz	r1, 80053d4 <_reclaim_reent+0x2c>
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f8b0 	bl	8005534 <_free_r>
 80053d4:	69e1      	ldr	r1, [r4, #28]
 80053d6:	b111      	cbz	r1, 80053de <_reclaim_reent+0x36>
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 f8ab 	bl	8005534 <_free_r>
 80053de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80053e0:	b111      	cbz	r1, 80053e8 <_reclaim_reent+0x40>
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f8a6 	bl	8005534 <_free_r>
 80053e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ea:	b111      	cbz	r1, 80053f2 <_reclaim_reent+0x4a>
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f8a1 	bl	8005534 <_free_r>
 80053f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053f4:	b111      	cbz	r1, 80053fc <_reclaim_reent+0x54>
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f89c 	bl	8005534 <_free_r>
 80053fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053fe:	b111      	cbz	r1, 8005406 <_reclaim_reent+0x5e>
 8005400:	4620      	mov	r0, r4
 8005402:	f000 f897 	bl	8005534 <_free_r>
 8005406:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005408:	b111      	cbz	r1, 8005410 <_reclaim_reent+0x68>
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f892 	bl	8005534 <_free_r>
 8005410:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005412:	b111      	cbz	r1, 800541a <_reclaim_reent+0x72>
 8005414:	4620      	mov	r0, r4
 8005416:	f000 f88d 	bl	8005534 <_free_r>
 800541a:	6a23      	ldr	r3, [r4, #32]
 800541c:	b1b3      	cbz	r3, 800544c <_reclaim_reent+0xa4>
 800541e:	4620      	mov	r0, r4
 8005420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005424:	4718      	bx	r3
 8005426:	5949      	ldr	r1, [r1, r5]
 8005428:	b941      	cbnz	r1, 800543c <_reclaim_reent+0x94>
 800542a:	3504      	adds	r5, #4
 800542c:	69e3      	ldr	r3, [r4, #28]
 800542e:	2d80      	cmp	r5, #128	; 0x80
 8005430:	68d9      	ldr	r1, [r3, #12]
 8005432:	d1f8      	bne.n	8005426 <_reclaim_reent+0x7e>
 8005434:	4620      	mov	r0, r4
 8005436:	f000 f87d 	bl	8005534 <_free_r>
 800543a:	e7c0      	b.n	80053be <_reclaim_reent+0x16>
 800543c:	680e      	ldr	r6, [r1, #0]
 800543e:	4620      	mov	r0, r4
 8005440:	f000 f878 	bl	8005534 <_free_r>
 8005444:	4631      	mov	r1, r6
 8005446:	e7ef      	b.n	8005428 <_reclaim_reent+0x80>
 8005448:	2500      	movs	r5, #0
 800544a:	e7ef      	b.n	800542c <_reclaim_reent+0x84>
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	bf00      	nop
 8005450:	20000068 	.word	0x20000068

08005454 <_lseek_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_lseek_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fb fba2 	bl	8000bac <_lseek>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_lseek_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_lseek_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20004c4c 	.word	0x20004c4c

08005478 <_read_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d07      	ldr	r5, [pc, #28]	; (8005498 <_read_r+0x20>)
 800547c:	4604      	mov	r4, r0
 800547e:	4608      	mov	r0, r1
 8005480:	4611      	mov	r1, r2
 8005482:	2200      	movs	r2, #0
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fb fb30 	bl	8000aec <_read>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_read_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_read_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20004c4c 	.word	0x20004c4c

0800549c <_write_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	; (80054bc <_write_r+0x20>)
 80054a0:	4604      	mov	r4, r0
 80054a2:	4608      	mov	r0, r1
 80054a4:	4611      	mov	r1, r2
 80054a6:	2200      	movs	r2, #0
 80054a8:	602a      	str	r2, [r5, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fb fb3b 	bl	8000b26 <_write>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_write_r+0x1e>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_write_r+0x1e>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	20004c4c 	.word	0x20004c4c

080054c0 <__errno>:
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <__errno+0x8>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000068 	.word	0x20000068

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4d0d      	ldr	r5, [pc, #52]	; (8005504 <__libc_init_array+0x38>)
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d2:	1b64      	subs	r4, r4, r5
 80054d4:	10a4      	asrs	r4, r4, #2
 80054d6:	2600      	movs	r6, #0
 80054d8:	42a6      	cmp	r6, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	4d0b      	ldr	r5, [pc, #44]	; (800550c <__libc_init_array+0x40>)
 80054de:	4c0c      	ldr	r4, [pc, #48]	; (8005510 <__libc_init_array+0x44>)
 80054e0:	f000 fdcc 	bl	800607c <_init>
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	2600      	movs	r6, #0
 80054ea:	42a6      	cmp	r6, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f4:	4798      	blx	r3
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fe:	4798      	blx	r3
 8005500:	3601      	adds	r6, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	08006184 	.word	0x08006184
 8005508:	08006184 	.word	0x08006184
 800550c:	08006184 	.word	0x08006184
 8005510:	08006188 	.word	0x08006188

08005514 <__retarget_lock_acquire_recursive>:
 8005514:	4770      	bx	lr

08005516 <__retarget_lock_release_recursive>:
 8005516:	4770      	bx	lr

08005518 <memcpy>:
 8005518:	440a      	add	r2, r1
 800551a:	4291      	cmp	r1, r2
 800551c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005520:	d100      	bne.n	8005524 <memcpy+0xc>
 8005522:	4770      	bx	lr
 8005524:	b510      	push	{r4, lr}
 8005526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552e:	4291      	cmp	r1, r2
 8005530:	d1f9      	bne.n	8005526 <memcpy+0xe>
 8005532:	bd10      	pop	{r4, pc}

08005534 <_free_r>:
 8005534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005536:	2900      	cmp	r1, #0
 8005538:	d044      	beq.n	80055c4 <_free_r+0x90>
 800553a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553e:	9001      	str	r0, [sp, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	f1a1 0404 	sub.w	r4, r1, #4
 8005546:	bfb8      	it	lt
 8005548:	18e4      	addlt	r4, r4, r3
 800554a:	f000 f8df 	bl	800570c <__malloc_lock>
 800554e:	4a1e      	ldr	r2, [pc, #120]	; (80055c8 <_free_r+0x94>)
 8005550:	9801      	ldr	r0, [sp, #4]
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	b933      	cbnz	r3, 8005564 <_free_r+0x30>
 8005556:	6063      	str	r3, [r4, #4]
 8005558:	6014      	str	r4, [r2, #0]
 800555a:	b003      	add	sp, #12
 800555c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005560:	f000 b8da 	b.w	8005718 <__malloc_unlock>
 8005564:	42a3      	cmp	r3, r4
 8005566:	d908      	bls.n	800557a <_free_r+0x46>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	1961      	adds	r1, r4, r5
 800556c:	428b      	cmp	r3, r1
 800556e:	bf01      	itttt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	1949      	addeq	r1, r1, r5
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	e7ed      	b.n	8005556 <_free_r+0x22>
 800557a:	461a      	mov	r2, r3
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b10b      	cbz	r3, 8005584 <_free_r+0x50>
 8005580:	42a3      	cmp	r3, r4
 8005582:	d9fa      	bls.n	800557a <_free_r+0x46>
 8005584:	6811      	ldr	r1, [r2, #0]
 8005586:	1855      	adds	r5, r2, r1
 8005588:	42a5      	cmp	r5, r4
 800558a:	d10b      	bne.n	80055a4 <_free_r+0x70>
 800558c:	6824      	ldr	r4, [r4, #0]
 800558e:	4421      	add	r1, r4
 8005590:	1854      	adds	r4, r2, r1
 8005592:	42a3      	cmp	r3, r4
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	d1e0      	bne.n	800555a <_free_r+0x26>
 8005598:	681c      	ldr	r4, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	6053      	str	r3, [r2, #4]
 800559e:	440c      	add	r4, r1
 80055a0:	6014      	str	r4, [r2, #0]
 80055a2:	e7da      	b.n	800555a <_free_r+0x26>
 80055a4:	d902      	bls.n	80055ac <_free_r+0x78>
 80055a6:	230c      	movs	r3, #12
 80055a8:	6003      	str	r3, [r0, #0]
 80055aa:	e7d6      	b.n	800555a <_free_r+0x26>
 80055ac:	6825      	ldr	r5, [r4, #0]
 80055ae:	1961      	adds	r1, r4, r5
 80055b0:	428b      	cmp	r3, r1
 80055b2:	bf04      	itt	eq
 80055b4:	6819      	ldreq	r1, [r3, #0]
 80055b6:	685b      	ldreq	r3, [r3, #4]
 80055b8:	6063      	str	r3, [r4, #4]
 80055ba:	bf04      	itt	eq
 80055bc:	1949      	addeq	r1, r1, r5
 80055be:	6021      	streq	r1, [r4, #0]
 80055c0:	6054      	str	r4, [r2, #4]
 80055c2:	e7ca      	b.n	800555a <_free_r+0x26>
 80055c4:	b003      	add	sp, #12
 80055c6:	bd30      	pop	{r4, r5, pc}
 80055c8:	20004c54 	.word	0x20004c54

080055cc <sbrk_aligned>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4e0e      	ldr	r6, [pc, #56]	; (8005608 <sbrk_aligned+0x3c>)
 80055d0:	460c      	mov	r4, r1
 80055d2:	6831      	ldr	r1, [r6, #0]
 80055d4:	4605      	mov	r5, r0
 80055d6:	b911      	cbnz	r1, 80055de <sbrk_aligned+0x12>
 80055d8:	f000 fcbc 	bl	8005f54 <_sbrk_r>
 80055dc:	6030      	str	r0, [r6, #0]
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 fcb7 	bl	8005f54 <_sbrk_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	d00a      	beq.n	8005600 <sbrk_aligned+0x34>
 80055ea:	1cc4      	adds	r4, r0, #3
 80055ec:	f024 0403 	bic.w	r4, r4, #3
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	d007      	beq.n	8005604 <sbrk_aligned+0x38>
 80055f4:	1a21      	subs	r1, r4, r0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fcac 	bl	8005f54 <_sbrk_r>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d101      	bne.n	8005604 <sbrk_aligned+0x38>
 8005600:	f04f 34ff 	mov.w	r4, #4294967295
 8005604:	4620      	mov	r0, r4
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	20004c58 	.word	0x20004c58

0800560c <_malloc_r>:
 800560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005610:	1ccd      	adds	r5, r1, #3
 8005612:	f025 0503 	bic.w	r5, r5, #3
 8005616:	3508      	adds	r5, #8
 8005618:	2d0c      	cmp	r5, #12
 800561a:	bf38      	it	cc
 800561c:	250c      	movcc	r5, #12
 800561e:	2d00      	cmp	r5, #0
 8005620:	4607      	mov	r7, r0
 8005622:	db01      	blt.n	8005628 <_malloc_r+0x1c>
 8005624:	42a9      	cmp	r1, r5
 8005626:	d905      	bls.n	8005634 <_malloc_r+0x28>
 8005628:	230c      	movs	r3, #12
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	2600      	movs	r6, #0
 800562e:	4630      	mov	r0, r6
 8005630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005708 <_malloc_r+0xfc>
 8005638:	f000 f868 	bl	800570c <__malloc_lock>
 800563c:	f8d8 3000 	ldr.w	r3, [r8]
 8005640:	461c      	mov	r4, r3
 8005642:	bb5c      	cbnz	r4, 800569c <_malloc_r+0x90>
 8005644:	4629      	mov	r1, r5
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff ffc0 	bl	80055cc <sbrk_aligned>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	4604      	mov	r4, r0
 8005650:	d155      	bne.n	80056fe <_malloc_r+0xf2>
 8005652:	f8d8 4000 	ldr.w	r4, [r8]
 8005656:	4626      	mov	r6, r4
 8005658:	2e00      	cmp	r6, #0
 800565a:	d145      	bne.n	80056e8 <_malloc_r+0xdc>
 800565c:	2c00      	cmp	r4, #0
 800565e:	d048      	beq.n	80056f2 <_malloc_r+0xe6>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	4631      	mov	r1, r6
 8005664:	4638      	mov	r0, r7
 8005666:	eb04 0903 	add.w	r9, r4, r3
 800566a:	f000 fc73 	bl	8005f54 <_sbrk_r>
 800566e:	4581      	cmp	r9, r0
 8005670:	d13f      	bne.n	80056f2 <_malloc_r+0xe6>
 8005672:	6821      	ldr	r1, [r4, #0]
 8005674:	1a6d      	subs	r5, r5, r1
 8005676:	4629      	mov	r1, r5
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ffa7 	bl	80055cc <sbrk_aligned>
 800567e:	3001      	adds	r0, #1
 8005680:	d037      	beq.n	80056f2 <_malloc_r+0xe6>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	442b      	add	r3, r5
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	f8d8 3000 	ldr.w	r3, [r8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d038      	beq.n	8005702 <_malloc_r+0xf6>
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	42a2      	cmp	r2, r4
 8005694:	d12b      	bne.n	80056ee <_malloc_r+0xe2>
 8005696:	2200      	movs	r2, #0
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	e00f      	b.n	80056bc <_malloc_r+0xb0>
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	1b52      	subs	r2, r2, r5
 80056a0:	d41f      	bmi.n	80056e2 <_malloc_r+0xd6>
 80056a2:	2a0b      	cmp	r2, #11
 80056a4:	d917      	bls.n	80056d6 <_malloc_r+0xca>
 80056a6:	1961      	adds	r1, r4, r5
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	6025      	str	r5, [r4, #0]
 80056ac:	bf18      	it	ne
 80056ae:	6059      	strne	r1, [r3, #4]
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	bf08      	it	eq
 80056b4:	f8c8 1000 	streq.w	r1, [r8]
 80056b8:	5162      	str	r2, [r4, r5]
 80056ba:	604b      	str	r3, [r1, #4]
 80056bc:	4638      	mov	r0, r7
 80056be:	f104 060b 	add.w	r6, r4, #11
 80056c2:	f000 f829 	bl	8005718 <__malloc_unlock>
 80056c6:	f026 0607 	bic.w	r6, r6, #7
 80056ca:	1d23      	adds	r3, r4, #4
 80056cc:	1af2      	subs	r2, r6, r3
 80056ce:	d0ae      	beq.n	800562e <_malloc_r+0x22>
 80056d0:	1b9b      	subs	r3, r3, r6
 80056d2:	50a3      	str	r3, [r4, r2]
 80056d4:	e7ab      	b.n	800562e <_malloc_r+0x22>
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	6862      	ldr	r2, [r4, #4]
 80056da:	d1dd      	bne.n	8005698 <_malloc_r+0x8c>
 80056dc:	f8c8 2000 	str.w	r2, [r8]
 80056e0:	e7ec      	b.n	80056bc <_malloc_r+0xb0>
 80056e2:	4623      	mov	r3, r4
 80056e4:	6864      	ldr	r4, [r4, #4]
 80056e6:	e7ac      	b.n	8005642 <_malloc_r+0x36>
 80056e8:	4634      	mov	r4, r6
 80056ea:	6876      	ldr	r6, [r6, #4]
 80056ec:	e7b4      	b.n	8005658 <_malloc_r+0x4c>
 80056ee:	4613      	mov	r3, r2
 80056f0:	e7cc      	b.n	800568c <_malloc_r+0x80>
 80056f2:	230c      	movs	r3, #12
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4638      	mov	r0, r7
 80056f8:	f000 f80e 	bl	8005718 <__malloc_unlock>
 80056fc:	e797      	b.n	800562e <_malloc_r+0x22>
 80056fe:	6025      	str	r5, [r4, #0]
 8005700:	e7dc      	b.n	80056bc <_malloc_r+0xb0>
 8005702:	605b      	str	r3, [r3, #4]
 8005704:	deff      	udf	#255	; 0xff
 8005706:	bf00      	nop
 8005708:	20004c54 	.word	0x20004c54

0800570c <__malloc_lock>:
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <__malloc_lock+0x8>)
 800570e:	f7ff bf01 	b.w	8005514 <__retarget_lock_acquire_recursive>
 8005712:	bf00      	nop
 8005714:	20004c50 	.word	0x20004c50

08005718 <__malloc_unlock>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__malloc_unlock+0x8>)
 800571a:	f7ff befc 	b.w	8005516 <__retarget_lock_release_recursive>
 800571e:	bf00      	nop
 8005720:	20004c50 	.word	0x20004c50

08005724 <__sfputc_r>:
 8005724:	6893      	ldr	r3, [r2, #8]
 8005726:	3b01      	subs	r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	b410      	push	{r4}
 800572c:	6093      	str	r3, [r2, #8]
 800572e:	da08      	bge.n	8005742 <__sfputc_r+0x1e>
 8005730:	6994      	ldr	r4, [r2, #24]
 8005732:	42a3      	cmp	r3, r4
 8005734:	db01      	blt.n	800573a <__sfputc_r+0x16>
 8005736:	290a      	cmp	r1, #10
 8005738:	d103      	bne.n	8005742 <__sfputc_r+0x1e>
 800573a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800573e:	f000 bb73 	b.w	8005e28 <__swbuf_r>
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	1c58      	adds	r0, r3, #1
 8005746:	6010      	str	r0, [r2, #0]
 8005748:	7019      	strb	r1, [r3, #0]
 800574a:	4608      	mov	r0, r1
 800574c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005750:	4770      	bx	lr

08005752 <__sfputs_r>:
 8005752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005754:	4606      	mov	r6, r0
 8005756:	460f      	mov	r7, r1
 8005758:	4614      	mov	r4, r2
 800575a:	18d5      	adds	r5, r2, r3
 800575c:	42ac      	cmp	r4, r5
 800575e:	d101      	bne.n	8005764 <__sfputs_r+0x12>
 8005760:	2000      	movs	r0, #0
 8005762:	e007      	b.n	8005774 <__sfputs_r+0x22>
 8005764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005768:	463a      	mov	r2, r7
 800576a:	4630      	mov	r0, r6
 800576c:	f7ff ffda 	bl	8005724 <__sfputc_r>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d1f3      	bne.n	800575c <__sfputs_r+0xa>
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005778 <_vfiprintf_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	460d      	mov	r5, r1
 800577e:	b09d      	sub	sp, #116	; 0x74
 8005780:	4614      	mov	r4, r2
 8005782:	4698      	mov	r8, r3
 8005784:	4606      	mov	r6, r0
 8005786:	b118      	cbz	r0, 8005790 <_vfiprintf_r+0x18>
 8005788:	6a03      	ldr	r3, [r0, #32]
 800578a:	b90b      	cbnz	r3, 8005790 <_vfiprintf_r+0x18>
 800578c:	f7ff fd68 	bl	8005260 <__sinit>
 8005790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005792:	07d9      	lsls	r1, r3, #31
 8005794:	d405      	bmi.n	80057a2 <_vfiprintf_r+0x2a>
 8005796:	89ab      	ldrh	r3, [r5, #12]
 8005798:	059a      	lsls	r2, r3, #22
 800579a:	d402      	bmi.n	80057a2 <_vfiprintf_r+0x2a>
 800579c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800579e:	f7ff feb9 	bl	8005514 <__retarget_lock_acquire_recursive>
 80057a2:	89ab      	ldrh	r3, [r5, #12]
 80057a4:	071b      	lsls	r3, r3, #28
 80057a6:	d501      	bpl.n	80057ac <_vfiprintf_r+0x34>
 80057a8:	692b      	ldr	r3, [r5, #16]
 80057aa:	b99b      	cbnz	r3, 80057d4 <_vfiprintf_r+0x5c>
 80057ac:	4629      	mov	r1, r5
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 fb78 	bl	8005ea4 <__swsetup_r>
 80057b4:	b170      	cbz	r0, 80057d4 <_vfiprintf_r+0x5c>
 80057b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b8:	07dc      	lsls	r4, r3, #31
 80057ba:	d504      	bpl.n	80057c6 <_vfiprintf_r+0x4e>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	b01d      	add	sp, #116	; 0x74
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	0598      	lsls	r0, r3, #22
 80057ca:	d4f7      	bmi.n	80057bc <_vfiprintf_r+0x44>
 80057cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ce:	f7ff fea2 	bl	8005516 <__retarget_lock_release_recursive>
 80057d2:	e7f3      	b.n	80057bc <_vfiprintf_r+0x44>
 80057d4:	2300      	movs	r3, #0
 80057d6:	9309      	str	r3, [sp, #36]	; 0x24
 80057d8:	2320      	movs	r3, #32
 80057da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057de:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e2:	2330      	movs	r3, #48	; 0x30
 80057e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005998 <_vfiprintf_r+0x220>
 80057e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ec:	f04f 0901 	mov.w	r9, #1
 80057f0:	4623      	mov	r3, r4
 80057f2:	469a      	mov	sl, r3
 80057f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057f8:	b10a      	cbz	r2, 80057fe <_vfiprintf_r+0x86>
 80057fa:	2a25      	cmp	r2, #37	; 0x25
 80057fc:	d1f9      	bne.n	80057f2 <_vfiprintf_r+0x7a>
 80057fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005802:	d00b      	beq.n	800581c <_vfiprintf_r+0xa4>
 8005804:	465b      	mov	r3, fp
 8005806:	4622      	mov	r2, r4
 8005808:	4629      	mov	r1, r5
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ffa1 	bl	8005752 <__sfputs_r>
 8005810:	3001      	adds	r0, #1
 8005812:	f000 80a9 	beq.w	8005968 <_vfiprintf_r+0x1f0>
 8005816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005818:	445a      	add	r2, fp
 800581a:	9209      	str	r2, [sp, #36]	; 0x24
 800581c:	f89a 3000 	ldrb.w	r3, [sl]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80a1 	beq.w	8005968 <_vfiprintf_r+0x1f0>
 8005826:	2300      	movs	r3, #0
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005830:	f10a 0a01 	add.w	sl, sl, #1
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	9307      	str	r3, [sp, #28]
 8005838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800583c:	931a      	str	r3, [sp, #104]	; 0x68
 800583e:	4654      	mov	r4, sl
 8005840:	2205      	movs	r2, #5
 8005842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005846:	4854      	ldr	r0, [pc, #336]	; (8005998 <_vfiprintf_r+0x220>)
 8005848:	f7fa fcca 	bl	80001e0 <memchr>
 800584c:	9a04      	ldr	r2, [sp, #16]
 800584e:	b9d8      	cbnz	r0, 8005888 <_vfiprintf_r+0x110>
 8005850:	06d1      	lsls	r1, r2, #27
 8005852:	bf44      	itt	mi
 8005854:	2320      	movmi	r3, #32
 8005856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800585a:	0713      	lsls	r3, r2, #28
 800585c:	bf44      	itt	mi
 800585e:	232b      	movmi	r3, #43	; 0x2b
 8005860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005864:	f89a 3000 	ldrb.w	r3, [sl]
 8005868:	2b2a      	cmp	r3, #42	; 0x2a
 800586a:	d015      	beq.n	8005898 <_vfiprintf_r+0x120>
 800586c:	9a07      	ldr	r2, [sp, #28]
 800586e:	4654      	mov	r4, sl
 8005870:	2000      	movs	r0, #0
 8005872:	f04f 0c0a 	mov.w	ip, #10
 8005876:	4621      	mov	r1, r4
 8005878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800587c:	3b30      	subs	r3, #48	; 0x30
 800587e:	2b09      	cmp	r3, #9
 8005880:	d94d      	bls.n	800591e <_vfiprintf_r+0x1a6>
 8005882:	b1b0      	cbz	r0, 80058b2 <_vfiprintf_r+0x13a>
 8005884:	9207      	str	r2, [sp, #28]
 8005886:	e014      	b.n	80058b2 <_vfiprintf_r+0x13a>
 8005888:	eba0 0308 	sub.w	r3, r0, r8
 800588c:	fa09 f303 	lsl.w	r3, r9, r3
 8005890:	4313      	orrs	r3, r2
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	46a2      	mov	sl, r4
 8005896:	e7d2      	b.n	800583e <_vfiprintf_r+0xc6>
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	1d19      	adds	r1, r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	9103      	str	r1, [sp, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bfbb      	ittet	lt
 80058a4:	425b      	neglt	r3, r3
 80058a6:	f042 0202 	orrlt.w	r2, r2, #2
 80058aa:	9307      	strge	r3, [sp, #28]
 80058ac:	9307      	strlt	r3, [sp, #28]
 80058ae:	bfb8      	it	lt
 80058b0:	9204      	strlt	r2, [sp, #16]
 80058b2:	7823      	ldrb	r3, [r4, #0]
 80058b4:	2b2e      	cmp	r3, #46	; 0x2e
 80058b6:	d10c      	bne.n	80058d2 <_vfiprintf_r+0x15a>
 80058b8:	7863      	ldrb	r3, [r4, #1]
 80058ba:	2b2a      	cmp	r3, #42	; 0x2a
 80058bc:	d134      	bne.n	8005928 <_vfiprintf_r+0x1b0>
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	1d1a      	adds	r2, r3, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	9203      	str	r2, [sp, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ce:	3402      	adds	r4, #2
 80058d0:	9305      	str	r3, [sp, #20]
 80058d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059a8 <_vfiprintf_r+0x230>
 80058d6:	7821      	ldrb	r1, [r4, #0]
 80058d8:	2203      	movs	r2, #3
 80058da:	4650      	mov	r0, sl
 80058dc:	f7fa fc80 	bl	80001e0 <memchr>
 80058e0:	b138      	cbz	r0, 80058f2 <_vfiprintf_r+0x17a>
 80058e2:	9b04      	ldr	r3, [sp, #16]
 80058e4:	eba0 000a 	sub.w	r0, r0, sl
 80058e8:	2240      	movs	r2, #64	; 0x40
 80058ea:	4082      	lsls	r2, r0
 80058ec:	4313      	orrs	r3, r2
 80058ee:	3401      	adds	r4, #1
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4829      	ldr	r0, [pc, #164]	; (800599c <_vfiprintf_r+0x224>)
 80058f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058fc:	2206      	movs	r2, #6
 80058fe:	f7fa fc6f 	bl	80001e0 <memchr>
 8005902:	2800      	cmp	r0, #0
 8005904:	d03f      	beq.n	8005986 <_vfiprintf_r+0x20e>
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <_vfiprintf_r+0x228>)
 8005908:	bb1b      	cbnz	r3, 8005952 <_vfiprintf_r+0x1da>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	3307      	adds	r3, #7
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	3308      	adds	r3, #8
 8005914:	9303      	str	r3, [sp, #12]
 8005916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005918:	443b      	add	r3, r7
 800591a:	9309      	str	r3, [sp, #36]	; 0x24
 800591c:	e768      	b.n	80057f0 <_vfiprintf_r+0x78>
 800591e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005922:	460c      	mov	r4, r1
 8005924:	2001      	movs	r0, #1
 8005926:	e7a6      	b.n	8005876 <_vfiprintf_r+0xfe>
 8005928:	2300      	movs	r3, #0
 800592a:	3401      	adds	r4, #1
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 0c0a 	mov.w	ip, #10
 8005934:	4620      	mov	r0, r4
 8005936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800593a:	3a30      	subs	r2, #48	; 0x30
 800593c:	2a09      	cmp	r2, #9
 800593e:	d903      	bls.n	8005948 <_vfiprintf_r+0x1d0>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0c6      	beq.n	80058d2 <_vfiprintf_r+0x15a>
 8005944:	9105      	str	r1, [sp, #20]
 8005946:	e7c4      	b.n	80058d2 <_vfiprintf_r+0x15a>
 8005948:	fb0c 2101 	mla	r1, ip, r1, r2
 800594c:	4604      	mov	r4, r0
 800594e:	2301      	movs	r3, #1
 8005950:	e7f0      	b.n	8005934 <_vfiprintf_r+0x1bc>
 8005952:	ab03      	add	r3, sp, #12
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	462a      	mov	r2, r5
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <_vfiprintf_r+0x22c>)
 800595a:	a904      	add	r1, sp, #16
 800595c:	4630      	mov	r0, r6
 800595e:	f3af 8000 	nop.w
 8005962:	4607      	mov	r7, r0
 8005964:	1c78      	adds	r0, r7, #1
 8005966:	d1d6      	bne.n	8005916 <_vfiprintf_r+0x19e>
 8005968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d405      	bmi.n	800597a <_vfiprintf_r+0x202>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	059a      	lsls	r2, r3, #22
 8005972:	d402      	bmi.n	800597a <_vfiprintf_r+0x202>
 8005974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005976:	f7ff fdce 	bl	8005516 <__retarget_lock_release_recursive>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	f53f af1d 	bmi.w	80057bc <_vfiprintf_r+0x44>
 8005982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005984:	e71c      	b.n	80057c0 <_vfiprintf_r+0x48>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <_vfiprintf_r+0x22c>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4630      	mov	r0, r6
 8005992:	f000 f879 	bl	8005a88 <_printf_i>
 8005996:	e7e4      	b.n	8005962 <_vfiprintf_r+0x1ea>
 8005998:	08006148 	.word	0x08006148
 800599c:	08006152 	.word	0x08006152
 80059a0:	00000000 	.word	0x00000000
 80059a4:	08005753 	.word	0x08005753
 80059a8:	0800614e 	.word	0x0800614e

080059ac <_printf_common>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	4616      	mov	r6, r2
 80059b2:	4699      	mov	r9, r3
 80059b4:	688a      	ldr	r2, [r1, #8]
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059bc:	4293      	cmp	r3, r2
 80059be:	bfb8      	it	lt
 80059c0:	4613      	movlt	r3, r2
 80059c2:	6033      	str	r3, [r6, #0]
 80059c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059c8:	4607      	mov	r7, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	b10a      	cbz	r2, 80059d2 <_printf_common+0x26>
 80059ce:	3301      	adds	r3, #1
 80059d0:	6033      	str	r3, [r6, #0]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	0699      	lsls	r1, r3, #26
 80059d6:	bf42      	ittt	mi
 80059d8:	6833      	ldrmi	r3, [r6, #0]
 80059da:	3302      	addmi	r3, #2
 80059dc:	6033      	strmi	r3, [r6, #0]
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	f015 0506 	ands.w	r5, r5, #6
 80059e4:	d106      	bne.n	80059f4 <_printf_common+0x48>
 80059e6:	f104 0a19 	add.w	sl, r4, #25
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	6832      	ldr	r2, [r6, #0]
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	dc26      	bgt.n	8005a42 <_printf_common+0x96>
 80059f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059f8:	1e13      	subs	r3, r2, #0
 80059fa:	6822      	ldr	r2, [r4, #0]
 80059fc:	bf18      	it	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	0692      	lsls	r2, r2, #26
 8005a02:	d42b      	bmi.n	8005a5c <_printf_common+0xb0>
 8005a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a08:	4649      	mov	r1, r9
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	47c0      	blx	r8
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d01e      	beq.n	8005a50 <_printf_common+0xa4>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	f003 0306 	and.w	r3, r3, #6
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf02      	ittt	eq
 8005a1e:	68e5      	ldreq	r5, [r4, #12]
 8005a20:	6833      	ldreq	r3, [r6, #0]
 8005a22:	1aed      	subeq	r5, r5, r3
 8005a24:	68a3      	ldr	r3, [r4, #8]
 8005a26:	bf0c      	ite	eq
 8005a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a2c:	2500      	movne	r5, #0
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	bfc4      	itt	gt
 8005a32:	1a9b      	subgt	r3, r3, r2
 8005a34:	18ed      	addgt	r5, r5, r3
 8005a36:	2600      	movs	r6, #0
 8005a38:	341a      	adds	r4, #26
 8005a3a:	42b5      	cmp	r5, r6
 8005a3c:	d11a      	bne.n	8005a74 <_printf_common+0xc8>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e008      	b.n	8005a54 <_printf_common+0xa8>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4652      	mov	r2, sl
 8005a46:	4649      	mov	r1, r9
 8005a48:	4638      	mov	r0, r7
 8005a4a:	47c0      	blx	r8
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d103      	bne.n	8005a58 <_printf_common+0xac>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	3501      	adds	r5, #1
 8005a5a:	e7c6      	b.n	80059ea <_printf_common+0x3e>
 8005a5c:	18e1      	adds	r1, r4, r3
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	2030      	movs	r0, #48	; 0x30
 8005a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a66:	4422      	add	r2, r4
 8005a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a70:	3302      	adds	r3, #2
 8005a72:	e7c7      	b.n	8005a04 <_printf_common+0x58>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4622      	mov	r2, r4
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d0e6      	beq.n	8005a50 <_printf_common+0xa4>
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7d9      	b.n	8005a3a <_printf_common+0x8e>
	...

08005a88 <_printf_i>:
 8005a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	7e0f      	ldrb	r7, [r1, #24]
 8005a8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a90:	2f78      	cmp	r7, #120	; 0x78
 8005a92:	4691      	mov	r9, r2
 8005a94:	4680      	mov	r8, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	469a      	mov	sl, r3
 8005a9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a9e:	d807      	bhi.n	8005ab0 <_printf_i+0x28>
 8005aa0:	2f62      	cmp	r7, #98	; 0x62
 8005aa2:	d80a      	bhi.n	8005aba <_printf_i+0x32>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	f000 80d4 	beq.w	8005c52 <_printf_i+0x1ca>
 8005aaa:	2f58      	cmp	r7, #88	; 0x58
 8005aac:	f000 80c0 	beq.w	8005c30 <_printf_i+0x1a8>
 8005ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ab8:	e03a      	b.n	8005b30 <_printf_i+0xa8>
 8005aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005abe:	2b15      	cmp	r3, #21
 8005ac0:	d8f6      	bhi.n	8005ab0 <_printf_i+0x28>
 8005ac2:	a101      	add	r1, pc, #4	; (adr r1, 8005ac8 <_printf_i+0x40>)
 8005ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005ab1 	.word	0x08005ab1
 8005ad4:	08005ab1 	.word	0x08005ab1
 8005ad8:	08005ab1 	.word	0x08005ab1
 8005adc:	08005ab1 	.word	0x08005ab1
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005ab1 	.word	0x08005ab1
 8005ae8:	08005ab1 	.word	0x08005ab1
 8005aec:	08005ab1 	.word	0x08005ab1
 8005af0:	08005ab1 	.word	0x08005ab1
 8005af4:	08005c39 	.word	0x08005c39
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005bf3 	.word	0x08005bf3
 8005b00:	08005ab1 	.word	0x08005ab1
 8005b04:	08005ab1 	.word	0x08005ab1
 8005b08:	08005c5b 	.word	0x08005c5b
 8005b0c:	08005ab1 	.word	0x08005ab1
 8005b10:	08005b61 	.word	0x08005b61
 8005b14:	08005ab1 	.word	0x08005ab1
 8005b18:	08005ab1 	.word	0x08005ab1
 8005b1c:	08005bfb 	.word	0x08005bfb
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	602a      	str	r2, [r5, #0]
 8005b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b30:	2301      	movs	r3, #1
 8005b32:	e09f      	b.n	8005c74 <_printf_i+0x1ec>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	0607      	lsls	r7, r0, #24
 8005b3a:	f103 0104 	add.w	r1, r3, #4
 8005b3e:	6029      	str	r1, [r5, #0]
 8005b40:	d501      	bpl.n	8005b46 <_printf_i+0xbe>
 8005b42:	681e      	ldr	r6, [r3, #0]
 8005b44:	e003      	b.n	8005b4e <_printf_i+0xc6>
 8005b46:	0646      	lsls	r6, r0, #25
 8005b48:	d5fb      	bpl.n	8005b42 <_printf_i+0xba>
 8005b4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b4e:	2e00      	cmp	r6, #0
 8005b50:	da03      	bge.n	8005b5a <_printf_i+0xd2>
 8005b52:	232d      	movs	r3, #45	; 0x2d
 8005b54:	4276      	negs	r6, r6
 8005b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5a:	485a      	ldr	r0, [pc, #360]	; (8005cc4 <_printf_i+0x23c>)
 8005b5c:	230a      	movs	r3, #10
 8005b5e:	e012      	b.n	8005b86 <_printf_i+0xfe>
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	1d19      	adds	r1, r3, #4
 8005b66:	6029      	str	r1, [r5, #0]
 8005b68:	0605      	lsls	r5, r0, #24
 8005b6a:	d501      	bpl.n	8005b70 <_printf_i+0xe8>
 8005b6c:	681e      	ldr	r6, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <_printf_i+0xee>
 8005b70:	0641      	lsls	r1, r0, #25
 8005b72:	d5fb      	bpl.n	8005b6c <_printf_i+0xe4>
 8005b74:	881e      	ldrh	r6, [r3, #0]
 8005b76:	4853      	ldr	r0, [pc, #332]	; (8005cc4 <_printf_i+0x23c>)
 8005b78:	2f6f      	cmp	r7, #111	; 0x6f
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2308      	moveq	r3, #8
 8005b7e:	230a      	movne	r3, #10
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b86:	6865      	ldr	r5, [r4, #4]
 8005b88:	60a5      	str	r5, [r4, #8]
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	bfa2      	ittt	ge
 8005b8e:	6821      	ldrge	r1, [r4, #0]
 8005b90:	f021 0104 	bicge.w	r1, r1, #4
 8005b94:	6021      	strge	r1, [r4, #0]
 8005b96:	b90e      	cbnz	r6, 8005b9c <_printf_i+0x114>
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	d04b      	beq.n	8005c34 <_printf_i+0x1ac>
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ba6:	5dc7      	ldrb	r7, [r0, r7]
 8005ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bac:	4637      	mov	r7, r6
 8005bae:	42bb      	cmp	r3, r7
 8005bb0:	460e      	mov	r6, r1
 8005bb2:	d9f4      	bls.n	8005b9e <_printf_i+0x116>
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10b      	bne.n	8005bd0 <_printf_i+0x148>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	07de      	lsls	r6, r3, #31
 8005bbc:	d508      	bpl.n	8005bd0 <_printf_i+0x148>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	6861      	ldr	r1, [r4, #4]
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	bfde      	ittt	le
 8005bc6:	2330      	movle	r3, #48	; 0x30
 8005bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bd0:	1b52      	subs	r2, r2, r5
 8005bd2:	6122      	str	r2, [r4, #16]
 8005bd4:	f8cd a000 	str.w	sl, [sp]
 8005bd8:	464b      	mov	r3, r9
 8005bda:	aa03      	add	r2, sp, #12
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7ff fee4 	bl	80059ac <_printf_common>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d14a      	bne.n	8005c7e <_printf_i+0x1f6>
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b004      	add	sp, #16
 8005bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f043 0320 	orr.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	4833      	ldr	r0, [pc, #204]	; (8005cc8 <_printf_i+0x240>)
 8005bfc:	2778      	movs	r7, #120	; 0x78
 8005bfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	6829      	ldr	r1, [r5, #0]
 8005c06:	061f      	lsls	r7, r3, #24
 8005c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c0c:	d402      	bmi.n	8005c14 <_printf_i+0x18c>
 8005c0e:	065f      	lsls	r7, r3, #25
 8005c10:	bf48      	it	mi
 8005c12:	b2b6      	uxthmi	r6, r6
 8005c14:	07df      	lsls	r7, r3, #31
 8005c16:	bf48      	it	mi
 8005c18:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	bf48      	it	mi
 8005c20:	6023      	strmi	r3, [r4, #0]
 8005c22:	b91e      	cbnz	r6, 8005c2c <_printf_i+0x1a4>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	e7a7      	b.n	8005b80 <_printf_i+0xf8>
 8005c30:	4824      	ldr	r0, [pc, #144]	; (8005cc4 <_printf_i+0x23c>)
 8005c32:	e7e4      	b.n	8005bfe <_printf_i+0x176>
 8005c34:	4615      	mov	r5, r2
 8005c36:	e7bd      	b.n	8005bb4 <_printf_i+0x12c>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	6826      	ldr	r6, [r4, #0]
 8005c3c:	6961      	ldr	r1, [r4, #20]
 8005c3e:	1d18      	adds	r0, r3, #4
 8005c40:	6028      	str	r0, [r5, #0]
 8005c42:	0635      	lsls	r5, r6, #24
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0x1c4>
 8005c48:	6019      	str	r1, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0x1ca>
 8005c4c:	0670      	lsls	r0, r6, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0x1c0>
 8005c50:	8019      	strh	r1, [r3, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	4615      	mov	r5, r2
 8005c58:	e7bc      	b.n	8005bd4 <_printf_i+0x14c>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	602a      	str	r2, [r5, #0]
 8005c60:	681d      	ldr	r5, [r3, #0]
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4628      	mov	r0, r5
 8005c68:	f7fa faba 	bl	80001e0 <memchr>
 8005c6c:	b108      	cbz	r0, 8005c72 <_printf_i+0x1ea>
 8005c6e:	1b40      	subs	r0, r0, r5
 8005c70:	6060      	str	r0, [r4, #4]
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2300      	movs	r3, #0
 8005c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c7c:	e7aa      	b.n	8005bd4 <_printf_i+0x14c>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	462a      	mov	r2, r5
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d0ad      	beq.n	8005be8 <_printf_i+0x160>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	d413      	bmi.n	8005cba <_printf_i+0x232>
 8005c92:	68e0      	ldr	r0, [r4, #12]
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	4298      	cmp	r0, r3
 8005c98:	bfb8      	it	lt
 8005c9a:	4618      	movlt	r0, r3
 8005c9c:	e7a6      	b.n	8005bec <_printf_i+0x164>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d09d      	beq.n	8005be8 <_printf_i+0x160>
 8005cac:	3501      	adds	r5, #1
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	9903      	ldr	r1, [sp, #12]
 8005cb2:	1a5b      	subs	r3, r3, r1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dcf2      	bgt.n	8005c9e <_printf_i+0x216>
 8005cb8:	e7eb      	b.n	8005c92 <_printf_i+0x20a>
 8005cba:	2500      	movs	r5, #0
 8005cbc:	f104 0619 	add.w	r6, r4, #25
 8005cc0:	e7f5      	b.n	8005cae <_printf_i+0x226>
 8005cc2:	bf00      	nop
 8005cc4:	08006159 	.word	0x08006159
 8005cc8:	0800616a 	.word	0x0800616a

08005ccc <__sflush_r>:
 8005ccc:	898a      	ldrh	r2, [r1, #12]
 8005cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	0710      	lsls	r0, r2, #28
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	d458      	bmi.n	8005d8c <__sflush_r+0xc0>
 8005cda:	684b      	ldr	r3, [r1, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dc05      	bgt.n	8005cec <__sflush_r+0x20>
 8005ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc02      	bgt.n	8005cec <__sflush_r+0x20>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	d0f9      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cf8:	682f      	ldr	r7, [r5, #0]
 8005cfa:	6a21      	ldr	r1, [r4, #32]
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	d032      	beq.n	8005d66 <__sflush_r+0x9a>
 8005d00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	075a      	lsls	r2, r3, #29
 8005d06:	d505      	bpl.n	8005d14 <__sflush_r+0x48>
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	1ac0      	subs	r0, r0, r3
 8005d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d0e:	b10b      	cbz	r3, 8005d14 <__sflush_r+0x48>
 8005d10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d12:	1ac0      	subs	r0, r0, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	4602      	mov	r2, r0
 8005d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d1a:	6a21      	ldr	r1, [r4, #32]
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b0      	blx	r6
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	d106      	bne.n	8005d34 <__sflush_r+0x68>
 8005d26:	6829      	ldr	r1, [r5, #0]
 8005d28:	291d      	cmp	r1, #29
 8005d2a:	d82b      	bhi.n	8005d84 <__sflush_r+0xb8>
 8005d2c:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <__sflush_r+0x108>)
 8005d2e:	410a      	asrs	r2, r1
 8005d30:	07d6      	lsls	r6, r2, #31
 8005d32:	d427      	bmi.n	8005d84 <__sflush_r+0xb8>
 8005d34:	2200      	movs	r2, #0
 8005d36:	6062      	str	r2, [r4, #4]
 8005d38:	04d9      	lsls	r1, r3, #19
 8005d3a:	6922      	ldr	r2, [r4, #16]
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	d504      	bpl.n	8005d4a <__sflush_r+0x7e>
 8005d40:	1c42      	adds	r2, r0, #1
 8005d42:	d101      	bne.n	8005d48 <__sflush_r+0x7c>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b903      	cbnz	r3, 8005d4a <__sflush_r+0x7e>
 8005d48:	6560      	str	r0, [r4, #84]	; 0x54
 8005d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4c:	602f      	str	r7, [r5, #0]
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d0c9      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d56:	4299      	cmp	r1, r3
 8005d58:	d002      	beq.n	8005d60 <__sflush_r+0x94>
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f7ff fbea 	bl	8005534 <_free_r>
 8005d60:	2000      	movs	r0, #0
 8005d62:	6360      	str	r0, [r4, #52]	; 0x34
 8005d64:	e7c0      	b.n	8005ce8 <__sflush_r+0x1c>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b0      	blx	r6
 8005d6c:	1c41      	adds	r1, r0, #1
 8005d6e:	d1c8      	bne.n	8005d02 <__sflush_r+0x36>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c5      	beq.n	8005d02 <__sflush_r+0x36>
 8005d76:	2b1d      	cmp	r3, #29
 8005d78:	d001      	beq.n	8005d7e <__sflush_r+0xb2>
 8005d7a:	2b16      	cmp	r3, #22
 8005d7c:	d101      	bne.n	8005d82 <__sflush_r+0xb6>
 8005d7e:	602f      	str	r7, [r5, #0]
 8005d80:	e7b1      	b.n	8005ce6 <__sflush_r+0x1a>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	e7ad      	b.n	8005ce8 <__sflush_r+0x1c>
 8005d8c:	690f      	ldr	r7, [r1, #16]
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d0a9      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005d92:	0793      	lsls	r3, r2, #30
 8005d94:	680e      	ldr	r6, [r1, #0]
 8005d96:	bf08      	it	eq
 8005d98:	694b      	ldreq	r3, [r1, #20]
 8005d9a:	600f      	str	r7, [r1, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	2300      	movne	r3, #0
 8005da0:	eba6 0807 	sub.w	r8, r6, r7
 8005da4:	608b      	str	r3, [r1, #8]
 8005da6:	f1b8 0f00 	cmp.w	r8, #0
 8005daa:	dd9c      	ble.n	8005ce6 <__sflush_r+0x1a>
 8005dac:	6a21      	ldr	r1, [r4, #32]
 8005dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005db0:	4643      	mov	r3, r8
 8005db2:	463a      	mov	r2, r7
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b0      	blx	r6
 8005db8:	2800      	cmp	r0, #0
 8005dba:	dc06      	bgt.n	8005dca <__sflush_r+0xfe>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	e78e      	b.n	8005ce8 <__sflush_r+0x1c>
 8005dca:	4407      	add	r7, r0
 8005dcc:	eba8 0800 	sub.w	r8, r8, r0
 8005dd0:	e7e9      	b.n	8005da6 <__sflush_r+0xda>
 8005dd2:	bf00      	nop
 8005dd4:	dfbffffe 	.word	0xdfbffffe

08005dd8 <_fflush_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	690b      	ldr	r3, [r1, #16]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	b913      	cbnz	r3, 8005de8 <_fflush_r+0x10>
 8005de2:	2500      	movs	r5, #0
 8005de4:	4628      	mov	r0, r5
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	b118      	cbz	r0, 8005df2 <_fflush_r+0x1a>
 8005dea:	6a03      	ldr	r3, [r0, #32]
 8005dec:	b90b      	cbnz	r3, 8005df2 <_fflush_r+0x1a>
 8005dee:	f7ff fa37 	bl	8005260 <__sinit>
 8005df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f3      	beq.n	8005de2 <_fflush_r+0xa>
 8005dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dfc:	07d0      	lsls	r0, r2, #31
 8005dfe:	d404      	bmi.n	8005e0a <_fflush_r+0x32>
 8005e00:	0599      	lsls	r1, r3, #22
 8005e02:	d402      	bmi.n	8005e0a <_fflush_r+0x32>
 8005e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e06:	f7ff fb85 	bl	8005514 <__retarget_lock_acquire_recursive>
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	f7ff ff5d 	bl	8005ccc <__sflush_r>
 8005e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e14:	07da      	lsls	r2, r3, #31
 8005e16:	4605      	mov	r5, r0
 8005e18:	d4e4      	bmi.n	8005de4 <_fflush_r+0xc>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	059b      	lsls	r3, r3, #22
 8005e1e:	d4e1      	bmi.n	8005de4 <_fflush_r+0xc>
 8005e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e22:	f7ff fb78 	bl	8005516 <__retarget_lock_release_recursive>
 8005e26:	e7dd      	b.n	8005de4 <_fflush_r+0xc>

08005e28 <__swbuf_r>:
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2a:	460e      	mov	r6, r1
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	4605      	mov	r5, r0
 8005e30:	b118      	cbz	r0, 8005e3a <__swbuf_r+0x12>
 8005e32:	6a03      	ldr	r3, [r0, #32]
 8005e34:	b90b      	cbnz	r3, 8005e3a <__swbuf_r+0x12>
 8005e36:	f7ff fa13 	bl	8005260 <__sinit>
 8005e3a:	69a3      	ldr	r3, [r4, #24]
 8005e3c:	60a3      	str	r3, [r4, #8]
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	071a      	lsls	r2, r3, #28
 8005e42:	d525      	bpl.n	8005e90 <__swbuf_r+0x68>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	b31b      	cbz	r3, 8005e90 <__swbuf_r+0x68>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	6922      	ldr	r2, [r4, #16]
 8005e4c:	1a98      	subs	r0, r3, r2
 8005e4e:	6963      	ldr	r3, [r4, #20]
 8005e50:	b2f6      	uxtb	r6, r6
 8005e52:	4283      	cmp	r3, r0
 8005e54:	4637      	mov	r7, r6
 8005e56:	dc04      	bgt.n	8005e62 <__swbuf_r+0x3a>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f7ff ffbc 	bl	8005dd8 <_fflush_r>
 8005e60:	b9e0      	cbnz	r0, 8005e9c <__swbuf_r+0x74>
 8005e62:	68a3      	ldr	r3, [r4, #8]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	60a3      	str	r3, [r4, #8]
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	6022      	str	r2, [r4, #0]
 8005e6e:	701e      	strb	r6, [r3, #0]
 8005e70:	6962      	ldr	r2, [r4, #20]
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d004      	beq.n	8005e82 <__swbuf_r+0x5a>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	07db      	lsls	r3, r3, #31
 8005e7c:	d506      	bpl.n	8005e8c <__swbuf_r+0x64>
 8005e7e:	2e0a      	cmp	r6, #10
 8005e80:	d104      	bne.n	8005e8c <__swbuf_r+0x64>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f7ff ffa7 	bl	8005dd8 <_fflush_r>
 8005e8a:	b938      	cbnz	r0, 8005e9c <__swbuf_r+0x74>
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	4621      	mov	r1, r4
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 f806 	bl	8005ea4 <__swsetup_r>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d0d5      	beq.n	8005e48 <__swbuf_r+0x20>
 8005e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea0:	e7f4      	b.n	8005e8c <__swbuf_r+0x64>
	...

08005ea4 <__swsetup_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	; (8005f50 <__swsetup_r+0xac>)
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	460c      	mov	r4, r1
 8005eae:	b118      	cbz	r0, 8005eb8 <__swsetup_r+0x14>
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <__swsetup_r+0x14>
 8005eb4:	f7ff f9d4 	bl	8005260 <__sinit>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebe:	0718      	lsls	r0, r3, #28
 8005ec0:	d422      	bmi.n	8005f08 <__swsetup_r+0x64>
 8005ec2:	06d9      	lsls	r1, r3, #27
 8005ec4:	d407      	bmi.n	8005ed6 <__swsetup_r+0x32>
 8005ec6:	2309      	movs	r3, #9
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	e034      	b.n	8005f40 <__swsetup_r+0x9c>
 8005ed6:	0758      	lsls	r0, r3, #29
 8005ed8:	d512      	bpl.n	8005f00 <__swsetup_r+0x5c>
 8005eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005edc:	b141      	cbz	r1, 8005ef0 <__swsetup_r+0x4c>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__swsetup_r+0x48>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f7ff fb24 	bl	8005534 <_free_r>
 8005eec:	2300      	movs	r3, #0
 8005eee:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6063      	str	r3, [r4, #4]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0308 	orr.w	r3, r3, #8
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	b94b      	cbnz	r3, 8005f20 <__swsetup_r+0x7c>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f16:	d003      	beq.n	8005f20 <__swsetup_r+0x7c>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f850 	bl	8005fc0 <__smakebuf_r>
 8005f20:	89a0      	ldrh	r0, [r4, #12]
 8005f22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f26:	f010 0301 	ands.w	r3, r0, #1
 8005f2a:	d00a      	beq.n	8005f42 <__swsetup_r+0x9e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60a3      	str	r3, [r4, #8]
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	425b      	negs	r3, r3
 8005f34:	61a3      	str	r3, [r4, #24]
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	b943      	cbnz	r3, 8005f4c <__swsetup_r+0xa8>
 8005f3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f3e:	d1c4      	bne.n	8005eca <__swsetup_r+0x26>
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	0781      	lsls	r1, r0, #30
 8005f44:	bf58      	it	pl
 8005f46:	6963      	ldrpl	r3, [r4, #20]
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	e7f4      	b.n	8005f36 <__swsetup_r+0x92>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f7      	b.n	8005f40 <__swsetup_r+0x9c>
 8005f50:	20000068 	.word	0x20000068

08005f54 <_sbrk_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d06      	ldr	r5, [pc, #24]	; (8005f70 <_sbrk_r+0x1c>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fa fe32 	bl	8000bc8 <_sbrk>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_sbrk_r+0x1a>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_sbrk_r+0x1a>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	20004c4c 	.word	0x20004c4c

08005f74 <__swhatbuf_r>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	b096      	sub	sp, #88	; 0x58
 8005f80:	4615      	mov	r5, r2
 8005f82:	461e      	mov	r6, r3
 8005f84:	da0d      	bge.n	8005fa2 <__swhatbuf_r+0x2e>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	bf0c      	ite	eq
 8005f92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f96:	2340      	movne	r3, #64	; 0x40
 8005f98:	2000      	movs	r0, #0
 8005f9a:	6031      	str	r1, [r6, #0]
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	b016      	add	sp, #88	; 0x58
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f000 f848 	bl	8006038 <_fstat_r>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dbec      	blt.n	8005f86 <__swhatbuf_r+0x12>
 8005fac:	9901      	ldr	r1, [sp, #4]
 8005fae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005fb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005fb6:	4259      	negs	r1, r3
 8005fb8:	4159      	adcs	r1, r3
 8005fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fbe:	e7eb      	b.n	8005f98 <__swhatbuf_r+0x24>

08005fc0 <__smakebuf_r>:
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fc4:	079d      	lsls	r5, r3, #30
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	d507      	bpl.n	8005fdc <__smakebuf_r+0x1c>
 8005fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	6163      	str	r3, [r4, #20]
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	ab01      	add	r3, sp, #4
 8005fde:	466a      	mov	r2, sp
 8005fe0:	f7ff ffc8 	bl	8005f74 <__swhatbuf_r>
 8005fe4:	9900      	ldr	r1, [sp, #0]
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fb0f 	bl	800560c <_malloc_r>
 8005fee:	b948      	cbnz	r0, 8006004 <__smakebuf_r+0x44>
 8005ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff4:	059a      	lsls	r2, r3, #22
 8005ff6:	d4ef      	bmi.n	8005fd8 <__smakebuf_r+0x18>
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	f043 0302 	orr.w	r3, r3, #2
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	e7e3      	b.n	8005fcc <__smakebuf_r+0xc>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	6020      	str	r0, [r4, #0]
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	81a3      	strh	r3, [r4, #12]
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	6163      	str	r3, [r4, #20]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	6120      	str	r0, [r4, #16]
 8006016:	b15b      	cbz	r3, 8006030 <__smakebuf_r+0x70>
 8006018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800601c:	4630      	mov	r0, r6
 800601e:	f000 f81d 	bl	800605c <_isatty_r>
 8006022:	b128      	cbz	r0, 8006030 <__smakebuf_r+0x70>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	431d      	orrs	r5, r3
 8006034:	81a5      	strh	r5, [r4, #12]
 8006036:	e7cf      	b.n	8005fd8 <__smakebuf_r+0x18>

08006038 <_fstat_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d07      	ldr	r5, [pc, #28]	; (8006058 <_fstat_r+0x20>)
 800603c:	2300      	movs	r3, #0
 800603e:	4604      	mov	r4, r0
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	f7fa fd96 	bl	8000b76 <_fstat>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d102      	bne.n	8006054 <_fstat_r+0x1c>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	b103      	cbz	r3, 8006054 <_fstat_r+0x1c>
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	bd38      	pop	{r3, r4, r5, pc}
 8006056:	bf00      	nop
 8006058:	20004c4c 	.word	0x20004c4c

0800605c <_isatty_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	4d06      	ldr	r5, [pc, #24]	; (8006078 <_isatty_r+0x1c>)
 8006060:	2300      	movs	r3, #0
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	f7fa fd95 	bl	8000b96 <_isatty>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_isatty_r+0x1a>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_isatty_r+0x1a>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	20004c4c 	.word	0x20004c4c

0800607c <_init>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr

08006088 <_fini>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	bf00      	nop
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr
