
15-Working_With_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa0  08005fa0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  2000006c  08006014  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08006014  00024c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179b3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033fc  00000000  00000000  00037a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd4  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000440d  00000000  00000000  0003d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001657b  00000000  00000000  000416d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009958a  00000000  00000000  00057c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005db4  00000000  00000000  000f11e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000f6f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ea0 	.word	0x08005ea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005ea0 	.word	0x08005ea0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

QueueHandle_t yearQueue;		//Queue handle


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  HAL_Init();	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 8000582:	f000 fb5d 	bl	8000c40 <HAL_Init>
  SystemClock_Config(); 	/* Configure the system clock */
 8000586:	f000 f89f 	bl	80006c8 <SystemClock_Config>
  MX_GPIO_Init();	/* Initialize all configured peripherals */
 800058a:	f000 f933 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f907 	bl	80007a0 <MX_USART2_UART_Init>


  yearQueue=xQueueCreate(5,sizeof(uint32_t));		//Queue creation
 8000592:	2200      	movs	r2, #0
 8000594:	2104      	movs	r1, #4
 8000596:	2005      	movs	r0, #5
 8000598:	f002 f9de 	bl	8002958 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <main+0x54>)
 80005a0:	6013      	str	r3, [r2, #0]

  xTaskCreate(SenderTask,				//Task1 creation
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0x58>)
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	490a      	ldr	r1, [pc, #40]	; (80005d8 <main+0x5c>)
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x60>)
 80005b2:	f002 fe74 	bl	800329e <xTaskCreate>
		  100,
		  NULL,
		  1,
		  &sender_handle);

  xTaskCreate(ReceiverTask,				//Task2 creation
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <main+0x64>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2264      	movs	r2, #100	; 0x64
 80005c2:	4908      	ldr	r1, [pc, #32]	; (80005e4 <main+0x68>)
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x6c>)
 80005c6:	f002 fe6a 	bl	800329e <xTaskCreate>
		  100,
		  NULL,
		  1,
		  &receiver_handle);

  vTaskStartScheduler();
 80005ca:	f002 ffc3 	bl	8003554 <vTaskStartScheduler>


  while (1)
 80005ce:	e7fe      	b.n	80005ce <main+0x52>
 80005d0:	200000d4 	.word	0x200000d4
 80005d4:	200000cc 	.word	0x200000cc
 80005d8:	08005eb8 	.word	0x08005eb8
 80005dc:	080005ed 	.word	0x080005ed
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	08005ec4 	.word	0x08005ec4
 80005e8:	0800063d 	.word	0x0800063d

080005ec <SenderTask>:
  }

}

void SenderTask(void *pvParameters)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint32_t value_To_Send=2050;
 80005f4:	f640 0302 	movw	r3, #2050	; 0x802
 80005f8:	60fb      	str	r3, [r7, #12]
	BaseType_t qStatus;						//To check the status of data transfer

	while(1)
	{
		qStatus=xQueueSend(yearQueue,&value_To_Send,0);		//Sending the data
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <SenderTask+0x44>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	f107 010c 	add.w	r1, r7, #12
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f002 fa05 	bl	8002a14 <xQueueGenericSend>
 800060a:	6138      	str	r0, [r7, #16]

		if(qStatus!=pdPASS)
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d002      	beq.n	8000618 <SenderTask+0x2c>
		{
			printf("Error : Data could not be sent....\r\n");
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <SenderTask+0x48>)
 8000614:	f004 fd78 	bl	8005108 <puts>
		}
		for(int i=0;i<70000;i++){}
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	e002      	b.n	8000624 <SenderTask+0x38>
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <SenderTask+0x4c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	ddf8      	ble.n	800061e <SenderTask+0x32>
		qStatus=xQueueSend(yearQueue,&value_To_Send,0);		//Sending the data
 800062c:	e7e5      	b.n	80005fa <SenderTask+0xe>
 800062e:	bf00      	nop
 8000630:	200000d4 	.word	0x200000d4
 8000634:	08005ed4 	.word	0x08005ed4
 8000638:	0001116f 	.word	0x0001116f

0800063c <ReceiverTask>:
	}
}

void ReceiverTask(void *pvParameters)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint32_t value_Received;
	const TickType_t wait_Time=pdMS_TO_TICKS(100);
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	617b      	str	r3, [r7, #20]
	BaseType_t qStatus;									//To check the status of data transfer


	while(1)
	{
		qStatus=xQueueReceive(yearQueue,&value_Received, wait_Time);	//Receiving the data
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <ReceiverTask+0x38>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f107 010c 	add.w	r1, r7, #12
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fb78 	bl	8002d48 <xQueueReceive>
 8000658:	6138      	str	r0, [r7, #16]

		if(qStatus==pdPASS)
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <ReceiverTask+0x30>
		{
			printf("Value received id: %ld....\r\n",value_Received);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <ReceiverTask+0x3c>)
 8000666:	f004 fce9 	bl	800503c <iprintf>
 800066a:	e7ed      	b.n	8000648 <ReceiverTask+0xc>
		}
		else
		{
			printf("Error! Could not receive. \r\n");
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <ReceiverTask+0x40>)
 800066e:	f004 fd4b 	bl	8005108 <puts>
		qStatus=xQueueReceive(yearQueue,&value_Received, wait_Time);	//Receiving the data
 8000672:	e7e9      	b.n	8000648 <ReceiverTask+0xc>
 8000674:	200000d4 	.word	0x200000d4
 8000678:	08005ef8 	.word	0x08005ef8
 800067c:	08005f18 	.word	0x08005f18

08000680 <uart2_write>:

	}
}

int uart2_write(int ch)						//For transmitting the data through USART
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x0080)){}
 8000688:	bf00      	nop
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <uart2_write+0x2c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <uart2_write+0xa>
	USART2->DR=(ch&0xFF);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <uart2_write+0x2c>)
 800069a:	b2db      	uxtb	r3, r3
 800069c:	6053      	str	r3, [r2, #4]
	return ch;
 800069e:	687b      	ldr	r3, [r7, #4]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40004400 	.word	0x40004400

080006b0 <__io_putchar>:


int __io_putchar(int ch)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
	uart2_write(ch);
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffe1 	bl	8000680 <uart2_write>
	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fdf6 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	; (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fd1c 	bl	8001190 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 f883 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 ff7e 	bl	8001680 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 f86d 	bl	8000868 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fc24 	bl	8002024 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f841 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000088 	.word	0x20000088
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_GPIO_Init+0x4c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MX_GPIO_Init+0x4c>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_GPIO_Init+0x4c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_GPIO_Init+0x4c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <MX_GPIO_Init+0x4c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_GPIO_Init+0x4c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 fa15 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010000 	.word	0x40010000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_MspInit+0x54>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_MspInit+0x54>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fabb 	bl	8000e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_UART_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_UART_MspInit+0x8c>)
 8000942:	f000 faa1 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <HAL_InitTick+0xd0>)
 8000972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000974:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <HAL_InitTick+0xd0>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6453      	str	r3, [r2, #68]	; 0x44
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <HAL_InitTick+0xd0>)
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000988:	f107 020c 	add.w	r2, r7, #12
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f894 	bl	8001ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000998:	f001 f87e 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800099c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_InitTick+0xd4>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	0c9b      	lsrs	r3, r3, #18
 80009a8:	3b01      	subs	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <HAL_InitTick+0xd8>)
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <HAL_InitTick+0xdc>)
 80009b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <HAL_InitTick+0xd8>)
 80009b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <HAL_InitTick+0xd8>)
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_InitTick+0xd8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <HAL_InitTick+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_InitTick+0xd8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009d2:	4818      	ldr	r0, [pc, #96]	; (8000a34 <HAL_InitTick+0xd8>)
 80009d4:	f001 f8a6 	bl	8001b24 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d11b      	bne.n	8000a1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <HAL_InitTick+0xd8>)
 80009e8:	f001 f8f6 	bl	8001bd8 <HAL_TIM_Base_Start_IT>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d111      	bne.n	8000a1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009fa:	2019      	movs	r0, #25
 80009fc:	f000 fa36 	bl	8000e6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d808      	bhi.n	8000a18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a06:	2200      	movs	r2, #0
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	2019      	movs	r0, #25
 8000a0c:	f000 fa12 	bl	8000e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_InitTick+0xe0>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	e002      	b.n	8000a1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	200000d8 	.word	0x200000d8
 8000a38:	40010000 	.word	0x40010000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a72:	f001 f913 	bl	8001c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000d8 	.word	0x200000d8

08000a80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	e00a      	b.n	8000aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a92:	f3af 8000 	nop.w
 8000a96:	4601      	mov	r1, r0
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	60ba      	str	r2, [r7, #8]
 8000a9e:	b2ca      	uxtb	r2, r1
 8000aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf0      	blt.n	8000a92 <_read+0x12>
  }

  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e009      	b.n	8000ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdeb 	bl	80006b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf1      	blt.n	8000acc <_write+0x12>
  }
  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_close>:

int _close(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_isatty>:

int _isatty(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f004 fc40 	bl	8005410 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20018000 	.word	0x20018000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	20000120 	.word	0x20000120
 8000bc4:	20004c58 	.word	0x20004c58

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c08:	4c0b      	ldr	r4, [pc, #44]	; (8000c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c16:	f7ff ffd7 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f004 fbff 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fcad 	bl	800057c <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c30:	08005fa8 	.word	0x08005fa8
  ldr r2, =_sbss
 8000c34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c38:	20004c58 	.word	0x20004c58

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f8d8 	bl	8000e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f7ff fe74 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fdfe 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000124 	.word	0x20000124

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000124 	.word	0x20000124

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff4c 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e46:	f7ff ff61 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f7ff ffb1 	bl	8000db8 <NVIC_EncodePriority>
 8000e56:	4602      	mov	r2, r0
 8000e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff80 	bl	8000d64 <__NVIC_SetPriority>
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff54 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e159      	b.n	8001158 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8148 	bne.w	8001152 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d005      	beq.n	8000eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d130      	bne.n	8000f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69b9      	ldr	r1, [r7, #24]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80a2 	beq.w	8001152 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a56      	ldr	r2, [pc, #344]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b54      	ldr	r3, [pc, #336]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102a:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	220f      	movs	r2, #15
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x202>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a48      	ldr	r2, [pc, #288]	; (800117c <HAL_GPIO_Init+0x2f4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x1fe>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a47      	ldr	r2, [pc, #284]	; (8001180 <HAL_GPIO_Init+0x2f8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x1fa>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a46      	ldr	r2, [pc, #280]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x1f6>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a45      	ldr	r2, [pc, #276]	; (8001188 <HAL_GPIO_Init+0x300>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x1f2>
 8001076:	2304      	movs	r3, #4
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x204>
 800107a:	2307      	movs	r3, #7
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x204>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x204>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x204>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x204>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_GPIO_Init+0x304>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <HAL_GPIO_Init+0x304>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_GPIO_Init+0x304>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_GPIO_Init+0x304>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_GPIO_Init+0x304>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_GPIO_Init+0x304>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_GPIO_Init+0x304>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_GPIO_Init+0x304>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f aea2 	bls.w	8000ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40013c00 	.word	0x40013c00

08001190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e267      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d075      	beq.n	800129a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ae:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d00c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b85      	ldr	r3, [pc, #532]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4b82      	ldr	r3, [pc, #520]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d2:	d10b      	bne.n	80011ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	4b7e      	ldr	r3, [pc, #504]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d05b      	beq.n	8001298 <HAL_RCC_OscConfig+0x108>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d157      	bne.n	8001298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e242      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d106      	bne.n	8001204 <HAL_RCC_OscConfig+0x74>
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a75      	ldr	r2, [pc, #468]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e01d      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x98>
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6f      	ldr	r2, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6c      	ldr	r2, [pc, #432]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	e00b      	b.n	8001240 <HAL_RCC_OscConfig+0xb0>
 8001228:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a68      	ldr	r2, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d013      	beq.n	8001270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fd30 	bl	8000cac <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fd2c 	bl	8000cac <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e207      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0xc0>
 800126e:	e014      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fd1c 	bl	8000cac <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fd18 	bl	8000cac <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1f3      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0xe8>
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d063      	beq.n	800136e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d11c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e1c7      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	4937      	ldr	r1, [pc, #220]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f6:	e03a      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d020      	beq.n	8001342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fcd1 	bl	8000cac <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fccd 	bl	8000cac <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1a8      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4925      	ldr	r1, [pc, #148]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_RCC_OscConfig+0x244>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fcb0 	bl	8000cac <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff fcac 	bl	8000cac <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e187      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d036      	beq.n	80013e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_RCC_OscConfig+0x248>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fc90 	bl	8000cac <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc8c 	bl	8000cac <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e167      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_OscConfig+0x240>)
 80013a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x200>
 80013ae:	e01b      	b.n	80013e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_OscConfig+0x248>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fc79 	bl	8000cac <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	e00e      	b.n	80013dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fc75 	bl	8000cac <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d907      	bls.n	80013dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e150      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	42470000 	.word	0x42470000
 80013d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1ea      	bne.n	80013be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8097 	beq.w	8001524 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b7d      	ldr	r3, [pc, #500]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a7c      	ldr	r2, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d118      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a73      	ldr	r2, [pc, #460]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc35 	bl	8000cac <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001446:	f7ff fc31 	bl	8000cac <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e10c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x474>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x2ea>
 800146c:	4b64      	ldr	r3, [pc, #400]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a63      	ldr	r2, [pc, #396]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e01c      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x30c>
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a5b      	ldr	r2, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0x324>
 800149c:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a57      	ldr	r2, [pc, #348]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	4b55      	ldr	r3, [pc, #340]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 0304 	bic.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d015      	beq.n	80014e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fbf6 	bl	8000cac <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fbf2 	bl	8000cac <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0cb      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	4b49      	ldr	r3, [pc, #292]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ee      	beq.n	80014c4 <HAL_RCC_OscConfig+0x334>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbe0 	bl	8000cac <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbdc 	bl	8000cac <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0b5      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a38      	ldr	r2, [pc, #224]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a1 	beq.w	8001670 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d05c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d141      	bne.n	80015c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fbb0 	bl	8000cac <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fbac 	bl	8000cac <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e087      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b27      	ldr	r3, [pc, #156]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69da      	ldr	r2, [r3, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	019b      	lsls	r3, r3, #6
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	3b01      	subs	r3, #1
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	491b      	ldr	r1, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb85 	bl	8000cac <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fb81 	bl	8000cac <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e05c      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x416>
 80015c4:	e054      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_OscConfig+0x478>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb6e 	bl	8000cac <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fb6a 	bl	8000cac <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e045      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x470>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x444>
 80015f2:	e03d      	b.n	8001670 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e038      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000
 8001608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x4ec>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d028      	beq.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d121      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001644:	4293      	cmp	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cc      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d90c      	bls.n	80016bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b65      	ldr	r3, [pc, #404]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0b8      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d4:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f8:	4b50      	ldr	r3, [pc, #320]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	494d      	ldr	r1, [pc, #308]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d044      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d119      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d003      	beq.n	800173e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	2b03      	cmp	r3, #3
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e06f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e067      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fa9c 	bl	8000cac <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff fa98 	bl	8000cac <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04f      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d20c      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e032      	b.n	800182e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4916      	ldr	r1, [pc, #88]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	490e      	ldr	r1, [pc, #56]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001806:	f000 f821 	bl	800184c <HAL_RCC_GetSysClockFreq>
 800180a:	4602      	mov	r2, r0
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	490a      	ldr	r1, [pc, #40]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f898 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00
 800183c:	40023800 	.word	0x40023800
 8001840:	08005f4c 	.word	0x08005f4c
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b094      	sub	sp, #80	; 0x50
 8001852:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001864:	4b79      	ldr	r3, [pc, #484]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d00d      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x40>
 8001870:	2b08      	cmp	r3, #8
 8001872:	f200 80e1 	bhi.w	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x34>
 800187a:	2b04      	cmp	r3, #4
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x3a>
 800187e:	e0db      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001880:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001884:	e0db      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800188a:	e0d8      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	2200      	movs	r2, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80018ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	0159      	lsls	r1, r3, #5
 80018cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d0:	0150      	lsls	r0, r2, #5
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4621      	mov	r1, r4
 80018d8:	1a51      	subs	r1, r2, r1
 80018da:	6139      	str	r1, [r7, #16]
 80018dc:	4629      	mov	r1, r5
 80018de:	eb63 0301 	sbc.w	r3, r3, r1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018f0:	4659      	mov	r1, fp
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4651      	mov	r1, sl
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4651      	mov	r1, sl
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4651      	mov	r1, sl
 8001900:	ebb2 0801 	subs.w	r8, r2, r1
 8001904:	4659      	mov	r1, fp
 8001906:	eb63 0901 	sbc.w	r9, r3, r1
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800191a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191e:	4690      	mov	r8, r2
 8001920:	4699      	mov	r9, r3
 8001922:	4623      	mov	r3, r4
 8001924:	eb18 0303 	adds.w	r3, r8, r3
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	462b      	mov	r3, r5
 800192c:	eb49 0303 	adc.w	r3, r9, r3
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193e:	4629      	mov	r1, r5
 8001940:	024b      	lsls	r3, r1, #9
 8001942:	4621      	mov	r1, r4
 8001944:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001948:	4621      	mov	r1, r4
 800194a:	024a      	lsls	r2, r1, #9
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	2200      	movs	r2, #0
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
 8001956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001958:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800195c:	f7fe fc90 	bl	8000280 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4613      	mov	r3, r2
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001968:	e058      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196a:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	099b      	lsrs	r3, r3, #6
 8001970:	2200      	movs	r2, #0
 8001972:	4618      	mov	r0, r3
 8001974:	4611      	mov	r1, r2
 8001976:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	0159      	lsls	r1, r3, #5
 8001992:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001996:	0150      	lsls	r0, r2, #5
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4641      	mov	r1, r8
 800199e:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a2:	4649      	mov	r1, r9
 80019a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019bc:	ebb2 040a 	subs.w	r4, r2, sl
 80019c0:	eb63 050b 	sbc.w	r5, r3, fp
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	00eb      	lsls	r3, r5, #3
 80019ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019d2:	00e2      	lsls	r2, r4, #3
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
 80019d8:	4643      	mov	r3, r8
 80019da:	18e3      	adds	r3, r4, r3
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	464b      	mov	r3, r9
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019f2:	4629      	mov	r1, r5
 80019f4:	028b      	lsls	r3, r1, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019fc:	4621      	mov	r1, r4
 80019fe:	028a      	lsls	r2, r1, #10
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	61fa      	str	r2, [r7, #28]
 8001a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a10:	f7fe fc36 	bl	8000280 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	007a1200 	.word	0x007a1200

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08005f5c 	.word	0x08005f5c

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08005f5c 	.word	0x08005f5c

08001ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	220f      	movs	r2, #15
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_RCC_GetClockConfig+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0207 	and.w	r2, r3, #7
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e041      	b.n	8001bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f839 	bl	8001bc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f000 f9ca 	bl	8001efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d001      	beq.n	8001bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e044      	b.n	8001c7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d018      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d013      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_TIM_Base_Start_IT+0xb4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00e      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d111      	bne.n	8001c68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d010      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	e007      	b.n	8001c78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40000c00 	.word	0x40000c00
 8001c98:	40014000 	.word	0x40014000

08001c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0202 	mvn.w	r2, #2
 8001cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8ee 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8e0 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8f1 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d122      	bne.n	8001d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d11b      	bne.n	8001d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0204 	mvn.w	r2, #4
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8c4 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8b6 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8c7 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0208 	mvn.w	r2, #8
 8001d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f89a 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f88c 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f89d 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0210 	mvn.w	r2, #16
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f870 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f862 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f873 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0201 	mvn.w	r2, #1
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fd12 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2a:	2b80      	cmp	r3, #128	; 0x80
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8e2 	bl	8002010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f838 	bl	8001ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0220 	mvn.w	r2, #32
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ac 	bl	8001ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <TIM_Base_SetConfig+0xe8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <TIM_Base_SetConfig+0xec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x38>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	; (8001fec <TIM_Base_SetConfig+0xf0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d017      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <TIM_Base_SetConfig+0xe8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <TIM_Base_SetConfig+0xec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <TIM_Base_SetConfig+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <TIM_Base_SetConfig+0xf4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <TIM_Base_SetConfig+0xf8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1d      	ldr	r2, [pc, #116]	; (8001ff8 <TIM_Base_SetConfig+0xfc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <TIM_Base_SetConfig+0xe4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d103      	bne.n	8001fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	615a      	str	r2, [r3, #20]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800

08001ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e03f      	b.n	80020b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fc3e 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f829 	bl	80020c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c4:	b0c0      	sub	sp, #256	; 0x100
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	ea40 0301 	orr.w	r3, r0, r1
 80020e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	431a      	orrs	r2, r3
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800210c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002118:	f021 010c 	bic.w	r1, r1, #12
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002126:	430b      	orrs	r3, r1
 8002128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213a:	6999      	ldr	r1, [r3, #24]
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	ea40 0301 	orr.w	r3, r0, r1
 8002146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b8f      	ldr	r3, [pc, #572]	; (800238c <UART_SetConfig+0x2cc>)
 8002150:	429a      	cmp	r2, r3
 8002152:	d005      	beq.n	8002160 <UART_SetConfig+0xa0>
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <UART_SetConfig+0x2d0>)
 800215c:	429a      	cmp	r2, r3
 800215e:	d104      	bne.n	800216a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002160:	f7ff fc9a 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8002164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002168:	e003      	b.n	8002172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800216a:	f7ff fc81 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 800216e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800217c:	f040 810c 	bne.w	8002398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002184:	2200      	movs	r2, #0
 8002186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800218a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800218e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002192:	4622      	mov	r2, r4
 8002194:	462b      	mov	r3, r5
 8002196:	1891      	adds	r1, r2, r2
 8002198:	65b9      	str	r1, [r7, #88]	; 0x58
 800219a:	415b      	adcs	r3, r3
 800219c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800219e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021a2:	4621      	mov	r1, r4
 80021a4:	eb12 0801 	adds.w	r8, r2, r1
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb43 0901 	adc.w	r9, r3, r1
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c2:	4690      	mov	r8, r2
 80021c4:	4699      	mov	r9, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	eb18 0303 	adds.w	r3, r8, r3
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021d0:	462b      	mov	r3, r5
 80021d2:	eb49 0303 	adc.w	r3, r9, r3
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021ee:	460b      	mov	r3, r1
 80021f0:	18db      	adds	r3, r3, r3
 80021f2:	653b      	str	r3, [r7, #80]	; 0x50
 80021f4:	4613      	mov	r3, r2
 80021f6:	eb42 0303 	adc.w	r3, r2, r3
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
 80021fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002204:	f7fe f83c 	bl	8000280 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4b61      	ldr	r3, [pc, #388]	; (8002394 <UART_SetConfig+0x2d4>)
 800220e:	fba3 2302 	umull	r2, r3, r3, r2
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	011c      	lsls	r4, r3, #4
 8002216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800221a:	2200      	movs	r2, #0
 800221c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	1891      	adds	r1, r2, r2
 800222e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002230:	415b      	adcs	r3, r3
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002238:	4641      	mov	r1, r8
 800223a:	eb12 0a01 	adds.w	sl, r2, r1
 800223e:	4649      	mov	r1, r9
 8002240:	eb43 0b01 	adc.w	fp, r3, r1
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002258:	4692      	mov	sl, r2
 800225a:	469b      	mov	fp, r3
 800225c:	4643      	mov	r3, r8
 800225e:	eb1a 0303 	adds.w	r3, sl, r3
 8002262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002266:	464b      	mov	r3, r9
 8002268:	eb4b 0303 	adc.w	r3, fp, r3
 800226c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800227c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002284:	460b      	mov	r3, r1
 8002286:	18db      	adds	r3, r3, r3
 8002288:	643b      	str	r3, [r7, #64]	; 0x40
 800228a:	4613      	mov	r3, r2
 800228c:	eb42 0303 	adc.w	r3, r2, r3
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
 8002292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800229a:	f7fd fff1 	bl	8000280 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <UART_SetConfig+0x2d4>)
 80022a6:	fba3 2301 	umull	r2, r3, r3, r1
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2264      	movs	r2, #100	; 0x64
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	1acb      	subs	r3, r1, r3
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <UART_SetConfig+0x2d4>)
 80022bc:	fba3 2302 	umull	r2, r3, r3, r2
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c8:	441c      	add	r4, r3
 80022ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022dc:	4642      	mov	r2, r8
 80022de:	464b      	mov	r3, r9
 80022e0:	1891      	adds	r1, r2, r2
 80022e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80022e4:	415b      	adcs	r3, r3
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022ec:	4641      	mov	r1, r8
 80022ee:	1851      	adds	r1, r2, r1
 80022f0:	6339      	str	r1, [r7, #48]	; 0x30
 80022f2:	4649      	mov	r1, r9
 80022f4:	414b      	adcs	r3, r1
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002304:	4659      	mov	r1, fp
 8002306:	00cb      	lsls	r3, r1, #3
 8002308:	4651      	mov	r1, sl
 800230a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800230e:	4651      	mov	r1, sl
 8002310:	00ca      	lsls	r2, r1, #3
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4603      	mov	r3, r0
 8002318:	4642      	mov	r2, r8
 800231a:	189b      	adds	r3, r3, r2
 800231c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002320:	464b      	mov	r3, r9
 8002322:	460a      	mov	r2, r1
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800233c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002340:	460b      	mov	r3, r1
 8002342:	18db      	adds	r3, r3, r3
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
 8002346:	4613      	mov	r3, r2
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002356:	f7fd ff93 	bl	8000280 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <UART_SetConfig+0x2d4>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	3332      	adds	r3, #50	; 0x32
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <UART_SetConfig+0x2d4>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f003 0207 	and.w	r2, r3, #7
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4422      	add	r2, r4
 8002386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002388:	e106      	b.n	8002598 <UART_SetConfig+0x4d8>
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40011400 	.word	0x40011400
 8002394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800239c:	2200      	movs	r2, #0
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023aa:	4642      	mov	r2, r8
 80023ac:	464b      	mov	r3, r9
 80023ae:	1891      	adds	r1, r2, r2
 80023b0:	6239      	str	r1, [r7, #32]
 80023b2:	415b      	adcs	r3, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ba:	4641      	mov	r1, r8
 80023bc:	1854      	adds	r4, r2, r1
 80023be:	4649      	mov	r1, r9
 80023c0:	eb43 0501 	adc.w	r5, r3, r1
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	00eb      	lsls	r3, r5, #3
 80023ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d2:	00e2      	lsls	r2, r4, #3
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4643      	mov	r3, r8
 80023da:	18e3      	adds	r3, r4, r3
 80023dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023e0:	464b      	mov	r3, r9
 80023e2:	eb45 0303 	adc.w	r3, r5, r3
 80023e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002406:	4629      	mov	r1, r5
 8002408:	008b      	lsls	r3, r1, #2
 800240a:	4621      	mov	r1, r4
 800240c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002410:	4621      	mov	r1, r4
 8002412:	008a      	lsls	r2, r1, #2
 8002414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002418:	f7fd ff32 	bl	8000280 <__aeabi_uldivmod>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002422:	fba3 2302 	umull	r2, r3, r3, r2
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	011c      	lsls	r4, r3, #4
 800242a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242e:	2200      	movs	r2, #0
 8002430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800243c:	4642      	mov	r2, r8
 800243e:	464b      	mov	r3, r9
 8002440:	1891      	adds	r1, r2, r2
 8002442:	61b9      	str	r1, [r7, #24]
 8002444:	415b      	adcs	r3, r3
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	4641      	mov	r1, r8
 800244e:	1851      	adds	r1, r2, r1
 8002450:	6139      	str	r1, [r7, #16]
 8002452:	4649      	mov	r1, r9
 8002454:	414b      	adcs	r3, r1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002464:	4659      	mov	r1, fp
 8002466:	00cb      	lsls	r3, r1, #3
 8002468:	4651      	mov	r1, sl
 800246a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800246e:	4651      	mov	r1, sl
 8002470:	00ca      	lsls	r2, r1, #3
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	4603      	mov	r3, r0
 8002478:	4642      	mov	r2, r8
 800247a:	189b      	adds	r3, r3, r2
 800247c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002480:	464b      	mov	r3, r9
 8002482:	460a      	mov	r2, r1
 8002484:	eb42 0303 	adc.w	r3, r2, r3
 8002488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	67bb      	str	r3, [r7, #120]	; 0x78
 8002496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024a4:	4649      	mov	r1, r9
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	4641      	mov	r1, r8
 80024aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ae:	4641      	mov	r1, r8
 80024b0:	008a      	lsls	r2, r1, #2
 80024b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024b6:	f7fd fee3 	bl	8000280 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <UART_SetConfig+0x4e4>)
 80024c2:	fba3 2301 	umull	r2, r3, r3, r1
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	1acb      	subs	r3, r1, r3
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	3332      	adds	r3, #50	; 0x32
 80024d4:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <UART_SetConfig+0x4e4>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	441c      	add	r4, r3
 80024e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024e6:	2200      	movs	r2, #0
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ea:	677a      	str	r2, [r7, #116]	; 0x74
 80024ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	1891      	adds	r1, r2, r2
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	415b      	adcs	r3, r3
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002500:	4641      	mov	r1, r8
 8002502:	1851      	adds	r1, r2, r1
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	4649      	mov	r1, r9
 8002508:	414b      	adcs	r3, r1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002518:	4659      	mov	r1, fp
 800251a:	00cb      	lsls	r3, r1, #3
 800251c:	4651      	mov	r1, sl
 800251e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002522:	4651      	mov	r1, sl
 8002524:	00ca      	lsls	r2, r1, #3
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	4603      	mov	r3, r0
 800252c:	4642      	mov	r2, r8
 800252e:	189b      	adds	r3, r3, r2
 8002530:	66bb      	str	r3, [r7, #104]	; 0x68
 8002532:	464b      	mov	r3, r9
 8002534:	460a      	mov	r2, r1
 8002536:	eb42 0303 	adc.w	r3, r2, r3
 800253a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	663b      	str	r3, [r7, #96]	; 0x60
 8002546:	667a      	str	r2, [r7, #100]	; 0x64
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002554:	4649      	mov	r1, r9
 8002556:	008b      	lsls	r3, r1, #2
 8002558:	4641      	mov	r1, r8
 800255a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800255e:	4641      	mov	r1, r8
 8002560:	008a      	lsls	r2, r1, #2
 8002562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002566:	f7fd fe8b 	bl	8000280 <__aeabi_uldivmod>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002570:	fba3 1302 	umull	r1, r3, r3, r2
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	2164      	movs	r1, #100	; 0x64
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	3332      	adds	r3, #50	; 0x32
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <UART_SetConfig+0x4e4>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	f003 020f 	and.w	r2, r3, #15
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4422      	add	r2, r4
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800259e:	46bd      	mov	sp, r7
 80025a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Handler+0x1c>)
 80025ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80025b0:	f001 fc2c 	bl	8003e0c <xTaskGetSchedulerState>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d001      	beq.n	80025be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80025ba:	f002 fa15 	bl	80049e8 <xPortSysTickHandler>
  }
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80025d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <vApplicationGetIdleTaskMemory+0x30>)
 80025de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	601a      	str	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000128 	.word	0x20000128
 80025f8:	200001d0 	.word	0x200001d0

080025fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <vApplicationGetTimerTaskMemory+0x2c>)
 800260c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <vApplicationGetTimerTaskMemory+0x30>)
 8002612:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	200003d0 	.word	0x200003d0
 800262c:	20000478 	.word	0x20000478

08002630 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f103 0208 	add.w	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f103 0208 	add.w	r2, r3, #8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f103 0208 	add.w	r2, r3, #8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	601a      	str	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d103      	bne.n	80026f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e00c      	b.n	800270c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3308      	adds	r3, #8
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e002      	b.n	8002700 <vListInsert+0x2e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d2f6      	bcs.n	80026fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6852      	ldr	r2, [r2, #4]
 8002764:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d103      	bne.n	8002778 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027be:	bf00      	nop
 80027c0:	e7fe      	b.n	80027c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027c2:	f002 f87f 	bl	80048c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	441a      	add	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	3b01      	subs	r3, #1
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	441a      	add	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d114      	bne.n	8002842 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01a      	beq.n	8002856 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3310      	adds	r3, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f001 f92f 	bl	8003a88 <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d012      	beq.n	8002856 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <xQueueGenericReset+0xcc>)
 8002832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	e009      	b.n	8002856 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3310      	adds	r3, #16
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fef2 	bl	8002630 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff feed 	bl	8002630 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002856:	f002 f865 	bl	8004924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <xQueueGenericCreateStatic+0x52>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <xQueueGenericCreateStatic+0x56>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <xQueueGenericCreateStatic+0x58>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	623b      	str	r3, [r7, #32]
}
 80028d6:	bf00      	nop
 80028d8:	e7fe      	b.n	80028d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <xQueueGenericCreateStatic+0x7e>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <xQueueGenericCreateStatic+0x82>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <xQueueGenericCreateStatic+0x84>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	61fb      	str	r3, [r7, #28]
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002906:	2350      	movs	r3, #80	; 0x50
 8002908:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b50      	cmp	r3, #80	; 0x50
 800290e:	d00a      	beq.n	8002926 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61bb      	str	r3, [r7, #24]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002926:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800293a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f83f 	bl	80029cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002950:	4618      	mov	r0, r3
 8002952:	3730      	adds	r7, #48	; 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <xQueueGenericCreate+0x2a>
	__asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	613b      	str	r3, [r7, #16]
}
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3350      	adds	r3, #80	; 0x50
 8002990:	4618      	mov	r0, r3
 8002992:	f002 f8b9 	bl	8004b08 <pvPortMalloc>
 8002996:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d011      	beq.n	80029c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3350      	adds	r3, #80	; 0x50
 80029a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f805 	bl	80029cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029c2:	69bb      	ldr	r3, [r7, #24]
	}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e002      	b.n	80029ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029fa:	2101      	movs	r1, #1
 80029fc:	69b8      	ldr	r0, [r7, #24]
 80029fe:	f7ff fecb 	bl	8002798 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08e      	sub	sp, #56	; 0x38
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericSend+0x32>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <xQueueGenericSend+0x40>
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <xQueueGenericSend+0x44>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <xQueueGenericSend+0x46>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xQueueGenericSend+0x60>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSend+0x6e>
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <xQueueGenericSend+0x72>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xQueueGenericSend+0x74>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	623b      	str	r3, [r7, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aa2:	f001 f9b3 	bl	8003e0c <xTaskGetSchedulerState>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <xQueueGenericSend+0x9e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <xQueueGenericSend+0xa2>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <xQueueGenericSend+0xa4>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	61fb      	str	r3, [r7, #28]
}
 8002ace:	bf00      	nop
 8002ad0:	e7fe      	b.n	8002ad0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ad2:	f001 fef7 	bl	80048c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d302      	bcc.n	8002ae8 <xQueueGenericSend+0xd4>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d129      	bne.n	8002b3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aee:	f000 fa0b 	bl	8002f08 <prvCopyDataToQueue>
 8002af2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	3324      	adds	r3, #36	; 0x24
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 ffc1 	bl	8003a88 <xTaskRemoveFromEventList>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b0c:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <xQueueGenericSend+0x1f8>)
 8002b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	e00a      	b.n	8002b34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b24:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <xQueueGenericSend+0x1f8>)
 8002b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b34:	f001 fef6 	bl	8004924 <vPortExitCritical>
				return pdPASS;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e063      	b.n	8002c04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b42:	f001 feef 	bl	8004924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e05c      	b.n	8002c04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fffb 	bl	8003b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b5e:	f001 fee1 	bl	8004924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b62:	f000 fd67 	bl	8003634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b66:	f001 fead 	bl	80048c4 <vPortEnterCritical>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b76:	d103      	bne.n	8002b80 <xQueueGenericSend+0x16c>
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSend+0x182>
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b96:	f001 fec5 	bl	8004924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b9a:	1d3a      	adds	r2, r7, #4
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 ffea 	bl	8003b7c <xTaskCheckForTimeOut>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d124      	bne.n	8002bf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bb0:	f000 faa2 	bl	80030f8 <prvIsQueueFull>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 ff10 	bl	80039e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bca:	f000 fa2d 	bl	8003028 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bce:	f000 fd3f 	bl	8003650 <xTaskResumeAll>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f af7c 	bne.w	8002ad2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <xQueueGenericSend+0x1f8>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	e772      	b.n	8002ad2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bee:	f000 fa1b 	bl	8003028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bf2:	f000 fd2d 	bl	8003650 <xTaskResumeAll>
 8002bf6:	e76c      	b.n	8002ad2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfa:	f000 fa15 	bl	8003028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bfe:	f000 fd27 	bl	8003650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3738      	adds	r7, #56	; 0x38
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b090      	sub	sp, #64	; 0x40
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <xQueueGenericSendFromISR+0x3c>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <xQueueGenericSendFromISR+0x40>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <xQueueGenericSendFromISR+0x42>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d103      	bne.n	8002c7a <xQueueGenericSendFromISR+0x6a>
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericSendFromISR+0x6e>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericSendFromISR+0x70>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	623b      	str	r3, [r7, #32]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c9a:	f001 fef5 	bl	8004a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	61fa      	str	r2, [r7, #28]
 8002cb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <xQueueGenericSendFromISR+0xbc>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d12f      	bne.n	8002d2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ce2:	f000 f911 	bl	8002f08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ce6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d112      	bne.n	8002d16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d016      	beq.n	8002d26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	3324      	adds	r3, #36	; 0x24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fec3 	bl	8003a88 <xTaskRemoveFromEventList>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e007      	b.n	8002d26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	b25a      	sxtb	r2, r3
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d26:	2301      	movs	r3, #1
 8002d28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d2a:	e001      	b.n	8002d30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3740      	adds	r7, #64	; 0x40
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <xQueueReceive+0x30>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	623b      	str	r3, [r7, #32]
}
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0x3e>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueReceive+0x42>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueReceive+0x44>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueReceive+0x5e>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da6:	f001 f831 	bl	8003e0c <xTaskGetSchedulerState>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueReceive+0x6e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueReceive+0x72>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueReceive+0x74>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueReceive+0x8e>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61bb      	str	r3, [r7, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dd6:	f001 fd75 	bl	80048c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01f      	beq.n	8002e26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 f8f7 	bl	8002fdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	3310      	adds	r3, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fe40 	bl	8003a88 <xTaskRemoveFromEventList>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <xQueueReceive+0x1bc>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e1e:	f001 fd81 	bl	8004924 <vPortExitCritical>
				return pdPASS;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e069      	b.n	8002efa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e2c:	f001 fd7a 	bl	8004924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e062      	b.n	8002efa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fe86 	bl	8003b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e48:	f001 fd6c 	bl	8004924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e4c:	f000 fbf2 	bl	8003634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e50:	f001 fd38 	bl	80048c4 <vPortEnterCritical>
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <xQueueReceive+0x122>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d103      	bne.n	8002e80 <xQueueReceive+0x138>
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	f001 fd50 	bl	8004924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e84:	1d3a      	adds	r2, r7, #4
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fe75 	bl	8003b7c <xTaskCheckForTimeOut>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d123      	bne.n	8002ee0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e9a:	f000 f917 	bl	80030cc <prvIsQueueEmpty>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fd9b 	bl	80039e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb4:	f000 f8b8 	bl	8003028 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eb8:	f000 fbca 	bl	8003650 <xTaskResumeAll>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d189      	bne.n	8002dd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xQueueReceive+0x1bc>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	e780      	b.n	8002dd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed6:	f000 f8a7 	bl	8003028 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eda:	f000 fbb9 	bl	8003650 <xTaskResumeAll>
 8002ede:	e77a      	b.n	8002dd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 f8a1 	bl	8003028 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee6:	f000 fbb3 	bl	8003650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eec:	f000 f8ee 	bl	80030cc <prvIsQueueEmpty>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f43f af6f 	beq.w	8002dd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d14d      	bne.n	8002fca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff88 	bl	8003e48 <xTaskPriorityDisinherit>
 8002f38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e043      	b.n	8002fca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d119      	bne.n	8002f7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6858      	ldr	r0, [r3, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	461a      	mov	r2, r3
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	f002 fa88 	bl	8005468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d32b      	bcc.n	8002fca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e026      	b.n	8002fca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68d8      	ldr	r0, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	461a      	mov	r2, r3
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	f002 fa6e 	bl	8005468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	425b      	negs	r3, r3
 8002f96:	441a      	add	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d105      	bne.n	8002fca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fd2:	697b      	ldr	r3, [r7, #20]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d018      	beq.n	8003020 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d303      	bcc.n	8003010 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	461a      	mov	r2, r3
 800301a:	6838      	ldr	r0, [r7, #0]
 800301c:	f002 fa24 	bl	8005468 <memcpy>
	}
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003030:	f001 fc48 	bl	80048c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800303c:	e011      	b.n	8003062 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3324      	adds	r3, #36	; 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fd1c 	bl	8003a88 <xTaskRemoveFromEventList>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003056:	f000 fdf3 	bl	8003c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	3b01      	subs	r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	dce9      	bgt.n	800303e <prvUnlockQueue+0x16>
 800306a:	e000      	b.n	800306e <prvUnlockQueue+0x46>
					break;
 800306c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003076:	f001 fc55 	bl	8004924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800307a:	f001 fc23 	bl	80048c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003084:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003086:	e011      	b.n	80030ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3310      	adds	r3, #16
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fcf7 	bl	8003a88 <xTaskRemoveFromEventList>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030a0:	f000 fdce 	bl	8003c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dce9      	bgt.n	8003088 <prvUnlockQueue+0x60>
 80030b4:	e000      	b.n	80030b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030c0:	f001 fc30 	bl	8004924 <vPortExitCritical>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030d4:	f001 fbf6 	bl	80048c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e001      	b.n	80030ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030ea:	f001 fc1b 	bl	8004924 <vPortExitCritical>

	return xReturn;
 80030ee:	68fb      	ldr	r3, [r7, #12]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003100:	f001 fbe0 	bl	80048c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	429a      	cmp	r2, r3
 800310e:	d102      	bne.n	8003116 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e001      	b.n	800311a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800311a:	f001 fc03 	bl	8004924 <vPortExitCritical>

	return xReturn;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e014      	b.n	8003162 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <vQueueAddToRegistry+0x50>)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <vQueueAddToRegistry+0x50>)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <vQueueAddToRegistry+0x50>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800315a:	e006      	b.n	800316a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d9e7      	bls.n	8003138 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000878 	.word	0x20000878

0800317c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800318c:	f001 fb9a 	bl	80048c4 <vPortEnterCritical>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	b25b      	sxtb	r3, r3
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d103      	bne.n	80031a6 <vQueueWaitForMessageRestricted+0x2a>
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d103      	bne.n	80031bc <vQueueWaitForMessageRestricted+0x40>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	f001 fbb2 	bl	8004924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fc2d 	bl	8003a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff26 	bl	8003028 <prvUnlockQueue>
	}
 80031dc:	bf00      	nop
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <xTaskCreateStatic+0x2a>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	623b      	str	r3, [r7, #32]
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xTaskCreateStatic+0x46>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61fb      	str	r3, [r7, #28]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800322a:	23a8      	movs	r3, #168	; 0xa8
 800322c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2ba8      	cmp	r3, #168	; 0xa8
 8003232:	d00a      	beq.n	800324a <xTaskCreateStatic+0x66>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61bb      	str	r3, [r7, #24]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800324a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01e      	beq.n	8003290 <xTaskCreateStatic+0xac>
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003260:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	2202      	movs	r2, #2
 8003266:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800326a:	2300      	movs	r3, #0
 800326c:	9303      	str	r3, [sp, #12]
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	9302      	str	r3, [sp, #8]
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f850 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800328a:	f000 f8f3 	bl	8003474 <prvAddNewTaskToReadyList>
 800328e:	e001      	b.n	8003294 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003294:	697b      	ldr	r3, [r7, #20]
	}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b08c      	sub	sp, #48	; 0x30
 80032a2:	af04      	add	r7, sp, #16
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 fc28 	bl	8004b08 <pvPortMalloc>
 80032b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032c0:	20a8      	movs	r0, #168	; 0xa8
 80032c2:	f001 fc21 	bl	8004b08 <pvPortMalloc>
 80032c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
 80032d4:	e005      	b.n	80032e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f001 fce2 	bl	8004ca0 <vPortFree>
 80032dc:	e001      	b.n	80032e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	2300      	movs	r3, #0
 80032f4:	9303      	str	r3, [sp, #12]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f80e 	bl	8003328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800330c:	69f8      	ldr	r0, [r7, #28]
 800330e:	f000 f8b1 	bl	8003474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003312:	2301      	movs	r3, #1
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e002      	b.n	800331e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003318:	f04f 33ff 	mov.w	r3, #4294967295
 800331c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800331e:	69bb      	ldr	r3, [r7, #24]
	}
 8003320:	4618      	mov	r0, r3
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	21a5      	movs	r1, #165	; 0xa5
 8003342:	f001 ffc1 	bl	80052c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003350:	3b01      	subs	r3, #1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <prvInitialiseNewTask+0x58>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	617b      	str	r3, [r7, #20]
}
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01f      	beq.n	80033c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e012      	b.n	80033b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	7819      	ldrb	r1, [r3, #0]
 8003394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	3334      	adds	r3, #52	; 0x34
 800339c:	460a      	mov	r2, r1
 800339e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	3301      	adds	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d9e9      	bls.n	800338c <prvInitialiseNewTask+0x64>
 80033b8:	e000      	b.n	80033bc <prvInitialiseNewTask+0x94>
			{
				break;
 80033ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c4:	e003      	b.n	80033ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	2b37      	cmp	r3, #55	; 0x37
 80033d2:	d901      	bls.n	80033d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033d4:	2337      	movs	r3, #55	; 0x37
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2200      	movs	r2, #0
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	3304      	adds	r3, #4
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f93e 	bl	8002670 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	3318      	adds	r3, #24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f939 	bl	8002670 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003402:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	2200      	movs	r2, #0
 8003418:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2200      	movs	r2, #0
 8003420:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	3354      	adds	r3, #84	; 0x54
 8003428:	224c      	movs	r2, #76	; 0x4c
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f001 ff4b 	bl	80052c8 <memset>
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <prvInitialiseNewTask+0x140>)
 8003436:	659a      	str	r2, [r3, #88]	; 0x58
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	4a0c      	ldr	r2, [pc, #48]	; (800346c <prvInitialiseNewTask+0x144>)
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <prvInitialiseNewTask+0x148>)
 8003442:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	69b8      	ldr	r0, [r7, #24]
 800344a:	f001 f90d 	bl	8004668 <pxPortInitialiseStack>
 800344e:	4602      	mov	r2, r0
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003460:	bf00      	nop
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20004b0c 	.word	0x20004b0c
 800346c:	20004b74 	.word	0x20004b74
 8003470:	20004bdc 	.word	0x20004bdc

08003474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800347c:	f001 fa22 	bl	80048c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003480:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <prvAddNewTaskToReadyList+0xc4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <prvAddNewTaskToReadyList+0xc4>)
 8003488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003492:	4a2a      	ldr	r2, [pc, #168]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <prvAddNewTaskToReadyList+0xc4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d110      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034a0:	f000 fbf2 	bl	8003c88 <prvInitialiseTaskLists>
 80034a4:	e00d      	b.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <prvAddNewTaskToReadyList+0xcc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d802      	bhi.n	80034c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034bc:	4a1f      	ldr	r2, [pc, #124]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <prvAddNewTaskToReadyList+0xd0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <prvAddNewTaskToReadyList+0xd0>)
 80034ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <prvAddNewTaskToReadyList+0xd0>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <prvAddNewTaskToReadyList+0xd4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d903      	bls.n	80034e8 <prvAddNewTaskToReadyList+0x74>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <prvAddNewTaskToReadyList+0xd4>)
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <prvAddNewTaskToReadyList+0xd8>)
 80034f6:	441a      	add	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7ff f8c3 	bl	800268a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003504:	f001 fa0e 	bl	8004924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <prvAddNewTaskToReadyList+0xcc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvAddNewTaskToReadyList+0xc8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	429a      	cmp	r2, r3
 800351c:	d207      	bcs.n	800352e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <prvAddNewTaskToReadyList+0xdc>)
 8003520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000d8c 	.word	0x20000d8c
 800353c:	200008b8 	.word	0x200008b8
 8003540:	20000d98 	.word	0x20000d98
 8003544:	20000da8 	.word	0x20000da8
 8003548:	20000d94 	.word	0x20000d94
 800354c:	200008bc 	.word	0x200008bc
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003562:	463a      	mov	r2, r7
 8003564:	1d39      	adds	r1, r7, #4
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f82c 	bl	80025c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003570:	6839      	ldr	r1, [r7, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	9202      	str	r2, [sp, #8]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	2300      	movs	r3, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	460a      	mov	r2, r1
 8003582:	4924      	ldr	r1, [pc, #144]	; (8003614 <vTaskStartScheduler+0xc0>)
 8003584:	4824      	ldr	r0, [pc, #144]	; (8003618 <vTaskStartScheduler+0xc4>)
 8003586:	f7ff fe2d 	bl	80031e4 <xTaskCreateStatic>
 800358a:	4603      	mov	r3, r0
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <vTaskStartScheduler+0xc8>)
 800358e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <vTaskStartScheduler+0xc8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e001      	b.n	80035a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80035a8:	f000 fd10 	bl	8003fcc <xTimerCreateTimerTask>
 80035ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11b      	bne.n	80035ec <vTaskStartScheduler+0x98>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	613b      	str	r3, [r7, #16]
}
 80035c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <vTaskStartScheduler+0xcc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3354      	adds	r3, #84	; 0x54
 80035ce:	4a15      	ldr	r2, [pc, #84]	; (8003624 <vTaskStartScheduler+0xd0>)
 80035d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <vTaskStartScheduler+0xd4>)
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295
 80035d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <vTaskStartScheduler+0xd8>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035e0:	4b13      	ldr	r3, [pc, #76]	; (8003630 <vTaskStartScheduler+0xdc>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035e6:	f001 f8cb 	bl	8004780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035ea:	e00e      	b.n	800360a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d10a      	bne.n	800360a <vTaskStartScheduler+0xb6>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60fb      	str	r3, [r7, #12]
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <vTaskStartScheduler+0xb4>
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08005f34 	.word	0x08005f34
 8003618:	08003c59 	.word	0x08003c59
 800361c:	20000db0 	.word	0x20000db0
 8003620:	200008b8 	.word	0x200008b8
 8003624:	20000068 	.word	0x20000068
 8003628:	20000dac 	.word	0x20000dac
 800362c:	20000d98 	.word	0x20000d98
 8003630:	20000d90 	.word	0x20000d90

08003634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <vTaskSuspendAll+0x18>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a03      	ldr	r2, [pc, #12]	; (800364c <vTaskSuspendAll+0x18>)
 8003640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000db4 	.word	0x20000db4

08003650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800365e:	4b42      	ldr	r3, [pc, #264]	; (8003768 <xTaskResumeAll+0x118>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <xTaskResumeAll+0x2c>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	603b      	str	r3, [r7, #0]
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800367c:	f001 f922 	bl	80048c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <xTaskResumeAll+0x118>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a38      	ldr	r2, [pc, #224]	; (8003768 <xTaskResumeAll+0x118>)
 8003688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <xTaskResumeAll+0x118>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d162      	bne.n	8003758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003692:	4b36      	ldr	r3, [pc, #216]	; (800376c <xTaskResumeAll+0x11c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d05e      	beq.n	8003758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800369a:	e02f      	b.n	80036fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <xTaskResumeAll+0x120>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3318      	adds	r3, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f84b 	bl	8002744 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f846 	bl	8002744 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <xTaskResumeAll+0x124>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d903      	bls.n	80036cc <xTaskResumeAll+0x7c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4a2a      	ldr	r2, [pc, #168]	; (8003774 <xTaskResumeAll+0x124>)
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <xTaskResumeAll+0x128>)
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f7fe ffd1 	bl	800268a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <xTaskResumeAll+0x12c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <xTaskResumeAll+0x130>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <xTaskResumeAll+0x120>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1cb      	bne.n	800369c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800370a:	f000 fb5f 	bl	8003dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <xTaskResumeAll+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800371a:	f000 f847 	bl	80037ac <xTaskIncrementTick>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <xTaskResumeAll+0x130>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3b01      	subs	r3, #1
 800372e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f1      	bne.n	800371a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <xTaskResumeAll+0x134>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <xTaskResumeAll+0x130>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003744:	2301      	movs	r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <xTaskResumeAll+0x138>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003758:	f001 f8e4 	bl	8004924 <vPortExitCritical>

	return xAlreadyYielded;
 800375c:	68bb      	ldr	r3, [r7, #8]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000db4 	.word	0x20000db4
 800376c:	20000d8c 	.word	0x20000d8c
 8003770:	20000d4c 	.word	0x20000d4c
 8003774:	20000d94 	.word	0x20000d94
 8003778:	200008bc 	.word	0x200008bc
 800377c:	200008b8 	.word	0x200008b8
 8003780:	20000da0 	.word	0x20000da0
 8003784:	20000d9c 	.word	0x20000d9c
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <xTaskGetTickCount+0x1c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000d90 	.word	0x20000d90

080037ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037b6:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <xTaskIncrementTick+0x148>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 808f 	bne.w	80038de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <xTaskIncrementTick+0x14c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037c8:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <xTaskIncrementTick+0x14c>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d120      	bne.n	8003816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037d4:	4b49      	ldr	r3, [pc, #292]	; (80038fc <xTaskIncrementTick+0x150>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	603b      	str	r3, [r7, #0]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <xTaskIncrementTick+0x46>
 80037f4:	4b41      	ldr	r3, [pc, #260]	; (80038fc <xTaskIncrementTick+0x150>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b41      	ldr	r3, [pc, #260]	; (8003900 <xTaskIncrementTick+0x154>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a3f      	ldr	r2, [pc, #252]	; (80038fc <xTaskIncrementTick+0x150>)
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4a3f      	ldr	r2, [pc, #252]	; (8003900 <xTaskIncrementTick+0x154>)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b3e      	ldr	r3, [pc, #248]	; (8003904 <xTaskIncrementTick+0x158>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	4a3d      	ldr	r2, [pc, #244]	; (8003904 <xTaskIncrementTick+0x158>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	f000 fadb 	bl	8003dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003816:	4b3c      	ldr	r3, [pc, #240]	; (8003908 <xTaskIncrementTick+0x15c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d349      	bcc.n	80038b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003820:	4b36      	ldr	r3, [pc, #216]	; (80038fc <xTaskIncrementTick+0x150>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <xTaskIncrementTick+0x15c>)
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	601a      	str	r2, [r3, #0]
					break;
 8003832:	e03f      	b.n	80038b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <xTaskIncrementTick+0x150>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d203      	bcs.n	8003854 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800384c:	4a2e      	ldr	r2, [pc, #184]	; (8003908 <xTaskIncrementTick+0x15c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003852:	e02f      	b.n	80038b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3304      	adds	r3, #4
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe ff73 	bl	8002744 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3318      	adds	r3, #24
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe ff6a 	bl	8002744 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <xTaskIncrementTick+0x160>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d903      	bls.n	8003884 <xTaskIncrementTick+0xd8>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a22      	ldr	r2, [pc, #136]	; (800390c <xTaskIncrementTick+0x160>)
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <xTaskIncrementTick+0x164>)
 8003892:	441a      	add	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f7fe fef5 	bl	800268a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <xTaskIncrementTick+0x168>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3b8      	bcc.n	8003820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b2:	e7b5      	b.n	8003820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <xTaskIncrementTick+0x168>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ba:	4915      	ldr	r1, [pc, #84]	; (8003910 <xTaskIncrementTick+0x164>)
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d901      	bls.n	80038d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <xTaskIncrementTick+0x16c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e004      	b.n	80038e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <xTaskIncrementTick+0x170>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <xTaskIncrementTick+0x170>)
 80038e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038e8:	697b      	ldr	r3, [r7, #20]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000db4 	.word	0x20000db4
 80038f8:	20000d90 	.word	0x20000d90
 80038fc:	20000d44 	.word	0x20000d44
 8003900:	20000d48 	.word	0x20000d48
 8003904:	20000da4 	.word	0x20000da4
 8003908:	20000dac 	.word	0x20000dac
 800390c:	20000d94 	.word	0x20000d94
 8003910:	200008bc 	.word	0x200008bc
 8003914:	200008b8 	.word	0x200008b8
 8003918:	20000da0 	.word	0x20000da0
 800391c:	20000d9c 	.word	0x20000d9c

08003920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003926:	4b2a      	ldr	r3, [pc, #168]	; (80039d0 <vTaskSwitchContext+0xb0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <vTaskSwitchContext+0xb4>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003934:	e046      	b.n	80039c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <vTaskSwitchContext+0xb4>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <vTaskSwitchContext+0xb8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e010      	b.n	8003966 <vTaskSwitchContext+0x46>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <vTaskSwitchContext+0x40>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	607b      	str	r3, [r7, #4]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vTaskSwitchContext+0x3e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3b01      	subs	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	491d      	ldr	r1, [pc, #116]	; (80039dc <vTaskSwitchContext+0xbc>)
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0e4      	beq.n	8003944 <vTaskSwitchContext+0x24>
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <vTaskSwitchContext+0xbc>)
 8003986:	4413      	add	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3308      	adds	r3, #8
 800399c:	429a      	cmp	r2, r3
 800399e:	d104      	bne.n	80039aa <vTaskSwitchContext+0x8a>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <vTaskSwitchContext+0xc0>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <vTaskSwitchContext+0xb8>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <vTaskSwitchContext+0xc0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3354      	adds	r3, #84	; 0x54
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <vTaskSwitchContext+0xc4>)
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000db4 	.word	0x20000db4
 80039d4:	20000da0 	.word	0x20000da0
 80039d8:	20000d94 	.word	0x20000d94
 80039dc:	200008bc 	.word	0x200008bc
 80039e0:	200008b8 	.word	0x200008b8
 80039e4:	20000068 	.word	0x20000068

080039e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <vTaskPlaceOnEventList+0x44>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3318      	adds	r3, #24
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fe5b 	bl	80026d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	6838      	ldr	r0, [r7, #0]
 8003a20:	f000 fa80 	bl	8003f24 <prvAddCurrentTaskToDelayedList>
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200008b8 	.word	0x200008b8

08003a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	617b      	str	r3, [r7, #20]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7fe fe12 	bl	800268a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	68b8      	ldr	r0, [r7, #8]
 8003a76:	f000 fa55 	bl	8003f24 <prvAddCurrentTaskToDelayedList>
	}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200008b8 	.word	0x200008b8

08003a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60fb      	str	r3, [r7, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fe43 	bl	8002744 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <xTaskRemoveFromEventList+0xb0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11d      	bne.n	8003b02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fe3a 	bl	8002744 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <xTaskRemoveFromEventList+0xb4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d903      	bls.n	8003ae4 <xTaskRemoveFromEventList+0x5c>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <xTaskRemoveFromEventList+0xb4>)
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <xTaskRemoveFromEventList+0xb8>)
 8003af2:	441a      	add	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fe fdc5 	bl	800268a <vListInsertEnd>
 8003b00:	e005      	b.n	8003b0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3318      	adds	r3, #24
 8003b06:	4619      	mov	r1, r3
 8003b08:	480e      	ldr	r0, [pc, #56]	; (8003b44 <xTaskRemoveFromEventList+0xbc>)
 8003b0a:	f7fe fdbe 	bl	800268a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <xTaskRemoveFromEventList+0xc0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d905      	bls.n	8003b28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <xTaskRemoveFromEventList+0xc4>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e001      	b.n	8003b2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003b2c:	697b      	ldr	r3, [r7, #20]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000db4 	.word	0x20000db4
 8003b3c:	20000d94 	.word	0x20000d94
 8003b40:	200008bc 	.word	0x200008bc
 8003b44:	20000d4c 	.word	0x20000d4c
 8003b48:	200008b8 	.word	0x200008b8
 8003b4c:	20000da0 	.word	0x20000da0

08003b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <vTaskInternalSetTimeOutState+0x24>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <vTaskInternalSetTimeOutState+0x28>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000da4 	.word	0x20000da4
 8003b78:	20000d90 	.word	0x20000d90

08003b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	613b      	str	r3, [r7, #16]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003bbe:	f000 fe81 	bl	80048c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <xTaskCheckForTimeOut+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d102      	bne.n	8003be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e023      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <xTaskCheckForTimeOut+0xc0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d007      	beq.n	8003bfe <xTaskCheckForTimeOut+0x82>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e015      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d20b      	bcs.n	8003c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff9b 	bl	8003b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e004      	b.n	8003c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f000 fe7b 	bl	8004924 <vPortExitCritical>

	return xReturn;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000d90 	.word	0x20000d90
 8003c3c:	20000da4 	.word	0x20000da4

08003c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <vTaskMissedYield+0x14>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20000da0 	.word	0x20000da0

08003c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c60:	f000 f852 	bl	8003d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvIdleTask+0x28>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d9f9      	bls.n	8003c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <prvIdleTask+0x2c>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c7c:	e7f0      	b.n	8003c60 <prvIdleTask+0x8>
 8003c7e:	bf00      	nop
 8003c80:	200008bc 	.word	0x200008bc
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	e00c      	b.n	8003cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <prvInitialiseTaskLists+0x60>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fcc4 	bl	8002630 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3301      	adds	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b37      	cmp	r3, #55	; 0x37
 8003cb2:	d9ef      	bls.n	8003c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cb4:	480d      	ldr	r0, [pc, #52]	; (8003cec <prvInitialiseTaskLists+0x64>)
 8003cb6:	f7fe fcbb 	bl	8002630 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cba:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <prvInitialiseTaskLists+0x68>)
 8003cbc:	f7fe fcb8 	bl	8002630 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <prvInitialiseTaskLists+0x6c>)
 8003cc2:	f7fe fcb5 	bl	8002630 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cc6:	480c      	ldr	r0, [pc, #48]	; (8003cf8 <prvInitialiseTaskLists+0x70>)
 8003cc8:	f7fe fcb2 	bl	8002630 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ccc:	480b      	ldr	r0, [pc, #44]	; (8003cfc <prvInitialiseTaskLists+0x74>)
 8003cce:	f7fe fcaf 	bl	8002630 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <prvInitialiseTaskLists+0x78>)
 8003cd4:	4a05      	ldr	r2, [pc, #20]	; (8003cec <prvInitialiseTaskLists+0x64>)
 8003cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvInitialiseTaskLists+0x7c>)
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <prvInitialiseTaskLists+0x68>)
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200008bc 	.word	0x200008bc
 8003cec:	20000d1c 	.word	0x20000d1c
 8003cf0:	20000d30 	.word	0x20000d30
 8003cf4:	20000d4c 	.word	0x20000d4c
 8003cf8:	20000d60 	.word	0x20000d60
 8003cfc:	20000d78 	.word	0x20000d78
 8003d00:	20000d44 	.word	0x20000d44
 8003d04:	20000d48 	.word	0x20000d48

08003d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d0e:	e019      	b.n	8003d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d10:	f000 fdd8 	bl	80048c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <prvCheckTasksWaitingTermination+0x50>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fd0f 	bl	8002744 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <prvCheckTasksWaitingTermination+0x54>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <prvCheckTasksWaitingTermination+0x54>)
 8003d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d3a:	f000 fdf3 	bl	8004924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f810 	bl	8003d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <prvCheckTasksWaitingTermination+0x58>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e1      	bne.n	8003d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000d60 	.word	0x20000d60
 8003d5c:	20000d8c 	.word	0x20000d8c
 8003d60:	20000d74 	.word	0x20000d74

08003d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3354      	adds	r3, #84	; 0x54
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fac1 	bl	80052f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d108      	bne.n	8003d92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ff8b 	bl	8004ca0 <vPortFree>
				vPortFree( pxTCB );
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 ff88 	bl	8004ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d90:	e018      	b.n	8003dc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d103      	bne.n	8003da4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 ff7f 	bl	8004ca0 <vPortFree>
	}
 8003da2:	e00f      	b.n	8003dc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d00a      	beq.n	8003dc4 <prvDeleteTCB+0x60>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60fb      	str	r3, [r7, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <prvDeleteTCB+0x5e>
	}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <prvResetNextTaskUnblockTime+0x38>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <prvResetNextTaskUnblockTime+0x3c>)
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295
 8003de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003de4:	e008      	b.n	8003df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <prvResetNextTaskUnblockTime+0x38>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <prvResetNextTaskUnblockTime+0x3c>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000d44 	.word	0x20000d44
 8003e08:	20000dac 	.word	0x20000dac

08003e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <xTaskGetSchedulerState+0x34>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	e008      	b.n	8003e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <xTaskGetSchedulerState+0x38>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	e001      	b.n	8003e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e32:	687b      	ldr	r3, [r7, #4]
	}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000d98 	.word	0x20000d98
 8003e44:	20000db4 	.word	0x20000db4

08003e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d056      	beq.n	8003f0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <xTaskPriorityDisinherit+0xd0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d00a      	beq.n	8003e7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	60fb      	str	r3, [r7, #12]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	60bb      	str	r3, [r7, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d02c      	beq.n	8003f0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d128      	bne.n	8003f0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fc40 	bl	8002744 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <xTaskPriorityDisinherit+0xd4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d903      	bls.n	8003eec <xTaskPriorityDisinherit+0xa4>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <xTaskPriorityDisinherit+0xd4>)
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <xTaskPriorityDisinherit+0xd8>)
 8003efa:	441a      	add	r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f7fe fbc1 	bl	800268a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f0c:	697b      	ldr	r3, [r7, #20]
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200008b8 	.word	0x200008b8
 8003f1c:	20000d94 	.word	0x20000d94
 8003f20:	200008bc 	.word	0x200008bc

08003f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fc02 	bl	8002744 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d10a      	bne.n	8003f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4819      	ldr	r0, [pc, #100]	; (8003fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8003f58:	f7fe fb97 	bl	800268a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f5c:	e026      	b.n	8003fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d209      	bcs.n	8003f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f7fe fba5 	bl	80026d2 <vListInsert>
}
 8003f88:	e010      	b.n	8003fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fe fb9b 	bl	80026d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d202      	bcs.n	8003fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000d90 	.word	0x20000d90
 8003fb8:	200008b8 	.word	0x200008b8
 8003fbc:	20000d78 	.word	0x20000d78
 8003fc0:	20000d48 	.word	0x20000d48
 8003fc4:	20000d44 	.word	0x20000d44
 8003fc8:	20000dac 	.word	0x20000dac

08003fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fd6:	f000 fb07 	bl	80045e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fda:	4b1c      	ldr	r3, [pc, #112]	; (800404c <xTimerCreateTimerTask+0x80>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d021      	beq.n	8004026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fea:	1d3a      	adds	r2, r7, #4
 8003fec:	f107 0108 	add.w	r1, r7, #8
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fb01 	bl	80025fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	2302      	movs	r3, #2
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2300      	movs	r3, #0
 800400a:	460a      	mov	r2, r1
 800400c:	4910      	ldr	r1, [pc, #64]	; (8004050 <xTimerCreateTimerTask+0x84>)
 800400e:	4811      	ldr	r0, [pc, #68]	; (8004054 <xTimerCreateTimerTask+0x88>)
 8004010:	f7ff f8e8 	bl	80031e4 <xTaskCreateStatic>
 8004014:	4603      	mov	r3, r0
 8004016:	4a10      	ldr	r2, [pc, #64]	; (8004058 <xTimerCreateTimerTask+0x8c>)
 8004018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTimerCreateTimerTask+0x8c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	613b      	str	r3, [r7, #16]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000de8 	.word	0x20000de8
 8004050:	08005f3c 	.word	0x08005f3c
 8004054:	08004191 	.word	0x08004191
 8004058:	20000dec 	.word	0x20000dec

0800405c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <xTimerGenericCommand+0x98>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02a      	beq.n	80040e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	dc18      	bgt.n	80040d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040a4:	f7ff feb2 	bl	8003e0c <xTaskGetSchedulerState>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d109      	bne.n	80040c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <xTimerGenericCommand+0x98>)
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f107 0110 	add.w	r1, r7, #16
 80040b6:	2300      	movs	r3, #0
 80040b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ba:	f7fe fcab 	bl	8002a14 <xQueueGenericSend>
 80040be:	6278      	str	r0, [r7, #36]	; 0x24
 80040c0:	e012      	b.n	80040e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <xTimerGenericCommand+0x98>)
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f107 0110 	add.w	r1, r7, #16
 80040ca:	2300      	movs	r3, #0
 80040cc:	2200      	movs	r2, #0
 80040ce:	f7fe fca1 	bl	8002a14 <xQueueGenericSend>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24
 80040d4:	e008      	b.n	80040e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <xTimerGenericCommand+0x98>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	f107 0110 	add.w	r1, r7, #16
 80040de:	2300      	movs	r3, #0
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f7fe fd95 	bl	8002c10 <xQueueGenericSendFromISR>
 80040e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3728      	adds	r7, #40	; 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000de8 	.word	0x20000de8

080040f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <prvProcessExpiredTimer+0x94>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fb17 	bl	8002744 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d022      	beq.n	800416a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	18d1      	adds	r1, r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	6978      	ldr	r0, [r7, #20]
 8004132:	f000 f8d1 	bl	80042d8 <prvInsertTimerInActiveList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01f      	beq.n	800417c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800413c:	2300      	movs	r3, #0
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	2300      	movs	r3, #0
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	2100      	movs	r1, #0
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff88 	bl	800405c <xTimerGenericCommand>
 800414c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d113      	bne.n	800417c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	4798      	blx	r3
}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000de0 	.word	0x20000de0

08004190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004198:	f107 0308 	add.w	r3, r7, #8
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f857 	bl	8004250 <prvGetNextExpireTime>
 80041a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4619      	mov	r1, r3
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f803 	bl	80041b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041ae:	f000 f8d5 	bl	800435c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b2:	e7f1      	b.n	8004198 <prvTimerTask+0x8>

080041b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041be:	f7ff fa39 	bl	8003634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f866 	bl	8004298 <prvSampleTimeNow>
 80041cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d130      	bne.n	8004236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <prvProcessTimerOrBlockTask+0x3c>
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d806      	bhi.n	80041f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041e2:	f7ff fa35 	bl	8003650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff85 	bl	80040f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041ee:	e024      	b.n	800423a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <prvProcessTimerOrBlockTask+0x90>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <prvProcessTimerOrBlockTask+0x50>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <prvProcessTimerOrBlockTask+0x52>
 8004204:	2300      	movs	r3, #0
 8004206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <prvProcessTimerOrBlockTask+0x94>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	f7fe ffb1 	bl	800317c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800421a:	f7ff fa19 	bl	8003650 <xTaskResumeAll>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <prvProcessTimerOrBlockTask+0x98>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
}
 8004234:	e001      	b.n	800423a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004236:	f7ff fa0b 	bl	8003650 <xTaskResumeAll>
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000de4 	.word	0x20000de4
 8004248:	20000de8 	.word	0x20000de8
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <prvGetNextExpireTime+0x44>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <prvGetNextExpireTime+0x16>
 8004262:	2201      	movs	r2, #1
 8004264:	e000      	b.n	8004268 <prvGetNextExpireTime+0x18>
 8004266:	2200      	movs	r2, #0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <prvGetNextExpireTime+0x44>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e001      	b.n	8004284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004284:	68fb      	ldr	r3, [r7, #12]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000de0 	.word	0x20000de0

08004298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042a0:	f7ff fa74 	bl	800378c <xTaskGetTickCount>
 80042a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <prvSampleTimeNow+0x3c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d205      	bcs.n	80042bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042b0:	f000 f936 	bl	8004520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e002      	b.n	80042c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042c2:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <prvSampleTimeNow+0x3c>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000df0 	.word	0x20000df0

080042d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d812      	bhi.n	8004324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	1ad2      	subs	r2, r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e01b      	b.n	800434a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <prvInsertTimerInActiveList+0x7c>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f7fe f9d8 	bl	80026d2 <vListInsert>
 8004322:	e012      	b.n	800434a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d206      	bcs.n	800433a <prvInsertTimerInActiveList+0x62>
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e007      	b.n	800434a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <prvInsertTimerInActiveList+0x80>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f7fe f9c4 	bl	80026d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800434a:	697b      	ldr	r3, [r7, #20]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000de4 	.word	0x20000de4
 8004358:	20000de0 	.word	0x20000de0

0800435c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004362:	e0ca      	b.n	80044fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da18      	bge.n	800439c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	3304      	adds	r3, #4
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	61fb      	str	r3, [r7, #28]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004392:	6850      	ldr	r0, [r2, #4]
 8004394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004396:	6892      	ldr	r2, [r2, #8]
 8004398:	4611      	mov	r1, r2
 800439a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f2c0 80ab 	blt.w	80044fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fe f9c5 	bl	8002744 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043ba:	463b      	mov	r3, r7
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff6b 	bl	8004298 <prvSampleTimeNow>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	f200 8096 	bhi.w	80044f8 <prvProcessReceivedCommands+0x19c>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <prvProcessReceivedCommands+0x78>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004471 	.word	0x08004471
 80043e4:	08004485 	.word	0x08004485
 80043e8:	080044cf 	.word	0x080044cf
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	08004471 	.word	0x08004471
 80043f8:	08004485 	.word	0x08004485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441c:	f7ff ff5c 	bl	80042d8 <prvInsertTimerInActiveList>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d069      	beq.n	80044fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05e      	beq.n	80044fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	441a      	add	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	2100      	movs	r1, #0
 800444c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444e:	f7ff fe05 	bl	800405c <xTimerGenericCommand>
 8004452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d14f      	bne.n	80044fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61bb      	str	r3, [r7, #24]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004482:	e03a      	b.n	80044fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	617b      	str	r3, [r7, #20]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	18d1      	adds	r1, r2, r3
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c8:	f7ff ff06 	bl	80042d8 <prvInsertTimerInActiveList>
					break;
 80044cc:	e015      	b.n	80044fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f000 fbdf 	bl	8004ca0 <vPortFree>
 80044e2:	e00a      	b.n	80044fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044f6:	e000      	b.n	80044fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80044f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <prvProcessReceivedCommands+0x1c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	1d39      	adds	r1, r7, #4
 8004500:	2200      	movs	r2, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fc20 	bl	8002d48 <xQueueReceive>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	f47f af2a 	bne.w	8004364 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	3730      	adds	r7, #48	; 0x30
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000de8 	.word	0x20000de8

08004520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004526:	e048      	b.n	80045ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004532:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe f8ff 	bl	8002744 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02e      	beq.n	80045ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90e      	bls.n	800458c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7fe f8a4 	bl	80026d2 <vListInsert>
 800458a:	e016      	b.n	80045ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800458c:	2300      	movs	r3, #0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	2100      	movs	r1, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff fd60 	bl	800405c <xTimerGenericCommand>
 800459c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	603b      	str	r3, [r7, #0]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1b1      	bne.n	8004528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <prvSwitchTimerLists+0xc4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <prvSwitchTimerLists+0xc0>)
 80045d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <prvSwitchTimerLists+0xc4>)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6013      	str	r3, [r2, #0]
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000de0 	.word	0x20000de0
 80045e4:	20000de4 	.word	0x20000de4

080045e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045ee:	f000 f969 	bl	80048c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <prvCheckForValidListAndQueue+0x60>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d120      	bne.n	800463c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045fa:	4814      	ldr	r0, [pc, #80]	; (800464c <prvCheckForValidListAndQueue+0x64>)
 80045fc:	f7fe f818 	bl	8002630 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004600:	4813      	ldr	r0, [pc, #76]	; (8004650 <prvCheckForValidListAndQueue+0x68>)
 8004602:	f7fe f815 	bl	8002630 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <prvCheckForValidListAndQueue+0x6c>)
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <prvCheckForValidListAndQueue+0x64>)
 800460a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <prvCheckForValidListAndQueue+0x70>)
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <prvCheckForValidListAndQueue+0x68>)
 8004610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004612:	2300      	movs	r3, #0
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <prvCheckForValidListAndQueue+0x74>)
 8004618:	4a11      	ldr	r2, [pc, #68]	; (8004660 <prvCheckForValidListAndQueue+0x78>)
 800461a:	2110      	movs	r1, #16
 800461c:	200a      	movs	r0, #10
 800461e:	f7fe f923 	bl	8002868 <xQueueGenericCreateStatic>
 8004622:	4603      	mov	r3, r0
 8004624:	4a08      	ldr	r2, [pc, #32]	; (8004648 <prvCheckForValidListAndQueue+0x60>)
 8004626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <prvCheckForValidListAndQueue+0x60>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <prvCheckForValidListAndQueue+0x60>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <prvCheckForValidListAndQueue+0x7c>)
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fd76 	bl	8003128 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800463c:	f000 f972 	bl	8004924 <vPortExitCritical>
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000de8 	.word	0x20000de8
 800464c:	20000db8 	.word	0x20000db8
 8004650:	20000dcc 	.word	0x20000dcc
 8004654:	20000de0 	.word	0x20000de0
 8004658:	20000de4 	.word	0x20000de4
 800465c:	20000e94 	.word	0x20000e94
 8004660:	20000df4 	.word	0x20000df4
 8004664:	08005f44 	.word	0x08005f44

08004668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b04      	subs	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b04      	subs	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b04      	subs	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004698:	4a0c      	ldr	r2, [pc, #48]	; (80046cc <pxPortInitialiseStack+0x64>)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b14      	subs	r3, #20
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f06f 0202 	mvn.w	r2, #2
 80046b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b20      	subs	r3, #32
 80046bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	080046d1 	.word	0x080046d1

080046d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <prvTaskExitError+0x54>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d00a      	beq.n	80046fa <prvTaskExitError+0x2a>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <prvTaskExitError+0x28>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
}
 800470c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800470e:	bf00      	nop
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0fc      	beq.n	8004710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	2000000c 	.word	0x2000000c
	...

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800477a:	bf00      	nop
 800477c:	e000ed08 	.word	0xe000ed08

08004780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004786:	4b46      	ldr	r3, [pc, #280]	; (80048a0 <xPortStartScheduler+0x120>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a46      	ldr	r2, [pc, #280]	; (80048a4 <xPortStartScheduler+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10a      	bne.n	80047a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <xPortStartScheduler+0x120>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3f      	ldr	r2, [pc, #252]	; (80048a8 <xPortStartScheduler+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10a      	bne.n	80047c6 <xPortStartScheduler+0x46>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <xPortStartScheduler+0x12c>)
 80047c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <xPortStartScheduler+0x130>)
 80047ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ee:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <xPortStartScheduler+0x134>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f4:	e009      	b.n	800480a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <xPortStartScheduler+0x134>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <xPortStartScheduler+0x134>)
 80047fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d0ef      	beq.n	80047f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <xPortStartScheduler+0x134>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	d00a      	beq.n	8004838 <xPortStartScheduler+0xb8>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60bb      	str	r3, [r7, #8]
}
 8004834:	bf00      	nop
 8004836:	e7fe      	b.n	8004836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004838:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <xPortStartScheduler+0x134>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <xPortStartScheduler+0x134>)
 8004840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xPortStartScheduler+0x134>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <xPortStartScheduler+0x134>)
 800484c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <xPortStartScheduler+0x138>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <xPortStartScheduler+0x138>)
 800485c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <xPortStartScheduler+0x138>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <xPortStartScheduler+0x138>)
 8004868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800486c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800486e:	f000 f8dd 	bl	8004a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <xPortStartScheduler+0x13c>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004878:	f000 f8fc 	bl	8004a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <xPortStartScheduler+0x140>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0f      	ldr	r2, [pc, #60]	; (80048c0 <xPortStartScheduler+0x140>)
 8004882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004888:	f7ff ff66 	bl	8004758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800488c:	f7ff f848 	bl	8003920 <vTaskSwitchContext>
	prvTaskExitError();
 8004890:	f7ff ff1e 	bl	80046d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	e000ed00 	.word	0xe000ed00
 80048a4:	410fc271 	.word	0x410fc271
 80048a8:	410fc270 	.word	0x410fc270
 80048ac:	e000e400 	.word	0xe000e400
 80048b0:	20000ee4 	.word	0x20000ee4
 80048b4:	20000ee8 	.word	0x20000ee8
 80048b8:	e000ed20 	.word	0xe000ed20
 80048bc:	2000000c 	.word	0x2000000c
 80048c0:	e000ef34 	.word	0xe000ef34

080048c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	607b      	str	r3, [r7, #4]
}
 80048dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <vPortEnterCritical+0x58>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <vPortEnterCritical+0x58>)
 80048e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <vPortEnterCritical+0x58>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10f      	bne.n	8004910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <vPortEnterCritical+0x5c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <vPortEnterCritical+0x4c>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	603b      	str	r3, [r7, #0]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <vPortEnterCritical+0x4a>
	}
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	2000000c 	.word	0x2000000c
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <vPortExitCritical+0x50>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <vPortExitCritical+0x24>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	607b      	str	r3, [r7, #4]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <vPortExitCritical+0x50>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3b01      	subs	r3, #1
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <vPortExitCritical+0x50>)
 8004950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <vPortExitCritical+0x50>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d105      	bne.n	8004966 <vPortExitCritical+0x42>
 800495a:	2300      	movs	r3, #0
 800495c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f383 8811 	msr	BASEPRI, r3
}
 8004964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
	...

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f01e 0f10 	tst.w	lr, #16
 8004990:	bf08      	it	eq
 8004992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049a4:	f380 8811 	msr	BASEPRI, r0
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f7fe ffb6 	bl	8003920 <vTaskSwitchContext>
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f380 8811 	msr	BASEPRI, r0
 80049bc:	bc09      	pop	{r0, r3}
 80049be:	6819      	ldr	r1, [r3, #0]
 80049c0:	6808      	ldr	r0, [r1, #0]
 80049c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c6:	f01e 0f10 	tst.w	lr, #16
 80049ca:	bf08      	it	eq
 80049cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049d0:	f380 8809 	msr	PSP, r0
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst>:
 80049e0:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a02:	f7fe fed3 	bl	80037ac <xTaskIncrementTick>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <xPortSysTickHandler+0x40>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f383 8811 	msr	BASEPRI, r3
}
 8004a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <vPortSetupTimerInterrupt+0x38>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <vPortSetupTimerInterrupt+0x3c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <vPortSetupTimerInterrupt+0x40>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <vPortSetupTimerInterrupt+0x44>)
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <vPortSetupTimerInterrupt+0x34>)
 8004a50:	2207      	movs	r2, #7
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e010 	.word	0xe000e010
 8004a64:	e000e018 	.word	0xe000e018
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	10624dd3 	.word	0x10624dd3
 8004a70:	e000e014 	.word	0xe000e014

08004a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a84 <vPortEnableVFP+0x10>
 8004a78:	6801      	ldr	r1, [r0, #0]
 8004a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a7e:	6001      	str	r1, [r0, #0]
 8004a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed88 	.word	0xe000ed88

08004a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a8e:	f3ef 8305 	mrs	r3, IPSR
 8004a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d914      	bls.n	8004ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <vPortValidateInterruptPriority+0x70>)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <vPortValidateInterruptPriority+0x74>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	7afa      	ldrb	r2, [r7, #11]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d20a      	bcs.n	8004ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	607b      	str	r3, [r7, #4]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <vPortValidateInterruptPriority+0x78>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <vPortValidateInterruptPriority+0x7c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d90a      	bls.n	8004aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	603b      	str	r3, [r7, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <vPortValidateInterruptPriority+0x60>
	}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000e3f0 	.word	0xe000e3f0
 8004afc:	20000ee4 	.word	0x20000ee4
 8004b00:	e000ed0c 	.word	0xe000ed0c
 8004b04:	20000ee8 	.word	0x20000ee8

08004b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b14:	f7fe fd8e 	bl	8003634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b18:	4b5b      	ldr	r3, [pc, #364]	; (8004c88 <pvPortMalloc+0x180>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b20:	f000 f920 	bl	8004d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <pvPortMalloc+0x184>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8093 	bne.w	8004c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01d      	beq.n	8004b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b38:	2208      	movs	r2, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d014      	beq.n	8004b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
 8004b50:	3308      	adds	r3, #8
 8004b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <pvPortMalloc+0x6c>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	617b      	str	r3, [r7, #20]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d06e      	beq.n	8004c58 <pvPortMalloc+0x150>
 8004b7a:	4b45      	ldr	r3, [pc, #276]	; (8004c90 <pvPortMalloc+0x188>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d869      	bhi.n	8004c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b84:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <pvPortMalloc+0x18c>)
 8004b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b88:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <pvPortMalloc+0x18c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8e:	e004      	b.n	8004b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d903      	bls.n	8004bac <pvPortMalloc+0xa4>
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f1      	bne.n	8004b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bac:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <pvPortMalloc+0x180>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d050      	beq.n	8004c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2208      	movs	r2, #8
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	1ad2      	subs	r2, r2, r3
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d91f      	bls.n	8004c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <pvPortMalloc+0xf8>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	613b      	str	r3, [r7, #16]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f000 f908 	bl	8004e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <pvPortMalloc+0x188>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <pvPortMalloc+0x188>)
 8004c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <pvPortMalloc+0x188>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <pvPortMalloc+0x190>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d203      	bcs.n	8004c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <pvPortMalloc+0x188>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <pvPortMalloc+0x190>)
 8004c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0x184>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <pvPortMalloc+0x194>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <pvPortMalloc+0x194>)
 8004c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c58:	f7fe fcfa 	bl	8003650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <pvPortMalloc+0x174>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60fb      	str	r3, [r7, #12]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <pvPortMalloc+0x172>
	return pvReturn;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20004af4 	.word	0x20004af4
 8004c8c:	20004b08 	.word	0x20004b08
 8004c90:	20004af8 	.word	0x20004af8
 8004c94:	20004aec 	.word	0x20004aec
 8004c98:	20004afc 	.word	0x20004afc
 8004c9c:	20004b00 	.word	0x20004b00

08004ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d04d      	beq.n	8004d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	425b      	negs	r3, r3
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <vPortFree+0xb8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <vPortFree+0x44>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60fb      	str	r3, [r7, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <vPortFree+0x62>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60bb      	str	r3, [r7, #8]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <vPortFree+0xb8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01e      	beq.n	8004d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11a      	bne.n	8004d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <vPortFree+0xb8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	401a      	ands	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d28:	f7fe fc84 	bl	8003634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <vPortFree+0xbc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <vPortFree+0xbc>)
 8004d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d3a:	6938      	ldr	r0, [r7, #16]
 8004d3c:	f000 f874 	bl	8004e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <vPortFree+0xc0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a06      	ldr	r2, [pc, #24]	; (8004d60 <vPortFree+0xc0>)
 8004d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d4a:	f7fe fc81 	bl	8003650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20004b08 	.word	0x20004b08
 8004d5c:	20004af8 	.word	0x20004af8
 8004d60:	20004b04 	.word	0x20004b04

08004d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d70:	4b27      	ldr	r3, [pc, #156]	; (8004e10 <prvHeapInit+0xac>)
 8004d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <prvHeapInit+0xac>)
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <prvHeapInit+0xb0>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <prvHeapInit+0xb0>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4413      	add	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004db0:	2208      	movs	r2, #8
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0307 	bic.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <prvHeapInit+0xb4>)
 8004dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <prvHeapInit+0xb4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <prvHeapInit+0xb4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvHeapInit+0xb4>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <prvHeapInit+0xb8>)
 8004df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <prvHeapInit+0xbc>)
 8004dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <prvHeapInit+0xc0>)
 8004dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e02:	601a      	str	r2, [r3, #0]
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000eec 	.word	0x20000eec
 8004e14:	20004aec 	.word	0x20004aec
 8004e18:	20004af4 	.word	0x20004af4
 8004e1c:	20004afc 	.word	0x20004afc
 8004e20:	20004af8 	.word	0x20004af8
 8004e24:	20004b08 	.word	0x20004b08

08004e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e30:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <prvInsertBlockIntoFreeList+0xac>)
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e002      	b.n	8004e3c <prvInsertBlockIntoFreeList+0x14>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d8f7      	bhi.n	8004e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d108      	bne.n	8004e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	441a      	add	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d118      	bne.n	8004eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d00d      	beq.n	8004ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e008      	b.n	8004eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e003      	b.n	8004eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d002      	beq.n	8004ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20004aec 	.word	0x20004aec
 8004ed8:	20004af4 	.word	0x20004af4

08004edc <std>:
 8004edc:	2300      	movs	r3, #0
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eea:	6083      	str	r3, [r0, #8]
 8004eec:	8181      	strh	r1, [r0, #12]
 8004eee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ef0:	81c2      	strh	r2, [r0, #14]
 8004ef2:	6183      	str	r3, [r0, #24]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	305c      	adds	r0, #92	; 0x5c
 8004efa:	f000 f9e5 	bl	80052c8 <memset>
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <std+0x38>)
 8004f00:	6263      	str	r3, [r4, #36]	; 0x24
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <std+0x3c>)
 8004f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f06:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <std+0x40>)
 8004f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f0a:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <std+0x44>)
 8004f0c:	6224      	str	r4, [r4, #32]
 8004f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	08005119 	.word	0x08005119
 8004f18:	0800513b 	.word	0x0800513b
 8004f1c:	08005173 	.word	0x08005173
 8004f20:	08005197 	.word	0x08005197

08004f24 <stdio_exit_handler>:
 8004f24:	4a02      	ldr	r2, [pc, #8]	; (8004f30 <stdio_exit_handler+0xc>)
 8004f26:	4903      	ldr	r1, [pc, #12]	; (8004f34 <stdio_exit_handler+0x10>)
 8004f28:	4803      	ldr	r0, [pc, #12]	; (8004f38 <stdio_exit_handler+0x14>)
 8004f2a:	f000 b869 	b.w	8005000 <_fwalk_sglue>
 8004f2e:	bf00      	nop
 8004f30:	20000010 	.word	0x20000010
 8004f34:	08005d29 	.word	0x08005d29
 8004f38:	2000001c 	.word	0x2000001c

08004f3c <cleanup_stdio>:
 8004f3c:	6841      	ldr	r1, [r0, #4]
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <cleanup_stdio+0x34>)
 8004f40:	4299      	cmp	r1, r3
 8004f42:	b510      	push	{r4, lr}
 8004f44:	4604      	mov	r4, r0
 8004f46:	d001      	beq.n	8004f4c <cleanup_stdio+0x10>
 8004f48:	f000 feee 	bl	8005d28 <_fflush_r>
 8004f4c:	68a1      	ldr	r1, [r4, #8]
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <cleanup_stdio+0x38>)
 8004f50:	4299      	cmp	r1, r3
 8004f52:	d002      	beq.n	8004f5a <cleanup_stdio+0x1e>
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 fee7 	bl	8005d28 <_fflush_r>
 8004f5a:	68e1      	ldr	r1, [r4, #12]
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <cleanup_stdio+0x3c>)
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	d004      	beq.n	8004f6c <cleanup_stdio+0x30>
 8004f62:	4620      	mov	r0, r4
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f000 bede 	b.w	8005d28 <_fflush_r>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	20004b0c 	.word	0x20004b0c
 8004f74:	20004b74 	.word	0x20004b74
 8004f78:	20004bdc 	.word	0x20004bdc

08004f7c <global_stdio_init.part.0>:
 8004f7c:	b510      	push	{r4, lr}
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <global_stdio_init.part.0+0x30>)
 8004f80:	4c0b      	ldr	r4, [pc, #44]	; (8004fb0 <global_stdio_init.part.0+0x34>)
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <global_stdio_init.part.0+0x38>)
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	4620      	mov	r0, r4
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	f7ff ffa6 	bl	8004edc <std>
 8004f90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f94:	2201      	movs	r2, #1
 8004f96:	2109      	movs	r1, #9
 8004f98:	f7ff ffa0 	bl	8004edc <std>
 8004f9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fa6:	2112      	movs	r1, #18
 8004fa8:	f7ff bf98 	b.w	8004edc <std>
 8004fac:	20004c44 	.word	0x20004c44
 8004fb0:	20004b0c 	.word	0x20004b0c
 8004fb4:	08004f25 	.word	0x08004f25

08004fb8 <__sfp_lock_acquire>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sfp_lock_acquire+0x8>)
 8004fba:	f000 ba53 	b.w	8005464 <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	20004c4d 	.word	0x20004c4d

08004fc4 <__sfp_lock_release>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sfp_lock_release+0x8>)
 8004fc6:	f000 ba4e 	b.w	8005466 <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20004c4d 	.word	0x20004c4d

08004fd0 <__sinit>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f7ff fff0 	bl	8004fb8 <__sfp_lock_acquire>
 8004fd8:	6a23      	ldr	r3, [r4, #32]
 8004fda:	b11b      	cbz	r3, 8004fe4 <__sinit+0x14>
 8004fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe0:	f7ff bff0 	b.w	8004fc4 <__sfp_lock_release>
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <__sinit+0x28>)
 8004fe6:	6223      	str	r3, [r4, #32]
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <__sinit+0x2c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f5      	bne.n	8004fdc <__sinit+0xc>
 8004ff0:	f7ff ffc4 	bl	8004f7c <global_stdio_init.part.0>
 8004ff4:	e7f2      	b.n	8004fdc <__sinit+0xc>
 8004ff6:	bf00      	nop
 8004ff8:	08004f3d 	.word	0x08004f3d
 8004ffc:	20004c44 	.word	0x20004c44

08005000 <_fwalk_sglue>:
 8005000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005004:	4607      	mov	r7, r0
 8005006:	4688      	mov	r8, r1
 8005008:	4614      	mov	r4, r2
 800500a:	2600      	movs	r6, #0
 800500c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005010:	f1b9 0901 	subs.w	r9, r9, #1
 8005014:	d505      	bpl.n	8005022 <_fwalk_sglue+0x22>
 8005016:	6824      	ldr	r4, [r4, #0]
 8005018:	2c00      	cmp	r4, #0
 800501a:	d1f7      	bne.n	800500c <_fwalk_sglue+0xc>
 800501c:	4630      	mov	r0, r6
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d907      	bls.n	8005038 <_fwalk_sglue+0x38>
 8005028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800502c:	3301      	adds	r3, #1
 800502e:	d003      	beq.n	8005038 <_fwalk_sglue+0x38>
 8005030:	4629      	mov	r1, r5
 8005032:	4638      	mov	r0, r7
 8005034:	47c0      	blx	r8
 8005036:	4306      	orrs	r6, r0
 8005038:	3568      	adds	r5, #104	; 0x68
 800503a:	e7e9      	b.n	8005010 <_fwalk_sglue+0x10>

0800503c <iprintf>:
 800503c:	b40f      	push	{r0, r1, r2, r3}
 800503e:	b507      	push	{r0, r1, r2, lr}
 8005040:	4906      	ldr	r1, [pc, #24]	; (800505c <iprintf+0x20>)
 8005042:	ab04      	add	r3, sp, #16
 8005044:	6808      	ldr	r0, [r1, #0]
 8005046:	f853 2b04 	ldr.w	r2, [r3], #4
 800504a:	6881      	ldr	r1, [r0, #8]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	f000 fb3b 	bl	80056c8 <_vfiprintf_r>
 8005052:	b003      	add	sp, #12
 8005054:	f85d eb04 	ldr.w	lr, [sp], #4
 8005058:	b004      	add	sp, #16
 800505a:	4770      	bx	lr
 800505c:	20000068 	.word	0x20000068

08005060 <_puts_r>:
 8005060:	6a03      	ldr	r3, [r0, #32]
 8005062:	b570      	push	{r4, r5, r6, lr}
 8005064:	6884      	ldr	r4, [r0, #8]
 8005066:	4605      	mov	r5, r0
 8005068:	460e      	mov	r6, r1
 800506a:	b90b      	cbnz	r3, 8005070 <_puts_r+0x10>
 800506c:	f7ff ffb0 	bl	8004fd0 <__sinit>
 8005070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005072:	07db      	lsls	r3, r3, #31
 8005074:	d405      	bmi.n	8005082 <_puts_r+0x22>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	0598      	lsls	r0, r3, #22
 800507a:	d402      	bmi.n	8005082 <_puts_r+0x22>
 800507c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507e:	f000 f9f1 	bl	8005464 <__retarget_lock_acquire_recursive>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	0719      	lsls	r1, r3, #28
 8005086:	d513      	bpl.n	80050b0 <_puts_r+0x50>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	b18b      	cbz	r3, 80050b0 <_puts_r+0x50>
 800508c:	3e01      	subs	r6, #1
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005094:	3b01      	subs	r3, #1
 8005096:	60a3      	str	r3, [r4, #8]
 8005098:	b9e9      	cbnz	r1, 80050d6 <_puts_r+0x76>
 800509a:	2b00      	cmp	r3, #0
 800509c:	da2e      	bge.n	80050fc <_puts_r+0x9c>
 800509e:	4622      	mov	r2, r4
 80050a0:	210a      	movs	r1, #10
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f87b 	bl	800519e <__swbuf_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d007      	beq.n	80050bc <_puts_r+0x5c>
 80050ac:	250a      	movs	r5, #10
 80050ae:	e007      	b.n	80050c0 <_puts_r+0x60>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f8b0 	bl	8005218 <__swsetup_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0e7      	beq.n	800508c <_puts_r+0x2c>
 80050bc:	f04f 35ff 	mov.w	r5, #4294967295
 80050c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d405      	bmi.n	80050d2 <_puts_r+0x72>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	059b      	lsls	r3, r3, #22
 80050ca:	d402      	bmi.n	80050d2 <_puts_r+0x72>
 80050cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ce:	f000 f9ca 	bl	8005466 <__retarget_lock_release_recursive>
 80050d2:	4628      	mov	r0, r5
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da04      	bge.n	80050e4 <_puts_r+0x84>
 80050da:	69a2      	ldr	r2, [r4, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	dc06      	bgt.n	80050ee <_puts_r+0x8e>
 80050e0:	290a      	cmp	r1, #10
 80050e2:	d004      	beq.n	80050ee <_puts_r+0x8e>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	6022      	str	r2, [r4, #0]
 80050ea:	7019      	strb	r1, [r3, #0]
 80050ec:	e7cf      	b.n	800508e <_puts_r+0x2e>
 80050ee:	4622      	mov	r2, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f854 	bl	800519e <__swbuf_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d1c9      	bne.n	800508e <_puts_r+0x2e>
 80050fa:	e7df      	b.n	80050bc <_puts_r+0x5c>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	250a      	movs	r5, #10
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	701d      	strb	r5, [r3, #0]
 8005106:	e7db      	b.n	80050c0 <_puts_r+0x60>

08005108 <puts>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <puts+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f7ff bfa7 	b.w	8005060 <_puts_r>
 8005112:	bf00      	nop
 8005114:	20000068 	.word	0x20000068

08005118 <__sread>:
 8005118:	b510      	push	{r4, lr}
 800511a:	460c      	mov	r4, r1
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	f000 f952 	bl	80053c8 <_read_r>
 8005124:	2800      	cmp	r0, #0
 8005126:	bfab      	itete	ge
 8005128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800512a:	89a3      	ldrhlt	r3, [r4, #12]
 800512c:	181b      	addge	r3, r3, r0
 800512e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005132:	bfac      	ite	ge
 8005134:	6563      	strge	r3, [r4, #84]	; 0x54
 8005136:	81a3      	strhlt	r3, [r4, #12]
 8005138:	bd10      	pop	{r4, pc}

0800513a <__swrite>:
 800513a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	461f      	mov	r7, r3
 8005140:	898b      	ldrh	r3, [r1, #12]
 8005142:	05db      	lsls	r3, r3, #23
 8005144:	4605      	mov	r5, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4616      	mov	r6, r2
 800514a:	d505      	bpl.n	8005158 <__swrite+0x1e>
 800514c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005150:	2302      	movs	r3, #2
 8005152:	2200      	movs	r2, #0
 8005154:	f000 f926 	bl	80053a4 <_lseek_r>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	4632      	mov	r2, r6
 8005166:	463b      	mov	r3, r7
 8005168:	4628      	mov	r0, r5
 800516a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516e:	f000 b93d 	b.w	80053ec <_write_r>

08005172 <__sseek>:
 8005172:	b510      	push	{r4, lr}
 8005174:	460c      	mov	r4, r1
 8005176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517a:	f000 f913 	bl	80053a4 <_lseek_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	bf15      	itete	ne
 8005184:	6560      	strne	r0, [r4, #84]	; 0x54
 8005186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800518a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800518e:	81a3      	strheq	r3, [r4, #12]
 8005190:	bf18      	it	ne
 8005192:	81a3      	strhne	r3, [r4, #12]
 8005194:	bd10      	pop	{r4, pc}

08005196 <__sclose>:
 8005196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519a:	f000 b89d 	b.w	80052d8 <_close_r>

0800519e <__swbuf_r>:
 800519e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a0:	460e      	mov	r6, r1
 80051a2:	4614      	mov	r4, r2
 80051a4:	4605      	mov	r5, r0
 80051a6:	b118      	cbz	r0, 80051b0 <__swbuf_r+0x12>
 80051a8:	6a03      	ldr	r3, [r0, #32]
 80051aa:	b90b      	cbnz	r3, 80051b0 <__swbuf_r+0x12>
 80051ac:	f7ff ff10 	bl	8004fd0 <__sinit>
 80051b0:	69a3      	ldr	r3, [r4, #24]
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	071a      	lsls	r2, r3, #28
 80051b8:	d525      	bpl.n	8005206 <__swbuf_r+0x68>
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	b31b      	cbz	r3, 8005206 <__swbuf_r+0x68>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	1a98      	subs	r0, r3, r2
 80051c4:	6963      	ldr	r3, [r4, #20]
 80051c6:	b2f6      	uxtb	r6, r6
 80051c8:	4283      	cmp	r3, r0
 80051ca:	4637      	mov	r7, r6
 80051cc:	dc04      	bgt.n	80051d8 <__swbuf_r+0x3a>
 80051ce:	4621      	mov	r1, r4
 80051d0:	4628      	mov	r0, r5
 80051d2:	f000 fda9 	bl	8005d28 <_fflush_r>
 80051d6:	b9e0      	cbnz	r0, 8005212 <__swbuf_r+0x74>
 80051d8:	68a3      	ldr	r3, [r4, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	701e      	strb	r6, [r3, #0]
 80051e6:	6962      	ldr	r2, [r4, #20]
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d004      	beq.n	80051f8 <__swbuf_r+0x5a>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d506      	bpl.n	8005202 <__swbuf_r+0x64>
 80051f4:	2e0a      	cmp	r6, #10
 80051f6:	d104      	bne.n	8005202 <__swbuf_r+0x64>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fd94 	bl	8005d28 <_fflush_r>
 8005200:	b938      	cbnz	r0, 8005212 <__swbuf_r+0x74>
 8005202:	4638      	mov	r0, r7
 8005204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005206:	4621      	mov	r1, r4
 8005208:	4628      	mov	r0, r5
 800520a:	f000 f805 	bl	8005218 <__swsetup_r>
 800520e:	2800      	cmp	r0, #0
 8005210:	d0d5      	beq.n	80051be <__swbuf_r+0x20>
 8005212:	f04f 37ff 	mov.w	r7, #4294967295
 8005216:	e7f4      	b.n	8005202 <__swbuf_r+0x64>

08005218 <__swsetup_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4b2a      	ldr	r3, [pc, #168]	; (80052c4 <__swsetup_r+0xac>)
 800521c:	4605      	mov	r5, r0
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	460c      	mov	r4, r1
 8005222:	b118      	cbz	r0, 800522c <__swsetup_r+0x14>
 8005224:	6a03      	ldr	r3, [r0, #32]
 8005226:	b90b      	cbnz	r3, 800522c <__swsetup_r+0x14>
 8005228:	f7ff fed2 	bl	8004fd0 <__sinit>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005232:	0718      	lsls	r0, r3, #28
 8005234:	d422      	bmi.n	800527c <__swsetup_r+0x64>
 8005236:	06d9      	lsls	r1, r3, #27
 8005238:	d407      	bmi.n	800524a <__swsetup_r+0x32>
 800523a:	2309      	movs	r3, #9
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	e034      	b.n	80052b4 <__swsetup_r+0x9c>
 800524a:	0758      	lsls	r0, r3, #29
 800524c:	d512      	bpl.n	8005274 <__swsetup_r+0x5c>
 800524e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005250:	b141      	cbz	r1, 8005264 <__swsetup_r+0x4c>
 8005252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005256:	4299      	cmp	r1, r3
 8005258:	d002      	beq.n	8005260 <__swsetup_r+0x48>
 800525a:	4628      	mov	r0, r5
 800525c:	f000 f912 	bl	8005484 <_free_r>
 8005260:	2300      	movs	r3, #0
 8005262:	6363      	str	r3, [r4, #52]	; 0x34
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	2300      	movs	r3, #0
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f043 0308 	orr.w	r3, r3, #8
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	b94b      	cbnz	r3, 8005294 <__swsetup_r+0x7c>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528a:	d003      	beq.n	8005294 <__swsetup_r+0x7c>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fd98 	bl	8005dc4 <__smakebuf_r>
 8005294:	89a0      	ldrh	r0, [r4, #12]
 8005296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800529a:	f010 0301 	ands.w	r3, r0, #1
 800529e:	d00a      	beq.n	80052b6 <__swsetup_r+0x9e>
 80052a0:	2300      	movs	r3, #0
 80052a2:	60a3      	str	r3, [r4, #8]
 80052a4:	6963      	ldr	r3, [r4, #20]
 80052a6:	425b      	negs	r3, r3
 80052a8:	61a3      	str	r3, [r4, #24]
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	b943      	cbnz	r3, 80052c0 <__swsetup_r+0xa8>
 80052ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052b2:	d1c4      	bne.n	800523e <__swsetup_r+0x26>
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	0781      	lsls	r1, r0, #30
 80052b8:	bf58      	it	pl
 80052ba:	6963      	ldrpl	r3, [r4, #20]
 80052bc:	60a3      	str	r3, [r4, #8]
 80052be:	e7f4      	b.n	80052aa <__swsetup_r+0x92>
 80052c0:	2000      	movs	r0, #0
 80052c2:	e7f7      	b.n	80052b4 <__swsetup_r+0x9c>
 80052c4:	20000068 	.word	0x20000068

080052c8 <memset>:
 80052c8:	4402      	add	r2, r0
 80052ca:	4603      	mov	r3, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	f803 1b01 	strb.w	r1, [r3], #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <_close_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_close_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb fc05 	bl	8000af2 <_close>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_close_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_close_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20004c48 	.word	0x20004c48

080052f8 <_reclaim_reent>:
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <_reclaim_reent+0xa8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4283      	cmp	r3, r0
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	4604      	mov	r4, r0
 8005302:	d04b      	beq.n	800539c <_reclaim_reent+0xa4>
 8005304:	69c3      	ldr	r3, [r0, #28]
 8005306:	b143      	cbz	r3, 800531a <_reclaim_reent+0x22>
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d144      	bne.n	8005398 <_reclaim_reent+0xa0>
 800530e:	69e3      	ldr	r3, [r4, #28]
 8005310:	6819      	ldr	r1, [r3, #0]
 8005312:	b111      	cbz	r1, 800531a <_reclaim_reent+0x22>
 8005314:	4620      	mov	r0, r4
 8005316:	f000 f8b5 	bl	8005484 <_free_r>
 800531a:	6961      	ldr	r1, [r4, #20]
 800531c:	b111      	cbz	r1, 8005324 <_reclaim_reent+0x2c>
 800531e:	4620      	mov	r0, r4
 8005320:	f000 f8b0 	bl	8005484 <_free_r>
 8005324:	69e1      	ldr	r1, [r4, #28]
 8005326:	b111      	cbz	r1, 800532e <_reclaim_reent+0x36>
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f8ab 	bl	8005484 <_free_r>
 800532e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005330:	b111      	cbz	r1, 8005338 <_reclaim_reent+0x40>
 8005332:	4620      	mov	r0, r4
 8005334:	f000 f8a6 	bl	8005484 <_free_r>
 8005338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800533a:	b111      	cbz	r1, 8005342 <_reclaim_reent+0x4a>
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f8a1 	bl	8005484 <_free_r>
 8005342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005344:	b111      	cbz	r1, 800534c <_reclaim_reent+0x54>
 8005346:	4620      	mov	r0, r4
 8005348:	f000 f89c 	bl	8005484 <_free_r>
 800534c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800534e:	b111      	cbz	r1, 8005356 <_reclaim_reent+0x5e>
 8005350:	4620      	mov	r0, r4
 8005352:	f000 f897 	bl	8005484 <_free_r>
 8005356:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005358:	b111      	cbz	r1, 8005360 <_reclaim_reent+0x68>
 800535a:	4620      	mov	r0, r4
 800535c:	f000 f892 	bl	8005484 <_free_r>
 8005360:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005362:	b111      	cbz	r1, 800536a <_reclaim_reent+0x72>
 8005364:	4620      	mov	r0, r4
 8005366:	f000 f88d 	bl	8005484 <_free_r>
 800536a:	6a23      	ldr	r3, [r4, #32]
 800536c:	b1b3      	cbz	r3, 800539c <_reclaim_reent+0xa4>
 800536e:	4620      	mov	r0, r4
 8005370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005374:	4718      	bx	r3
 8005376:	5949      	ldr	r1, [r1, r5]
 8005378:	b941      	cbnz	r1, 800538c <_reclaim_reent+0x94>
 800537a:	3504      	adds	r5, #4
 800537c:	69e3      	ldr	r3, [r4, #28]
 800537e:	2d80      	cmp	r5, #128	; 0x80
 8005380:	68d9      	ldr	r1, [r3, #12]
 8005382:	d1f8      	bne.n	8005376 <_reclaim_reent+0x7e>
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f87d 	bl	8005484 <_free_r>
 800538a:	e7c0      	b.n	800530e <_reclaim_reent+0x16>
 800538c:	680e      	ldr	r6, [r1, #0]
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f878 	bl	8005484 <_free_r>
 8005394:	4631      	mov	r1, r6
 8005396:	e7ef      	b.n	8005378 <_reclaim_reent+0x80>
 8005398:	2500      	movs	r5, #0
 800539a:	e7ef      	b.n	800537c <_reclaim_reent+0x84>
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	bf00      	nop
 80053a0:	20000068 	.word	0x20000068

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	; (80053c4 <_lseek_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb fbc4 	bl	8000b40 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20004c48 	.word	0x20004c48

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4d07      	ldr	r5, [pc, #28]	; (80053e8 <_read_r+0x20>)
 80053cc:	4604      	mov	r4, r0
 80053ce:	4608      	mov	r0, r1
 80053d0:	4611      	mov	r1, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fb fb52 	bl	8000a80 <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20004c48 	.word	0x20004c48

080053ec <_write_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_write_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fb5d 	bl	8000aba <_write>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_write_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_write_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20004c48 	.word	0x20004c48

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	; (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000068 	.word	0x20000068

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	; (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	; (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	; (8005460 <__libc_init_array+0x44>)
 8005430:	f000 fd36 	bl	8005ea0 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	08005fa0 	.word	0x08005fa0
 8005458:	08005fa0 	.word	0x08005fa0
 800545c:	08005fa0 	.word	0x08005fa0
 8005460:	08005fa4 	.word	0x08005fa4

08005464 <__retarget_lock_acquire_recursive>:
 8005464:	4770      	bx	lr

08005466 <__retarget_lock_release_recursive>:
 8005466:	4770      	bx	lr

08005468 <memcpy>:
 8005468:	440a      	add	r2, r1
 800546a:	4291      	cmp	r1, r2
 800546c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005470:	d100      	bne.n	8005474 <memcpy+0xc>
 8005472:	4770      	bx	lr
 8005474:	b510      	push	{r4, lr}
 8005476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800547e:	4291      	cmp	r1, r2
 8005480:	d1f9      	bne.n	8005476 <memcpy+0xe>
 8005482:	bd10      	pop	{r4, pc}

08005484 <_free_r>:
 8005484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005486:	2900      	cmp	r1, #0
 8005488:	d044      	beq.n	8005514 <_free_r+0x90>
 800548a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548e:	9001      	str	r0, [sp, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f1a1 0404 	sub.w	r4, r1, #4
 8005496:	bfb8      	it	lt
 8005498:	18e4      	addlt	r4, r4, r3
 800549a:	f000 f8df 	bl	800565c <__malloc_lock>
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <_free_r+0x94>)
 80054a0:	9801      	ldr	r0, [sp, #4]
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x30>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	b003      	add	sp, #12
 80054ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054b0:	f000 b8da 	b.w	8005668 <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x46>
 80054b8:	6825      	ldr	r5, [r4, #0]
 80054ba:	1961      	adds	r1, r4, r5
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x22>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x50>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x46>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1855      	adds	r5, r2, r1
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x70>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	4421      	add	r1, r4
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x26>
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	6053      	str	r3, [r2, #4]
 80054ee:	440c      	add	r4, r1
 80054f0:	6014      	str	r4, [r2, #0]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x26>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x78>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x26>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf04      	itt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	6063      	str	r3, [r4, #4]
 800550a:	bf04      	itt	eq
 800550c:	1949      	addeq	r1, r1, r5
 800550e:	6021      	streq	r1, [r4, #0]
 8005510:	6054      	str	r4, [r2, #4]
 8005512:	e7ca      	b.n	80054aa <_free_r+0x26>
 8005514:	b003      	add	sp, #12
 8005516:	bd30      	pop	{r4, r5, pc}
 8005518:	20004c50 	.word	0x20004c50

0800551c <sbrk_aligned>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4e0e      	ldr	r6, [pc, #56]	; (8005558 <sbrk_aligned+0x3c>)
 8005520:	460c      	mov	r4, r1
 8005522:	6831      	ldr	r1, [r6, #0]
 8005524:	4605      	mov	r5, r0
 8005526:	b911      	cbnz	r1, 800552e <sbrk_aligned+0x12>
 8005528:	f000 fcaa 	bl	8005e80 <_sbrk_r>
 800552c:	6030      	str	r0, [r6, #0]
 800552e:	4621      	mov	r1, r4
 8005530:	4628      	mov	r0, r5
 8005532:	f000 fca5 	bl	8005e80 <_sbrk_r>
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	d00a      	beq.n	8005550 <sbrk_aligned+0x34>
 800553a:	1cc4      	adds	r4, r0, #3
 800553c:	f024 0403 	bic.w	r4, r4, #3
 8005540:	42a0      	cmp	r0, r4
 8005542:	d007      	beq.n	8005554 <sbrk_aligned+0x38>
 8005544:	1a21      	subs	r1, r4, r0
 8005546:	4628      	mov	r0, r5
 8005548:	f000 fc9a 	bl	8005e80 <_sbrk_r>
 800554c:	3001      	adds	r0, #1
 800554e:	d101      	bne.n	8005554 <sbrk_aligned+0x38>
 8005550:	f04f 34ff 	mov.w	r4, #4294967295
 8005554:	4620      	mov	r0, r4
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	20004c54 	.word	0x20004c54

0800555c <_malloc_r>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	1ccd      	adds	r5, r1, #3
 8005562:	f025 0503 	bic.w	r5, r5, #3
 8005566:	3508      	adds	r5, #8
 8005568:	2d0c      	cmp	r5, #12
 800556a:	bf38      	it	cc
 800556c:	250c      	movcc	r5, #12
 800556e:	2d00      	cmp	r5, #0
 8005570:	4607      	mov	r7, r0
 8005572:	db01      	blt.n	8005578 <_malloc_r+0x1c>
 8005574:	42a9      	cmp	r1, r5
 8005576:	d905      	bls.n	8005584 <_malloc_r+0x28>
 8005578:	230c      	movs	r3, #12
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	2600      	movs	r6, #0
 800557e:	4630      	mov	r0, r6
 8005580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005584:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005658 <_malloc_r+0xfc>
 8005588:	f000 f868 	bl	800565c <__malloc_lock>
 800558c:	f8d8 3000 	ldr.w	r3, [r8]
 8005590:	461c      	mov	r4, r3
 8005592:	bb5c      	cbnz	r4, 80055ec <_malloc_r+0x90>
 8005594:	4629      	mov	r1, r5
 8005596:	4638      	mov	r0, r7
 8005598:	f7ff ffc0 	bl	800551c <sbrk_aligned>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	4604      	mov	r4, r0
 80055a0:	d155      	bne.n	800564e <_malloc_r+0xf2>
 80055a2:	f8d8 4000 	ldr.w	r4, [r8]
 80055a6:	4626      	mov	r6, r4
 80055a8:	2e00      	cmp	r6, #0
 80055aa:	d145      	bne.n	8005638 <_malloc_r+0xdc>
 80055ac:	2c00      	cmp	r4, #0
 80055ae:	d048      	beq.n	8005642 <_malloc_r+0xe6>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	4631      	mov	r1, r6
 80055b4:	4638      	mov	r0, r7
 80055b6:	eb04 0903 	add.w	r9, r4, r3
 80055ba:	f000 fc61 	bl	8005e80 <_sbrk_r>
 80055be:	4581      	cmp	r9, r0
 80055c0:	d13f      	bne.n	8005642 <_malloc_r+0xe6>
 80055c2:	6821      	ldr	r1, [r4, #0]
 80055c4:	1a6d      	subs	r5, r5, r1
 80055c6:	4629      	mov	r1, r5
 80055c8:	4638      	mov	r0, r7
 80055ca:	f7ff ffa7 	bl	800551c <sbrk_aligned>
 80055ce:	3001      	adds	r0, #1
 80055d0:	d037      	beq.n	8005642 <_malloc_r+0xe6>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	442b      	add	r3, r5
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	f8d8 3000 	ldr.w	r3, [r8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d038      	beq.n	8005652 <_malloc_r+0xf6>
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	42a2      	cmp	r2, r4
 80055e4:	d12b      	bne.n	800563e <_malloc_r+0xe2>
 80055e6:	2200      	movs	r2, #0
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	e00f      	b.n	800560c <_malloc_r+0xb0>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	1b52      	subs	r2, r2, r5
 80055f0:	d41f      	bmi.n	8005632 <_malloc_r+0xd6>
 80055f2:	2a0b      	cmp	r2, #11
 80055f4:	d917      	bls.n	8005626 <_malloc_r+0xca>
 80055f6:	1961      	adds	r1, r4, r5
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	6025      	str	r5, [r4, #0]
 80055fc:	bf18      	it	ne
 80055fe:	6059      	strne	r1, [r3, #4]
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	bf08      	it	eq
 8005604:	f8c8 1000 	streq.w	r1, [r8]
 8005608:	5162      	str	r2, [r4, r5]
 800560a:	604b      	str	r3, [r1, #4]
 800560c:	4638      	mov	r0, r7
 800560e:	f104 060b 	add.w	r6, r4, #11
 8005612:	f000 f829 	bl	8005668 <__malloc_unlock>
 8005616:	f026 0607 	bic.w	r6, r6, #7
 800561a:	1d23      	adds	r3, r4, #4
 800561c:	1af2      	subs	r2, r6, r3
 800561e:	d0ae      	beq.n	800557e <_malloc_r+0x22>
 8005620:	1b9b      	subs	r3, r3, r6
 8005622:	50a3      	str	r3, [r4, r2]
 8005624:	e7ab      	b.n	800557e <_malloc_r+0x22>
 8005626:	42a3      	cmp	r3, r4
 8005628:	6862      	ldr	r2, [r4, #4]
 800562a:	d1dd      	bne.n	80055e8 <_malloc_r+0x8c>
 800562c:	f8c8 2000 	str.w	r2, [r8]
 8005630:	e7ec      	b.n	800560c <_malloc_r+0xb0>
 8005632:	4623      	mov	r3, r4
 8005634:	6864      	ldr	r4, [r4, #4]
 8005636:	e7ac      	b.n	8005592 <_malloc_r+0x36>
 8005638:	4634      	mov	r4, r6
 800563a:	6876      	ldr	r6, [r6, #4]
 800563c:	e7b4      	b.n	80055a8 <_malloc_r+0x4c>
 800563e:	4613      	mov	r3, r2
 8005640:	e7cc      	b.n	80055dc <_malloc_r+0x80>
 8005642:	230c      	movs	r3, #12
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4638      	mov	r0, r7
 8005648:	f000 f80e 	bl	8005668 <__malloc_unlock>
 800564c:	e797      	b.n	800557e <_malloc_r+0x22>
 800564e:	6025      	str	r5, [r4, #0]
 8005650:	e7dc      	b.n	800560c <_malloc_r+0xb0>
 8005652:	605b      	str	r3, [r3, #4]
 8005654:	deff      	udf	#255	; 0xff
 8005656:	bf00      	nop
 8005658:	20004c50 	.word	0x20004c50

0800565c <__malloc_lock>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__malloc_lock+0x8>)
 800565e:	f7ff bf01 	b.w	8005464 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	20004c4c 	.word	0x20004c4c

08005668 <__malloc_unlock>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__malloc_unlock+0x8>)
 800566a:	f7ff befc 	b.w	8005466 <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	20004c4c 	.word	0x20004c4c

08005674 <__sfputc_r>:
 8005674:	6893      	ldr	r3, [r2, #8]
 8005676:	3b01      	subs	r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	b410      	push	{r4}
 800567c:	6093      	str	r3, [r2, #8]
 800567e:	da08      	bge.n	8005692 <__sfputc_r+0x1e>
 8005680:	6994      	ldr	r4, [r2, #24]
 8005682:	42a3      	cmp	r3, r4
 8005684:	db01      	blt.n	800568a <__sfputc_r+0x16>
 8005686:	290a      	cmp	r1, #10
 8005688:	d103      	bne.n	8005692 <__sfputc_r+0x1e>
 800568a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568e:	f7ff bd86 	b.w	800519e <__swbuf_r>
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	1c58      	adds	r0, r3, #1
 8005696:	6010      	str	r0, [r2, #0]
 8005698:	7019      	strb	r1, [r3, #0]
 800569a:	4608      	mov	r0, r1
 800569c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <__sfputs_r>:
 80056a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a4:	4606      	mov	r6, r0
 80056a6:	460f      	mov	r7, r1
 80056a8:	4614      	mov	r4, r2
 80056aa:	18d5      	adds	r5, r2, r3
 80056ac:	42ac      	cmp	r4, r5
 80056ae:	d101      	bne.n	80056b4 <__sfputs_r+0x12>
 80056b0:	2000      	movs	r0, #0
 80056b2:	e007      	b.n	80056c4 <__sfputs_r+0x22>
 80056b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b8:	463a      	mov	r2, r7
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7ff ffda 	bl	8005674 <__sfputc_r>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d1f3      	bne.n	80056ac <__sfputs_r+0xa>
 80056c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c8 <_vfiprintf_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	460d      	mov	r5, r1
 80056ce:	b09d      	sub	sp, #116	; 0x74
 80056d0:	4614      	mov	r4, r2
 80056d2:	4698      	mov	r8, r3
 80056d4:	4606      	mov	r6, r0
 80056d6:	b118      	cbz	r0, 80056e0 <_vfiprintf_r+0x18>
 80056d8:	6a03      	ldr	r3, [r0, #32]
 80056da:	b90b      	cbnz	r3, 80056e0 <_vfiprintf_r+0x18>
 80056dc:	f7ff fc78 	bl	8004fd0 <__sinit>
 80056e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e2:	07d9      	lsls	r1, r3, #31
 80056e4:	d405      	bmi.n	80056f2 <_vfiprintf_r+0x2a>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	059a      	lsls	r2, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_vfiprintf_r+0x2a>
 80056ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ee:	f7ff feb9 	bl	8005464 <__retarget_lock_acquire_recursive>
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	071b      	lsls	r3, r3, #28
 80056f6:	d501      	bpl.n	80056fc <_vfiprintf_r+0x34>
 80056f8:	692b      	ldr	r3, [r5, #16]
 80056fa:	b99b      	cbnz	r3, 8005724 <_vfiprintf_r+0x5c>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4630      	mov	r0, r6
 8005700:	f7ff fd8a 	bl	8005218 <__swsetup_r>
 8005704:	b170      	cbz	r0, 8005724 <_vfiprintf_r+0x5c>
 8005706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005708:	07dc      	lsls	r4, r3, #31
 800570a:	d504      	bpl.n	8005716 <_vfiprintf_r+0x4e>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	b01d      	add	sp, #116	; 0x74
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	0598      	lsls	r0, r3, #22
 800571a:	d4f7      	bmi.n	800570c <_vfiprintf_r+0x44>
 800571c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571e:	f7ff fea2 	bl	8005466 <__retarget_lock_release_recursive>
 8005722:	e7f3      	b.n	800570c <_vfiprintf_r+0x44>
 8005724:	2300      	movs	r3, #0
 8005726:	9309      	str	r3, [sp, #36]	; 0x24
 8005728:	2320      	movs	r3, #32
 800572a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005732:	2330      	movs	r3, #48	; 0x30
 8005734:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80058e8 <_vfiprintf_r+0x220>
 8005738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800573c:	f04f 0901 	mov.w	r9, #1
 8005740:	4623      	mov	r3, r4
 8005742:	469a      	mov	sl, r3
 8005744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005748:	b10a      	cbz	r2, 800574e <_vfiprintf_r+0x86>
 800574a:	2a25      	cmp	r2, #37	; 0x25
 800574c:	d1f9      	bne.n	8005742 <_vfiprintf_r+0x7a>
 800574e:	ebba 0b04 	subs.w	fp, sl, r4
 8005752:	d00b      	beq.n	800576c <_vfiprintf_r+0xa4>
 8005754:	465b      	mov	r3, fp
 8005756:	4622      	mov	r2, r4
 8005758:	4629      	mov	r1, r5
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ffa1 	bl	80056a2 <__sfputs_r>
 8005760:	3001      	adds	r0, #1
 8005762:	f000 80a9 	beq.w	80058b8 <_vfiprintf_r+0x1f0>
 8005766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005768:	445a      	add	r2, fp
 800576a:	9209      	str	r2, [sp, #36]	; 0x24
 800576c:	f89a 3000 	ldrb.w	r3, [sl]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80a1 	beq.w	80058b8 <_vfiprintf_r+0x1f0>
 8005776:	2300      	movs	r3, #0
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005780:	f10a 0a01 	add.w	sl, sl, #1
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	9307      	str	r3, [sp, #28]
 8005788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800578c:	931a      	str	r3, [sp, #104]	; 0x68
 800578e:	4654      	mov	r4, sl
 8005790:	2205      	movs	r2, #5
 8005792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005796:	4854      	ldr	r0, [pc, #336]	; (80058e8 <_vfiprintf_r+0x220>)
 8005798:	f7fa fd22 	bl	80001e0 <memchr>
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	b9d8      	cbnz	r0, 80057d8 <_vfiprintf_r+0x110>
 80057a0:	06d1      	lsls	r1, r2, #27
 80057a2:	bf44      	itt	mi
 80057a4:	2320      	movmi	r3, #32
 80057a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057aa:	0713      	lsls	r3, r2, #28
 80057ac:	bf44      	itt	mi
 80057ae:	232b      	movmi	r3, #43	; 0x2b
 80057b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b4:	f89a 3000 	ldrb.w	r3, [sl]
 80057b8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ba:	d015      	beq.n	80057e8 <_vfiprintf_r+0x120>
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	4654      	mov	r4, sl
 80057c0:	2000      	movs	r0, #0
 80057c2:	f04f 0c0a 	mov.w	ip, #10
 80057c6:	4621      	mov	r1, r4
 80057c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057cc:	3b30      	subs	r3, #48	; 0x30
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d94d      	bls.n	800586e <_vfiprintf_r+0x1a6>
 80057d2:	b1b0      	cbz	r0, 8005802 <_vfiprintf_r+0x13a>
 80057d4:	9207      	str	r2, [sp, #28]
 80057d6:	e014      	b.n	8005802 <_vfiprintf_r+0x13a>
 80057d8:	eba0 0308 	sub.w	r3, r0, r8
 80057dc:	fa09 f303 	lsl.w	r3, r9, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	46a2      	mov	sl, r4
 80057e6:	e7d2      	b.n	800578e <_vfiprintf_r+0xc6>
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	1d19      	adds	r1, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	9103      	str	r1, [sp, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bfbb      	ittet	lt
 80057f4:	425b      	neglt	r3, r3
 80057f6:	f042 0202 	orrlt.w	r2, r2, #2
 80057fa:	9307      	strge	r3, [sp, #28]
 80057fc:	9307      	strlt	r3, [sp, #28]
 80057fe:	bfb8      	it	lt
 8005800:	9204      	strlt	r2, [sp, #16]
 8005802:	7823      	ldrb	r3, [r4, #0]
 8005804:	2b2e      	cmp	r3, #46	; 0x2e
 8005806:	d10c      	bne.n	8005822 <_vfiprintf_r+0x15a>
 8005808:	7863      	ldrb	r3, [r4, #1]
 800580a:	2b2a      	cmp	r3, #42	; 0x2a
 800580c:	d134      	bne.n	8005878 <_vfiprintf_r+0x1b0>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d1a      	adds	r2, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9203      	str	r2, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfb8      	it	lt
 800581a:	f04f 33ff 	movlt.w	r3, #4294967295
 800581e:	3402      	adds	r4, #2
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80058f8 <_vfiprintf_r+0x230>
 8005826:	7821      	ldrb	r1, [r4, #0]
 8005828:	2203      	movs	r2, #3
 800582a:	4650      	mov	r0, sl
 800582c:	f7fa fcd8 	bl	80001e0 <memchr>
 8005830:	b138      	cbz	r0, 8005842 <_vfiprintf_r+0x17a>
 8005832:	9b04      	ldr	r3, [sp, #16]
 8005834:	eba0 000a 	sub.w	r0, r0, sl
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	4082      	lsls	r2, r0
 800583c:	4313      	orrs	r3, r2
 800583e:	3401      	adds	r4, #1
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005846:	4829      	ldr	r0, [pc, #164]	; (80058ec <_vfiprintf_r+0x224>)
 8005848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800584c:	2206      	movs	r2, #6
 800584e:	f7fa fcc7 	bl	80001e0 <memchr>
 8005852:	2800      	cmp	r0, #0
 8005854:	d03f      	beq.n	80058d6 <_vfiprintf_r+0x20e>
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <_vfiprintf_r+0x228>)
 8005858:	bb1b      	cbnz	r3, 80058a2 <_vfiprintf_r+0x1da>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	3307      	adds	r3, #7
 800585e:	f023 0307 	bic.w	r3, r3, #7
 8005862:	3308      	adds	r3, #8
 8005864:	9303      	str	r3, [sp, #12]
 8005866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005868:	443b      	add	r3, r7
 800586a:	9309      	str	r3, [sp, #36]	; 0x24
 800586c:	e768      	b.n	8005740 <_vfiprintf_r+0x78>
 800586e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005872:	460c      	mov	r4, r1
 8005874:	2001      	movs	r0, #1
 8005876:	e7a6      	b.n	80057c6 <_vfiprintf_r+0xfe>
 8005878:	2300      	movs	r3, #0
 800587a:	3401      	adds	r4, #1
 800587c:	9305      	str	r3, [sp, #20]
 800587e:	4619      	mov	r1, r3
 8005880:	f04f 0c0a 	mov.w	ip, #10
 8005884:	4620      	mov	r0, r4
 8005886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800588a:	3a30      	subs	r2, #48	; 0x30
 800588c:	2a09      	cmp	r2, #9
 800588e:	d903      	bls.n	8005898 <_vfiprintf_r+0x1d0>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0c6      	beq.n	8005822 <_vfiprintf_r+0x15a>
 8005894:	9105      	str	r1, [sp, #20]
 8005896:	e7c4      	b.n	8005822 <_vfiprintf_r+0x15a>
 8005898:	fb0c 2101 	mla	r1, ip, r1, r2
 800589c:	4604      	mov	r4, r0
 800589e:	2301      	movs	r3, #1
 80058a0:	e7f0      	b.n	8005884 <_vfiprintf_r+0x1bc>
 80058a2:	ab03      	add	r3, sp, #12
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	462a      	mov	r2, r5
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <_vfiprintf_r+0x22c>)
 80058aa:	a904      	add	r1, sp, #16
 80058ac:	4630      	mov	r0, r6
 80058ae:	f3af 8000 	nop.w
 80058b2:	4607      	mov	r7, r0
 80058b4:	1c78      	adds	r0, r7, #1
 80058b6:	d1d6      	bne.n	8005866 <_vfiprintf_r+0x19e>
 80058b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ba:	07d9      	lsls	r1, r3, #31
 80058bc:	d405      	bmi.n	80058ca <_vfiprintf_r+0x202>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	059a      	lsls	r2, r3, #22
 80058c2:	d402      	bmi.n	80058ca <_vfiprintf_r+0x202>
 80058c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c6:	f7ff fdce 	bl	8005466 <__retarget_lock_release_recursive>
 80058ca:	89ab      	ldrh	r3, [r5, #12]
 80058cc:	065b      	lsls	r3, r3, #25
 80058ce:	f53f af1d 	bmi.w	800570c <_vfiprintf_r+0x44>
 80058d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d4:	e71c      	b.n	8005710 <_vfiprintf_r+0x48>
 80058d6:	ab03      	add	r3, sp, #12
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	462a      	mov	r2, r5
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <_vfiprintf_r+0x22c>)
 80058de:	a904      	add	r1, sp, #16
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 f879 	bl	80059d8 <_printf_i>
 80058e6:	e7e4      	b.n	80058b2 <_vfiprintf_r+0x1ea>
 80058e8:	08005f64 	.word	0x08005f64
 80058ec:	08005f6e 	.word	0x08005f6e
 80058f0:	00000000 	.word	0x00000000
 80058f4:	080056a3 	.word	0x080056a3
 80058f8:	08005f6a 	.word	0x08005f6a

080058fc <_printf_common>:
 80058fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005900:	4616      	mov	r6, r2
 8005902:	4699      	mov	r9, r3
 8005904:	688a      	ldr	r2, [r1, #8]
 8005906:	690b      	ldr	r3, [r1, #16]
 8005908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800590c:	4293      	cmp	r3, r2
 800590e:	bfb8      	it	lt
 8005910:	4613      	movlt	r3, r2
 8005912:	6033      	str	r3, [r6, #0]
 8005914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005918:	4607      	mov	r7, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b10a      	cbz	r2, 8005922 <_printf_common+0x26>
 800591e:	3301      	adds	r3, #1
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	0699      	lsls	r1, r3, #26
 8005926:	bf42      	ittt	mi
 8005928:	6833      	ldrmi	r3, [r6, #0]
 800592a:	3302      	addmi	r3, #2
 800592c:	6033      	strmi	r3, [r6, #0]
 800592e:	6825      	ldr	r5, [r4, #0]
 8005930:	f015 0506 	ands.w	r5, r5, #6
 8005934:	d106      	bne.n	8005944 <_printf_common+0x48>
 8005936:	f104 0a19 	add.w	sl, r4, #25
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	6832      	ldr	r2, [r6, #0]
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	42ab      	cmp	r3, r5
 8005942:	dc26      	bgt.n	8005992 <_printf_common+0x96>
 8005944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005948:	1e13      	subs	r3, r2, #0
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	bf18      	it	ne
 800594e:	2301      	movne	r3, #1
 8005950:	0692      	lsls	r2, r2, #26
 8005952:	d42b      	bmi.n	80059ac <_printf_common+0xb0>
 8005954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005958:	4649      	mov	r1, r9
 800595a:	4638      	mov	r0, r7
 800595c:	47c0      	blx	r8
 800595e:	3001      	adds	r0, #1
 8005960:	d01e      	beq.n	80059a0 <_printf_common+0xa4>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	6922      	ldr	r2, [r4, #16]
 8005966:	f003 0306 	and.w	r3, r3, #6
 800596a:	2b04      	cmp	r3, #4
 800596c:	bf02      	ittt	eq
 800596e:	68e5      	ldreq	r5, [r4, #12]
 8005970:	6833      	ldreq	r3, [r6, #0]
 8005972:	1aed      	subeq	r5, r5, r3
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	bf0c      	ite	eq
 8005978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800597c:	2500      	movne	r5, #0
 800597e:	4293      	cmp	r3, r2
 8005980:	bfc4      	itt	gt
 8005982:	1a9b      	subgt	r3, r3, r2
 8005984:	18ed      	addgt	r5, r5, r3
 8005986:	2600      	movs	r6, #0
 8005988:	341a      	adds	r4, #26
 800598a:	42b5      	cmp	r5, r6
 800598c:	d11a      	bne.n	80059c4 <_printf_common+0xc8>
 800598e:	2000      	movs	r0, #0
 8005990:	e008      	b.n	80059a4 <_printf_common+0xa8>
 8005992:	2301      	movs	r3, #1
 8005994:	4652      	mov	r2, sl
 8005996:	4649      	mov	r1, r9
 8005998:	4638      	mov	r0, r7
 800599a:	47c0      	blx	r8
 800599c:	3001      	adds	r0, #1
 800599e:	d103      	bne.n	80059a8 <_printf_common+0xac>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	3501      	adds	r5, #1
 80059aa:	e7c6      	b.n	800593a <_printf_common+0x3e>
 80059ac:	18e1      	adds	r1, r4, r3
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	2030      	movs	r0, #48	; 0x30
 80059b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b6:	4422      	add	r2, r4
 80059b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c0:	3302      	adds	r3, #2
 80059c2:	e7c7      	b.n	8005954 <_printf_common+0x58>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4622      	mov	r2, r4
 80059c8:	4649      	mov	r1, r9
 80059ca:	4638      	mov	r0, r7
 80059cc:	47c0      	blx	r8
 80059ce:	3001      	adds	r0, #1
 80059d0:	d0e6      	beq.n	80059a0 <_printf_common+0xa4>
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7d9      	b.n	800598a <_printf_common+0x8e>
	...

080059d8 <_printf_i>:
 80059d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	7e0f      	ldrb	r7, [r1, #24]
 80059de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059e0:	2f78      	cmp	r7, #120	; 0x78
 80059e2:	4691      	mov	r9, r2
 80059e4:	4680      	mov	r8, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	469a      	mov	sl, r3
 80059ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ee:	d807      	bhi.n	8005a00 <_printf_i+0x28>
 80059f0:	2f62      	cmp	r7, #98	; 0x62
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x32>
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	f000 80d4 	beq.w	8005ba2 <_printf_i+0x1ca>
 80059fa:	2f58      	cmp	r7, #88	; 0x58
 80059fc:	f000 80c0 	beq.w	8005b80 <_printf_i+0x1a8>
 8005a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a08:	e03a      	b.n	8005a80 <_printf_i+0xa8>
 8005a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0e:	2b15      	cmp	r3, #21
 8005a10:	d8f6      	bhi.n	8005a00 <_printf_i+0x28>
 8005a12:	a101      	add	r1, pc, #4	; (adr r1, 8005a18 <_printf_i+0x40>)
 8005a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a01 	.word	0x08005a01
 8005a24:	08005a01 	.word	0x08005a01
 8005a28:	08005a01 	.word	0x08005a01
 8005a2c:	08005a01 	.word	0x08005a01
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a01 	.word	0x08005a01
 8005a38:	08005a01 	.word	0x08005a01
 8005a3c:	08005a01 	.word	0x08005a01
 8005a40:	08005a01 	.word	0x08005a01
 8005a44:	08005b89 	.word	0x08005b89
 8005a48:	08005ab1 	.word	0x08005ab1
 8005a4c:	08005b43 	.word	0x08005b43
 8005a50:	08005a01 	.word	0x08005a01
 8005a54:	08005a01 	.word	0x08005a01
 8005a58:	08005bab 	.word	0x08005bab
 8005a5c:	08005a01 	.word	0x08005a01
 8005a60:	08005ab1 	.word	0x08005ab1
 8005a64:	08005a01 	.word	0x08005a01
 8005a68:	08005a01 	.word	0x08005a01
 8005a6c:	08005b4b 	.word	0x08005b4b
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	1d1a      	adds	r2, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	602a      	str	r2, [r5, #0]
 8005a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a80:	2301      	movs	r3, #1
 8005a82:	e09f      	b.n	8005bc4 <_printf_i+0x1ec>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	0607      	lsls	r7, r0, #24
 8005a8a:	f103 0104 	add.w	r1, r3, #4
 8005a8e:	6029      	str	r1, [r5, #0]
 8005a90:	d501      	bpl.n	8005a96 <_printf_i+0xbe>
 8005a92:	681e      	ldr	r6, [r3, #0]
 8005a94:	e003      	b.n	8005a9e <_printf_i+0xc6>
 8005a96:	0646      	lsls	r6, r0, #25
 8005a98:	d5fb      	bpl.n	8005a92 <_printf_i+0xba>
 8005a9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	da03      	bge.n	8005aaa <_printf_i+0xd2>
 8005aa2:	232d      	movs	r3, #45	; 0x2d
 8005aa4:	4276      	negs	r6, r6
 8005aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aaa:	485a      	ldr	r0, [pc, #360]	; (8005c14 <_printf_i+0x23c>)
 8005aac:	230a      	movs	r3, #10
 8005aae:	e012      	b.n	8005ad6 <_printf_i+0xfe>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	1d19      	adds	r1, r3, #4
 8005ab6:	6029      	str	r1, [r5, #0]
 8005ab8:	0605      	lsls	r5, r0, #24
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0xe8>
 8005abc:	681e      	ldr	r6, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0xee>
 8005ac0:	0641      	lsls	r1, r0, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0xe4>
 8005ac4:	881e      	ldrh	r6, [r3, #0]
 8005ac6:	4853      	ldr	r0, [pc, #332]	; (8005c14 <_printf_i+0x23c>)
 8005ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aca:	bf0c      	ite	eq
 8005acc:	2308      	moveq	r3, #8
 8005ace:	230a      	movne	r3, #10
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad6:	6865      	ldr	r5, [r4, #4]
 8005ad8:	60a5      	str	r5, [r4, #8]
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	bfa2      	ittt	ge
 8005ade:	6821      	ldrge	r1, [r4, #0]
 8005ae0:	f021 0104 	bicge.w	r1, r1, #4
 8005ae4:	6021      	strge	r1, [r4, #0]
 8005ae6:	b90e      	cbnz	r6, 8005aec <_printf_i+0x114>
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	d04b      	beq.n	8005b84 <_printf_i+0x1ac>
 8005aec:	4615      	mov	r5, r2
 8005aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005af2:	fb03 6711 	mls	r7, r3, r1, r6
 8005af6:	5dc7      	ldrb	r7, [r0, r7]
 8005af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005afc:	4637      	mov	r7, r6
 8005afe:	42bb      	cmp	r3, r7
 8005b00:	460e      	mov	r6, r1
 8005b02:	d9f4      	bls.n	8005aee <_printf_i+0x116>
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d10b      	bne.n	8005b20 <_printf_i+0x148>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07de      	lsls	r6, r3, #31
 8005b0c:	d508      	bpl.n	8005b20 <_printf_i+0x148>
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	6861      	ldr	r1, [r4, #4]
 8005b12:	4299      	cmp	r1, r3
 8005b14:	bfde      	ittt	le
 8005b16:	2330      	movle	r3, #48	; 0x30
 8005b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b20:	1b52      	subs	r2, r2, r5
 8005b22:	6122      	str	r2, [r4, #16]
 8005b24:	f8cd a000 	str.w	sl, [sp]
 8005b28:	464b      	mov	r3, r9
 8005b2a:	aa03      	add	r2, sp, #12
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff fee4 	bl	80058fc <_printf_common>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d14a      	bne.n	8005bce <_printf_i+0x1f6>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	b004      	add	sp, #16
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	f043 0320 	orr.w	r3, r3, #32
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	4833      	ldr	r0, [pc, #204]	; (8005c18 <_printf_i+0x240>)
 8005b4c:	2778      	movs	r7, #120	; 0x78
 8005b4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	6829      	ldr	r1, [r5, #0]
 8005b56:	061f      	lsls	r7, r3, #24
 8005b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b5c:	d402      	bmi.n	8005b64 <_printf_i+0x18c>
 8005b5e:	065f      	lsls	r7, r3, #25
 8005b60:	bf48      	it	mi
 8005b62:	b2b6      	uxthmi	r6, r6
 8005b64:	07df      	lsls	r7, r3, #31
 8005b66:	bf48      	it	mi
 8005b68:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6c:	6029      	str	r1, [r5, #0]
 8005b6e:	bf48      	it	mi
 8005b70:	6023      	strmi	r3, [r4, #0]
 8005b72:	b91e      	cbnz	r6, 8005b7c <_printf_i+0x1a4>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	f023 0320 	bic.w	r3, r3, #32
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	e7a7      	b.n	8005ad0 <_printf_i+0xf8>
 8005b80:	4824      	ldr	r0, [pc, #144]	; (8005c14 <_printf_i+0x23c>)
 8005b82:	e7e4      	b.n	8005b4e <_printf_i+0x176>
 8005b84:	4615      	mov	r5, r2
 8005b86:	e7bd      	b.n	8005b04 <_printf_i+0x12c>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	6826      	ldr	r6, [r4, #0]
 8005b8c:	6961      	ldr	r1, [r4, #20]
 8005b8e:	1d18      	adds	r0, r3, #4
 8005b90:	6028      	str	r0, [r5, #0]
 8005b92:	0635      	lsls	r5, r6, #24
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0x1c4>
 8005b98:	6019      	str	r1, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0x1ca>
 8005b9c:	0670      	lsls	r0, r6, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0x1c0>
 8005ba0:	8019      	strh	r1, [r3, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	4615      	mov	r5, r2
 8005ba8:	e7bc      	b.n	8005b24 <_printf_i+0x14c>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	602a      	str	r2, [r5, #0]
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7fa fb12 	bl	80001e0 <memchr>
 8005bbc:	b108      	cbz	r0, 8005bc2 <_printf_i+0x1ea>
 8005bbe:	1b40      	subs	r0, r0, r5
 8005bc0:	6060      	str	r0, [r4, #4]
 8005bc2:	6863      	ldr	r3, [r4, #4]
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bcc:	e7aa      	b.n	8005b24 <_printf_i+0x14c>
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	462a      	mov	r2, r5
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d0ad      	beq.n	8005b38 <_printf_i+0x160>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	079b      	lsls	r3, r3, #30
 8005be0:	d413      	bmi.n	8005c0a <_printf_i+0x232>
 8005be2:	68e0      	ldr	r0, [r4, #12]
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	4298      	cmp	r0, r3
 8005be8:	bfb8      	it	lt
 8005bea:	4618      	movlt	r0, r3
 8005bec:	e7a6      	b.n	8005b3c <_printf_i+0x164>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d09d      	beq.n	8005b38 <_printf_i+0x160>
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	68e3      	ldr	r3, [r4, #12]
 8005c00:	9903      	ldr	r1, [sp, #12]
 8005c02:	1a5b      	subs	r3, r3, r1
 8005c04:	42ab      	cmp	r3, r5
 8005c06:	dcf2      	bgt.n	8005bee <_printf_i+0x216>
 8005c08:	e7eb      	b.n	8005be2 <_printf_i+0x20a>
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	f104 0619 	add.w	r6, r4, #25
 8005c10:	e7f5      	b.n	8005bfe <_printf_i+0x226>
 8005c12:	bf00      	nop
 8005c14:	08005f75 	.word	0x08005f75
 8005c18:	08005f86 	.word	0x08005f86

08005c1c <__sflush_r>:
 8005c1c:	898a      	ldrh	r2, [r1, #12]
 8005c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	0710      	lsls	r0, r2, #28
 8005c26:	460c      	mov	r4, r1
 8005c28:	d458      	bmi.n	8005cdc <__sflush_r+0xc0>
 8005c2a:	684b      	ldr	r3, [r1, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc05      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dc02      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c36:	2000      	movs	r0, #0
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d0f9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c48:	682f      	ldr	r7, [r5, #0]
 8005c4a:	6a21      	ldr	r1, [r4, #32]
 8005c4c:	602b      	str	r3, [r5, #0]
 8005c4e:	d032      	beq.n	8005cb6 <__sflush_r+0x9a>
 8005c50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	075a      	lsls	r2, r3, #29
 8005c56:	d505      	bpl.n	8005c64 <__sflush_r+0x48>
 8005c58:	6863      	ldr	r3, [r4, #4]
 8005c5a:	1ac0      	subs	r0, r0, r3
 8005c5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c5e:	b10b      	cbz	r3, 8005c64 <__sflush_r+0x48>
 8005c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c62:	1ac0      	subs	r0, r0, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	4602      	mov	r2, r0
 8005c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c6a:	6a21      	ldr	r1, [r4, #32]
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b0      	blx	r6
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	d106      	bne.n	8005c84 <__sflush_r+0x68>
 8005c76:	6829      	ldr	r1, [r5, #0]
 8005c78:	291d      	cmp	r1, #29
 8005c7a:	d82b      	bhi.n	8005cd4 <__sflush_r+0xb8>
 8005c7c:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <__sflush_r+0x108>)
 8005c7e:	410a      	asrs	r2, r1
 8005c80:	07d6      	lsls	r6, r2, #31
 8005c82:	d427      	bmi.n	8005cd4 <__sflush_r+0xb8>
 8005c84:	2200      	movs	r2, #0
 8005c86:	6062      	str	r2, [r4, #4]
 8005c88:	04d9      	lsls	r1, r3, #19
 8005c8a:	6922      	ldr	r2, [r4, #16]
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	d504      	bpl.n	8005c9a <__sflush_r+0x7e>
 8005c90:	1c42      	adds	r2, r0, #1
 8005c92:	d101      	bne.n	8005c98 <__sflush_r+0x7c>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b903      	cbnz	r3, 8005c9a <__sflush_r+0x7e>
 8005c98:	6560      	str	r0, [r4, #84]	; 0x54
 8005c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9c:	602f      	str	r7, [r5, #0]
 8005c9e:	2900      	cmp	r1, #0
 8005ca0:	d0c9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	d002      	beq.n	8005cb0 <__sflush_r+0x94>
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7ff fbea 	bl	8005484 <_free_r>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8005cb4:	e7c0      	b.n	8005c38 <__sflush_r+0x1c>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	1c41      	adds	r1, r0, #1
 8005cbe:	d1c8      	bne.n	8005c52 <__sflush_r+0x36>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c5      	beq.n	8005c52 <__sflush_r+0x36>
 8005cc6:	2b1d      	cmp	r3, #29
 8005cc8:	d001      	beq.n	8005cce <__sflush_r+0xb2>
 8005cca:	2b16      	cmp	r3, #22
 8005ccc:	d101      	bne.n	8005cd2 <__sflush_r+0xb6>
 8005cce:	602f      	str	r7, [r5, #0]
 8005cd0:	e7b1      	b.n	8005c36 <__sflush_r+0x1a>
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7ad      	b.n	8005c38 <__sflush_r+0x1c>
 8005cdc:	690f      	ldr	r7, [r1, #16]
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	d0a9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ce2:	0793      	lsls	r3, r2, #30
 8005ce4:	680e      	ldr	r6, [r1, #0]
 8005ce6:	bf08      	it	eq
 8005ce8:	694b      	ldreq	r3, [r1, #20]
 8005cea:	600f      	str	r7, [r1, #0]
 8005cec:	bf18      	it	ne
 8005cee:	2300      	movne	r3, #0
 8005cf0:	eba6 0807 	sub.w	r8, r6, r7
 8005cf4:	608b      	str	r3, [r1, #8]
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	dd9c      	ble.n	8005c36 <__sflush_r+0x1a>
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d00:	4643      	mov	r3, r8
 8005d02:	463a      	mov	r2, r7
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	dc06      	bgt.n	8005d1a <__sflush_r+0xfe>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e78e      	b.n	8005c38 <__sflush_r+0x1c>
 8005d1a:	4407      	add	r7, r0
 8005d1c:	eba8 0800 	sub.w	r8, r8, r0
 8005d20:	e7e9      	b.n	8005cf6 <__sflush_r+0xda>
 8005d22:	bf00      	nop
 8005d24:	dfbffffe 	.word	0xdfbffffe

08005d28 <_fflush_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b913      	cbnz	r3, 8005d38 <_fflush_r+0x10>
 8005d32:	2500      	movs	r5, #0
 8005d34:	4628      	mov	r0, r5
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	b118      	cbz	r0, 8005d42 <_fflush_r+0x1a>
 8005d3a:	6a03      	ldr	r3, [r0, #32]
 8005d3c:	b90b      	cbnz	r3, 8005d42 <_fflush_r+0x1a>
 8005d3e:	f7ff f947 	bl	8004fd0 <__sinit>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f3      	beq.n	8005d32 <_fflush_r+0xa>
 8005d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d404      	bmi.n	8005d5a <_fflush_r+0x32>
 8005d50:	0599      	lsls	r1, r3, #22
 8005d52:	d402      	bmi.n	8005d5a <_fflush_r+0x32>
 8005d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d56:	f7ff fb85 	bl	8005464 <__retarget_lock_acquire_recursive>
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	f7ff ff5d 	bl	8005c1c <__sflush_r>
 8005d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d64:	07da      	lsls	r2, r3, #31
 8005d66:	4605      	mov	r5, r0
 8005d68:	d4e4      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	059b      	lsls	r3, r3, #22
 8005d6e:	d4e1      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d72:	f7ff fb78 	bl	8005466 <__retarget_lock_release_recursive>
 8005d76:	e7dd      	b.n	8005d34 <_fflush_r+0xc>

08005d78 <__swhatbuf_r>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d80:	2900      	cmp	r1, #0
 8005d82:	b096      	sub	sp, #88	; 0x58
 8005d84:	4615      	mov	r5, r2
 8005d86:	461e      	mov	r6, r3
 8005d88:	da0d      	bge.n	8005da6 <__swhatbuf_r+0x2e>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d90:	f04f 0100 	mov.w	r1, #0
 8005d94:	bf0c      	ite	eq
 8005d96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d9a:	2340      	movne	r3, #64	; 0x40
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	6031      	str	r1, [r6, #0]
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	b016      	add	sp, #88	; 0x58
 8005da4:	bd70      	pop	{r4, r5, r6, pc}
 8005da6:	466a      	mov	r2, sp
 8005da8:	f000 f848 	bl	8005e3c <_fstat_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	dbec      	blt.n	8005d8a <__swhatbuf_r+0x12>
 8005db0:	9901      	ldr	r1, [sp, #4]
 8005db2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005db6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005dba:	4259      	negs	r1, r3
 8005dbc:	4159      	adcs	r1, r3
 8005dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc2:	e7eb      	b.n	8005d9c <__swhatbuf_r+0x24>

08005dc4 <__smakebuf_r>:
 8005dc4:	898b      	ldrh	r3, [r1, #12]
 8005dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dc8:	079d      	lsls	r5, r3, #30
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	d507      	bpl.n	8005de0 <__smakebuf_r+0x1c>
 8005dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	6123      	str	r3, [r4, #16]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	6163      	str	r3, [r4, #20]
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	ab01      	add	r3, sp, #4
 8005de2:	466a      	mov	r2, sp
 8005de4:	f7ff ffc8 	bl	8005d78 <__swhatbuf_r>
 8005de8:	9900      	ldr	r1, [sp, #0]
 8005dea:	4605      	mov	r5, r0
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff fbb5 	bl	800555c <_malloc_r>
 8005df2:	b948      	cbnz	r0, 8005e08 <__smakebuf_r+0x44>
 8005df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df8:	059a      	lsls	r2, r3, #22
 8005dfa:	d4ef      	bmi.n	8005ddc <__smakebuf_r+0x18>
 8005dfc:	f023 0303 	bic.w	r3, r3, #3
 8005e00:	f043 0302 	orr.w	r3, r3, #2
 8005e04:	81a3      	strh	r3, [r4, #12]
 8005e06:	e7e3      	b.n	8005dd0 <__smakebuf_r+0xc>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	6020      	str	r0, [r4, #0]
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e10:	81a3      	strh	r3, [r4, #12]
 8005e12:	9b00      	ldr	r3, [sp, #0]
 8005e14:	6163      	str	r3, [r4, #20]
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	6120      	str	r0, [r4, #16]
 8005e1a:	b15b      	cbz	r3, 8005e34 <__smakebuf_r+0x70>
 8005e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e20:	4630      	mov	r0, r6
 8005e22:	f000 f81d 	bl	8005e60 <_isatty_r>
 8005e26:	b128      	cbz	r0, 8005e34 <__smakebuf_r+0x70>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	431d      	orrs	r5, r3
 8005e38:	81a5      	strh	r5, [r4, #12]
 8005e3a:	e7cf      	b.n	8005ddc <__smakebuf_r+0x18>

08005e3c <_fstat_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d07      	ldr	r5, [pc, #28]	; (8005e5c <_fstat_r+0x20>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	f7fa fe5e 	bl	8000b0a <_fstat>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d102      	bne.n	8005e58 <_fstat_r+0x1c>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	b103      	cbz	r3, 8005e58 <_fstat_r+0x1c>
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20004c48 	.word	0x20004c48

08005e60 <_isatty_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d06      	ldr	r5, [pc, #24]	; (8005e7c <_isatty_r+0x1c>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	f7fa fe5d 	bl	8000b2a <_isatty>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_isatty_r+0x1a>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_isatty_r+0x1a>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20004c48 	.word	0x20004c48

08005e80 <_sbrk_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d06      	ldr	r5, [pc, #24]	; (8005e9c <_sbrk_r+0x1c>)
 8005e84:	2300      	movs	r3, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	f7fa fe66 	bl	8000b5c <_sbrk>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_sbrk_r+0x1a>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_sbrk_r+0x1a>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20004c48 	.word	0x20004c48

08005ea0 <_init>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr

08005eac <_fini>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr
