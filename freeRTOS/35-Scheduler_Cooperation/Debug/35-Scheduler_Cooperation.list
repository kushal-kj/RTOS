
35-Scheduler_Cooperation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b0  080044b0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b8  080044b8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b8  080044b8  000144b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080044c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b9c  20000060  08004520  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  08004520  00024bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a09  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1c  00000000  00000000  00033adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  000366f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4d  00000000  00000000  00037838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000033dd  00000000  00000000  00038585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012064  00000000  00000000  0003b962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096f7c  00000000  00000000  0004d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b40  00000000  00000000  000e4944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e9484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004410 	.word	0x08004410

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004410 	.word	0x08004410

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
void vGreenLedControllerTask(void *pvParameters);

const TickType_t _50ms = pdMS_TO_TICKS(50);

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af02      	add	r7, sp, #8
  HAL_Init();
 80004e2:	f000 fa6d 	bl	80009c0 <HAL_Init>
  SystemClock_Config();
 80004e6:	f000 f8c5 	bl	8000674 <SystemClock_Config>
  MX_GPIO_Init();
 80004ea:	f000 f92f 	bl	800074c <MX_GPIO_Init>


  xTaskCreate(vBlueLedControllerTask, "Blue LED Controller", 100, NULL, 1, NULL);
 80004ee:	2300      	movs	r3, #0
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2264      	movs	r2, #100	; 0x64
 80004fa:	4912      	ldr	r1, [pc, #72]	; (8000544 <main+0x68>)
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <main+0x6c>)
 80004fe:	f002 f8c8 	bl	8002692 <xTaskCreate>
  xTaskCreate(vRedLedControllerTask, "Red LED Controller", 100, NULL, 1, NULL);
 8000502:	2300      	movs	r3, #0
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2264      	movs	r2, #100	; 0x64
 800050e:	490f      	ldr	r1, [pc, #60]	; (800054c <main+0x70>)
 8000510:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0x74>)
 8000512:	f002 f8be 	bl	8002692 <xTaskCreate>
  xTaskCreate(vOrangeLedControllerTask, "Orange LED Controller", 100, NULL, 1, NULL);
 8000516:	2300      	movs	r3, #0
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	2264      	movs	r2, #100	; 0x64
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <main+0x78>)
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x7c>)
 8000526:	f002 f8b4 	bl	8002692 <xTaskCreate>
  xTaskCreate(vGreenLedControllerTask, "Green LED Controller", 100, NULL, 1, NULL);
 800052a:	2300      	movs	r3, #0
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	4909      	ldr	r1, [pc, #36]	; (800055c <main+0x80>)
 8000538:	4809      	ldr	r0, [pc, #36]	; (8000560 <main+0x84>)
 800053a:	f002 f8aa 	bl	8002692 <xTaskCreate>

  vTaskStartScheduler();
 800053e:	f002 f9f3 	bl	8002928 <vTaskStartScheduler>

  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x66>
 8000544:	08004428 	.word	0x08004428
 8000548:	08000565 	.word	0x08000565
 800054c:	0800443c 	.word	0x0800443c
 8000550:	080005a9 	.word	0x080005a9
 8000554:	08004450 	.word	0x08004450
 8000558:	080005ed 	.word	0x080005ed
 800055c:	08004468 	.word	0x08004468
 8000560:	08000631 	.word	0x08000631

08000564 <vBlueLedControllerTask>:
}



void vBlueLedControllerTask(void *pvParameters)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Blue_TaskPofiler_t++;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <vBlueLedControllerTask+0x38>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <vBlueLedControllerTask+0x38>)
 8000574:	6013      	str	r3, [r2, #0]
		for(i=0;i<700000;i++){}
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e002      	b.n	8000582 <vBlueLedControllerTask+0x1e>
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vBlueLedControllerTask+0x3c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	ddf8      	ble.n	800057c <vBlueLedControllerTask+0x18>
		//vTaskDelay(_50ms);
		taskYIELD();
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <vBlueLedControllerTask+0x40>)
 800058c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	f3bf 8f4f 	dsb	sy
 8000596:	f3bf 8f6f 	isb	sy
		Blue_TaskPofiler_t++;
 800059a:	e7e7      	b.n	800056c <vBlueLedControllerTask+0x8>
 800059c:	20000088 	.word	0x20000088
 80005a0:	000aae5f 	.word	0x000aae5f
 80005a4:	e000ed04 	.word	0xe000ed04

080005a8 <vRedLedControllerTask>:
	}
}

void vRedLedControllerTask(void *pvParameters)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Red_TaskPofiler_t++;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <vRedLedControllerTask+0x38>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <vRedLedControllerTask+0x38>)
 80005b8:	6013      	str	r3, [r2, #0]
		for(i=0;i<700000;i++){}
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e002      	b.n	80005c6 <vRedLedControllerTask+0x1e>
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vRedLedControllerTask+0x3c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	ddf8      	ble.n	80005c0 <vRedLedControllerTask+0x18>
		//vTaskDelay(_50ms);
		taskYIELD();
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <vRedLedControllerTask+0x40>)
 80005d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	f3bf 8f6f 	isb	sy
		Red_TaskPofiler_t++;
 80005de:	e7e7      	b.n	80005b0 <vRedLedControllerTask+0x8>
 80005e0:	20000080 	.word	0x20000080
 80005e4:	000aae5f 	.word	0x000aae5f
 80005e8:	e000ed04 	.word	0xe000ed04

080005ec <vOrangeLedControllerTask>:

	}
}

void vOrangeLedControllerTask(void *pvParameters)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Orange_TaskPofiler_t++;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <vOrangeLedControllerTask+0x38>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <vOrangeLedControllerTask+0x38>)
 80005fc:	6013      	str	r3, [r2, #0]
		for(i=0;i<700000;i++){}
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e002      	b.n	800060a <vOrangeLedControllerTask+0x1e>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <vOrangeLedControllerTask+0x3c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	ddf8      	ble.n	8000604 <vOrangeLedControllerTask+0x18>
		//vTaskDelay(_50ms);
		taskYIELD();
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <vOrangeLedControllerTask+0x40>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy
		Orange_TaskPofiler_t++;
 8000622:	e7e7      	b.n	80005f4 <vOrangeLedControllerTask+0x8>
 8000624:	2000007c 	.word	0x2000007c
 8000628:	000aae5f 	.word	0x000aae5f
 800062c:	e000ed04 	.word	0xe000ed04

08000630 <vGreenLedControllerTask>:
	}
}


void vGreenLedControllerTask(void *pvParameters)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		Green_TaskPofiler_t++;
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <vGreenLedControllerTask+0x38>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <vGreenLedControllerTask+0x38>)
 8000640:	6013      	str	r3, [r2, #0]
		for(i=0;i<700000;i++){}
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e002      	b.n	800064e <vGreenLedControllerTask+0x1e>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <vGreenLedControllerTask+0x3c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	ddf8      	ble.n	8000648 <vGreenLedControllerTask+0x18>
		//vTaskDelay(_50ms);
		taskYIELD();
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <vGreenLedControllerTask+0x40>)
 8000658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	f3bf 8f4f 	dsb	sy
 8000662:	f3bf 8f6f 	isb	sy
		Green_TaskPofiler_t++;
 8000666:	e7e7      	b.n	8000638 <vGreenLedControllerTask+0x8>
 8000668:	20000084 	.word	0x20000084
 800066c:	000aae5f 	.word	0x000aae5f
 8000670:	e000ed04 	.word	0xe000ed04

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fdda 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <SystemClock_Config+0xd0>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd4>)
 80006c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fa82 	bl	8000c08 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 f859 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fce4 	bl	80010f8 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000736:	f000 f843 	bl	80007c0 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_GPIO_Init+0x4c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_GPIO_Init+0x4c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <MX_GPIO_Init+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_GPIO_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ae:	f000 f929 	bl	8000a04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010000 	.word	0x40010000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <Error_Handler+0x8>
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x54>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_MspInit+0x54>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <HAL_MspInit+0x54>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <HAL_MspInit+0x54>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 f9cf 	bl	8000bb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <HAL_InitTick+0xd0>)
 800083a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <HAL_InitTick+0xd0>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6453      	str	r3, [r2, #68]	; 0x44
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <HAL_InitTick+0xd0>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000850:	f107 020c 	add.w	r2, r7, #12
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fe58 	bl	8001510 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000860:	f000 fe42 	bl	80014e8 <HAL_RCC_GetPCLK2Freq>
 8000864:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <HAL_InitTick+0xd4>)
 800086a:	fba2 2303 	umull	r2, r3, r2, r3
 800086e:	0c9b      	lsrs	r3, r3, #18
 8000870:	3b01      	subs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <HAL_InitTick+0xd8>)
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <HAL_InitTick+0xdc>)
 8000878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <HAL_InitTick+0xd8>)
 800087c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000880:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <HAL_InitTick+0xd8>)
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <HAL_InitTick+0xd8>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_InitTick+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_InitTick+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <HAL_InitTick+0xd8>)
 800089c:	f000 fe6a 	bl	8001574 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d11b      	bne.n	80008e6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008ae:	4813      	ldr	r0, [pc, #76]	; (80008fc <HAL_InitTick+0xd8>)
 80008b0:	f000 feba 	bl	8001628 <HAL_TIM_Base_Start_IT>
 80008b4:	4603      	mov	r3, r0
 80008b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d111      	bne.n	80008e6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008c2:	2019      	movs	r0, #25
 80008c4:	f000 f992 	bl	8000bec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b0f      	cmp	r3, #15
 80008cc:	d808      	bhi.n	80008e0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008ce:	2200      	movs	r2, #0
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 f96e 	bl	8000bb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_InitTick+0xe0>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	e002      	b.n	80008e6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3730      	adds	r7, #48	; 0x30
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	431bde83 	.word	0x431bde83
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	40010000 	.word	0x40010000
 8000904:	20000004 	.word	0x20000004

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800093a:	f000 fed7 	bl	80016ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000972:	490e      	ldr	r1, [pc, #56]	; (80009ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000996:	f7ff ffd7 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f003 fcad 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fd9d 	bl	80004dc <main>
  bx  lr    
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009b0:	080044c0 	.word	0x080044c0
  ldr r2, =_sbss
 80009b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009b8:	20004bfc 	.word	0x20004bfc

080009bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_Init+0x40>)
 80009ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_Init+0x40>)
 80009d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x40>)
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f8d8 	bl	8000b9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f7ff ff18 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff feea 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023c00 	.word	0x40023c00

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000d4 	.word	0x200000d4

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000d4 	.word	0x200000d4

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff4c 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc6:	f7ff ff61 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	6978      	ldr	r0, [r7, #20]
 8000bd2:	f7ff ffb1 	bl	8000b38 <NVIC_EncodePriority>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff80 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff54 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e267      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d075      	beq.n	8000d12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c26:	4b88      	ldr	r3, [pc, #544]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d00c      	beq.n	8000c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c32:	4b85      	ldr	r3, [pc, #532]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d112      	bne.n	8000c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4b82      	ldr	r3, [pc, #520]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c4a:	d10b      	bne.n	8000c64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4c:	4b7e      	ldr	r3, [pc, #504]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d05b      	beq.n	8000d10 <HAL_RCC_OscConfig+0x108>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d157      	bne.n	8000d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e242      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6c:	d106      	bne.n	8000c7c <HAL_RCC_OscConfig+0x74>
 8000c6e:	4b76      	ldr	r3, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a75      	ldr	r2, [pc, #468]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e01d      	b.n	8000cb8 <HAL_RCC_OscConfig+0xb0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x98>
 8000c86:	4b70      	ldr	r3, [pc, #448]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a6f      	ldr	r2, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a6c      	ldr	r2, [pc, #432]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_RCC_OscConfig+0xb0>
 8000ca0:	4b69      	ldr	r3, [pc, #420]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a68      	ldr	r2, [pc, #416]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b66      	ldr	r3, [pc, #408]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a65      	ldr	r2, [pc, #404]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d013      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff feb4 	bl	8000a2c <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff feb0 	bl	8000a2c <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e207      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b5b      	ldr	r3, [pc, #364]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f0      	beq.n	8000cc8 <HAL_RCC_OscConfig+0xc0>
 8000ce6:	e014      	b.n	8000d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fea0 	bl	8000a2c <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fe9c 	bl	8000a2c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e1f3      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	4b51      	ldr	r3, [pc, #324]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xe8>
 8000d0e:	e000      	b.n	8000d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d063      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d11c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d116      	bne.n	8000d70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <HAL_RCC_OscConfig+0x152>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1c7      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4937      	ldr	r1, [pc, #220]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	e03a      	b.n	8000de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d020      	beq.n	8000dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <HAL_RCC_OscConfig+0x244>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fe55 	bl	8000a2c <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d86:	f7ff fe51 	bl	8000a2c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e1a8      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4925      	ldr	r1, [pc, #148]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	e015      	b.n	8000de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_RCC_OscConfig+0x244>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fe34 	bl	8000a2c <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fe30 	bl	8000a2c <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e187      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d036      	beq.n	8000e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d016      	beq.n	8000e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_RCC_OscConfig+0x248>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e00:	f7ff fe14 	bl	8000a2c <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e08:	f7ff fe10 	bl	8000a2c <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e167      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_RCC_OscConfig+0x240>)
 8000e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0x200>
 8000e26:	e01b      	b.n	8000e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_RCC_OscConfig+0x248>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fdfd 	bl	8000a2c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	e00e      	b.n	8000e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e36:	f7ff fdf9 	bl	8000a2c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d907      	bls.n	8000e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e150      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1ea      	bne.n	8000e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 8097 	beq.w	8000f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b81      	ldr	r3, [pc, #516]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a7c      	ldr	r2, [pc, #496]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b7a      	ldr	r3, [pc, #488]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b77      	ldr	r3, [pc, #476]	; (800107c <HAL_RCC_OscConfig+0x474>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eaa:	4b74      	ldr	r3, [pc, #464]	; (800107c <HAL_RCC_OscConfig+0x474>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a73      	ldr	r2, [pc, #460]	; (800107c <HAL_RCC_OscConfig+0x474>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fdb9 	bl	8000a2c <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ebe:	f7ff fdb5 	bl	8000a2c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e10c      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x474>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x2ea>
 8000ee4:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee8:	4a63      	ldr	r2, [pc, #396]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef0:	e01c      	b.n	8000f2c <HAL_RCC_OscConfig+0x324>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x30c>
 8000efa:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efe:	4a5e      	ldr	r2, [pc, #376]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6713      	str	r3, [r2, #112]	; 0x70
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0a:	4a5b      	ldr	r2, [pc, #364]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6713      	str	r3, [r2, #112]	; 0x70
 8000f12:	e00b      	b.n	8000f2c <HAL_RCC_OscConfig+0x324>
 8000f14:	4b58      	ldr	r3, [pc, #352]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f1a:	f023 0301 	bic.w	r3, r3, #1
 8000f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f20:	4b55      	ldr	r3, [pc, #340]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	4a54      	ldr	r2, [pc, #336]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f26:	f023 0304 	bic.w	r3, r3, #4
 8000f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d015      	beq.n	8000f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f34:	f7ff fd7a 	bl	8000a2c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3a:	e00a      	b.n	8000f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fd76 	bl	8000a2c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e0cb      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0ee      	beq.n	8000f3c <HAL_RCC_OscConfig+0x334>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fd64 	bl	8000a2c <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f66:	e00a      	b.n	8000f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f68:	f7ff fd60 	bl	8000a2c <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e0b5      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ee      	bne.n	8000f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a38      	ldr	r2, [pc, #224]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80a1 	beq.w	80010e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d05c      	beq.n	800106c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d141      	bne.n	800103e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_RCC_OscConfig+0x478>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fd34 	bl	8000a2c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fd30 	bl	8000a2c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e087      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	3b01      	subs	r3, #1
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_RCC_OscConfig+0x478>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fd09 	bl	8000a2c <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fd05 	bl	8000a2c <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e05c      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x416>
 800103c:	e054      	b.n	80010e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_RCC_OscConfig+0x478>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcf2 	bl	8000a2c <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fcee 	bl	8000a2c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e045      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_RCC_OscConfig+0x470>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x444>
 800106a:	e03d      	b.n	80010e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e038      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000
 8001080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x4ec>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d028      	beq.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800109c:	429a      	cmp	r2, r3
 800109e:	d121      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d11a      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010b4:	4013      	ands	r3, r2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010bc:	4293      	cmp	r3, r2
 80010be:	d111      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	085b      	lsrs	r3, r3, #1
 80010cc:	3b01      	subs	r3, #1
 80010ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d107      	bne.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0cc      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d90c      	bls.n	8001134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0b8      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d020      	beq.n	8001182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800116e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	494d      	ldr	r1, [pc, #308]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d044      	beq.n	8001218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d119      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e07f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e06f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e067      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f023 0203 	bic.w	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4934      	ldr	r1, [pc, #208]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e8:	f7ff fc20 	bl	8000a2c <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f0:	f7ff fc1c 	bl	8000a2c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e04f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 020c 	and.w	r2, r3, #12
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d1eb      	bne.n	80011f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d20c      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e032      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4916      	ldr	r1, [pc, #88]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	490e      	ldr	r1, [pc, #56]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127e:	f000 f821 	bl	80012c4 <HAL_RCC_GetSysClockFreq>
 8001282:	4602      	mov	r2, r0
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	490a      	ldr	r1, [pc, #40]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	5ccb      	ldrb	r3, [r1, r3]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fac0 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00
 80012b4:	40023800 	.word	0x40023800
 80012b8:	08004498 	.word	0x08004498
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c8:	b094      	sub	sp, #80	; 0x50
 80012ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012d4:	2300      	movs	r3, #0
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012dc:	4b79      	ldr	r3, [pc, #484]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d00d      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x40>
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	f200 80e1 	bhi.w	80014b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x34>
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d003      	beq.n	80012fe <HAL_RCC_GetSysClockFreq+0x3a>
 80012f6:	e0db      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f8:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80012fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80012fc:	e0db      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001302:	e0d8      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001304:	4b6f      	ldr	r3, [pc, #444]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	099b      	lsrs	r3, r3, #6
 8001320:	2200      	movs	r2, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
 8001324:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
 8001332:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001336:	4622      	mov	r2, r4
 8001338:	462b      	mov	r3, r5
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0159      	lsls	r1, r3, #5
 8001344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001348:	0150      	lsls	r0, r2, #5
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4621      	mov	r1, r4
 8001350:	1a51      	subs	r1, r2, r1
 8001352:	6139      	str	r1, [r7, #16]
 8001354:	4629      	mov	r1, r5
 8001356:	eb63 0301 	sbc.w	r3, r3, r1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001368:	4659      	mov	r1, fp
 800136a:	018b      	lsls	r3, r1, #6
 800136c:	4651      	mov	r1, sl
 800136e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001372:	4651      	mov	r1, sl
 8001374:	018a      	lsls	r2, r1, #6
 8001376:	4651      	mov	r1, sl
 8001378:	ebb2 0801 	subs.w	r8, r2, r1
 800137c:	4659      	mov	r1, fp
 800137e:	eb63 0901 	sbc.w	r9, r3, r1
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800138e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001396:	4690      	mov	r8, r2
 8001398:	4699      	mov	r9, r3
 800139a:	4623      	mov	r3, r4
 800139c:	eb18 0303 	adds.w	r3, r8, r3
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	462b      	mov	r3, r5
 80013a4:	eb49 0303 	adc.w	r3, r9, r3
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013b6:	4629      	mov	r1, r5
 80013b8:	024b      	lsls	r3, r1, #9
 80013ba:	4621      	mov	r1, r4
 80013bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013c0:	4621      	mov	r1, r4
 80013c2:	024a      	lsls	r2, r1, #9
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	2200      	movs	r2, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013d4:	f7fe ff04 	bl	80001e0 <__aeabi_uldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4613      	mov	r3, r2
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013e0:	e058      	b.n	8001494 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	2200      	movs	r2, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	4611      	mov	r1, r2
 80013ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013fc:	4642      	mov	r2, r8
 80013fe:	464b      	mov	r3, r9
 8001400:	f04f 0000 	mov.w	r0, #0
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	0159      	lsls	r1, r3, #5
 800140a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800140e:	0150      	lsls	r0, r2, #5
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4641      	mov	r1, r8
 8001416:	ebb2 0a01 	subs.w	sl, r2, r1
 800141a:	4649      	mov	r1, r9
 800141c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800142c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001430:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001434:	ebb2 040a 	subs.w	r4, r2, sl
 8001438:	eb63 050b 	sbc.w	r5, r3, fp
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	00eb      	lsls	r3, r5, #3
 8001446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144a:	00e2      	lsls	r2, r4, #3
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	4643      	mov	r3, r8
 8001452:	18e3      	adds	r3, r4, r3
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	464b      	mov	r3, r9
 8001458:	eb45 0303 	adc.w	r3, r5, r3
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800146a:	4629      	mov	r1, r5
 800146c:	028b      	lsls	r3, r1, #10
 800146e:	4621      	mov	r1, r4
 8001470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001474:	4621      	mov	r1, r4
 8001476:	028a      	lsls	r2, r1, #10
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147e:	2200      	movs	r2, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	61fa      	str	r2, [r7, #28]
 8001484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001488:	f7fe feaa 	bl	80001e0 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	0c1b      	lsrs	r3, r3, #16
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014ae:	e002      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	00f42400 	.word	0x00f42400
 80014cc:	007a1200 	.word	0x007a1200

080014d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	0b5b      	lsrs	r3, r3, #13
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	4903      	ldr	r1, [pc, #12]	; (800150c <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	080044a8 	.word	0x080044a8

08001510 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	220f      	movs	r2, #15
 800151e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_GetClockConfig+0x5c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_RCC_GetClockConfig+0x5c>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_RCC_GetClockConfig+0x5c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_GetClockConfig+0x5c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_RCC_GetClockConfig+0x60>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0207 	and.w	r2, r3, #7
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	601a      	str	r2, [r3, #0]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e041      	b.n	800160a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f839 	bl	8001612 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3304      	adds	r3, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f000 f9ca 	bl	800194c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d001      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e044      	b.n	80016ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d018      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x6c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166a:	d013      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x6c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_TIM_Base_Start_IT+0xb4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00e      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x6c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x6c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d004      	beq.n	8001694 <HAL_TIM_Base_Start_IT+0x6c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d010      	beq.n	80016c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b6:	e007      	b.n	80016c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40010000 	.word	0x40010000
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40000800 	.word	0x40000800
 80016e4:	40000c00 	.word	0x40000c00
 80016e8:	40014000 	.word	0x40014000

080016ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d122      	bne.n	8001748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b02      	cmp	r3, #2
 800170e:	d11b      	bne.n	8001748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0202 	mvn.w	r2, #2
 8001718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8ee 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8001734:	e005      	b.n	8001742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8e0 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f8f1 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b04      	cmp	r3, #4
 8001754:	d122      	bne.n	800179c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b04      	cmp	r3, #4
 8001762:	d11b      	bne.n	800179c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0204 	mvn.w	r2, #4
 800176c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2202      	movs	r2, #2
 8001772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8c4 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8001788:	e005      	b.n	8001796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8b6 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8c7 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d122      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d11b      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0208 	mvn.w	r2, #8
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2204      	movs	r2, #4
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f89a 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f88c 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f89d 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d122      	bne.n	8001844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b10      	cmp	r3, #16
 800180a:	d11b      	bne.n	8001844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0210 	mvn.w	r2, #16
 8001814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2208      	movs	r2, #8
 800181a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f870 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8001830:	e005      	b.n	800183e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f862 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f873 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0201 	mvn.w	r2, #1
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe ff96 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	d10e      	bne.n	800189c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d107      	bne.n	800189c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8e2 	bl	8001a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d10e      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d107      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f838 	bl	8001938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d10e      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d107      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0220 	mvn.w	r2, #32
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f8ac 	bl	8001a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <TIM_Base_SetConfig+0xe4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00f      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d00b      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <TIM_Base_SetConfig+0xe8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <TIM_Base_SetConfig+0xec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <TIM_Base_SetConfig+0xf0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d108      	bne.n	8001996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <TIM_Base_SetConfig+0xe4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01b      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d017      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <TIM_Base_SetConfig+0xe8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <TIM_Base_SetConfig+0xec>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00f      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <TIM_Base_SetConfig+0xf0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00b      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <TIM_Base_SetConfig+0xf4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <TIM_Base_SetConfig+0xf8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d003      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <TIM_Base_SetConfig+0xfc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d108      	bne.n	80019e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <TIM_Base_SetConfig+0xe4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d103      	bne.n	8001a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	615a      	str	r2, [r3, #20]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40000800 	.word	0x40000800
 8001a3c:	40000c00 	.word	0x40000c00
 8001a40:	40014000 	.word	0x40014000
 8001a44:	40014400 	.word	0x40014400
 8001a48:	40014800 	.word	0x40014800

08001a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Handler+0x1c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001a7c:	f001 fb78 	bl	8003170 <xTaskGetSchedulerState>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001a86:	f002 f95f 	bl	8003d48 <xPortSysTickHandler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <vApplicationGetIdleTaskMemory+0x30>)
 8001aaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200000d8 	.word	0x200000d8
 8001ac4:	20000180 	.word	0x20000180

08001ac8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <vApplicationGetTimerTaskMemory+0x30>)
 8001ade:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000380 	.word	0x20000380
 8001af8:	20000428 	.word	0x20000428

08001afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f103 0208 	add.w	r2, r3, #8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 0208 	add.w	r2, r3, #8
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f103 0208 	add.w	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d103      	bne.n	8001bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e00c      	b.n	8001bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e002      	b.n	8001bcc <vListInsert+0x2e>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d2f6      	bcs.n	8001bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6852      	ldr	r2, [r2, #4]
 8001c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d103      	bne.n	8001c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7c:	f383 8811 	msr	BASEPRI, r3
 8001c80:	f3bf 8f6f 	isb	sy
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c8a:	bf00      	nop
 8001c8c:	e7fe      	b.n	8001c8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c8e:	f001 ffc9 	bl	8003c24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	441a      	add	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	441a      	add	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	22ff      	movs	r2, #255	; 0xff
 8001cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00f      	beq.n	8001d0c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3310      	adds	r3, #16
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 f881 	bl	8002df8 <xTaskRemoveFromEventList>
 8001cf6:	e009      	b.n	8001d0c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fefd 	bl	8001afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3324      	adds	r3, #36	; 0x24
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fef8 	bl	8001afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d0c:	f001 ffba 	bl	8003c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08e      	sub	sp, #56	; 0x38
 8001d1e:	af02      	add	r7, sp, #8
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d40:	bf00      	nop
 8001d42:	e7fe      	b.n	8001d42 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d5c:	bf00      	nop
 8001d5e:	e7fe      	b.n	8001d5e <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <xQueueGenericCreateStatic+0x52>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <xQueueGenericCreateStatic+0x56>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <xQueueGenericCreateStatic+0x58>
 8001d70:	2300      	movs	r3, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10a      	bne.n	8001d8c <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	623b      	str	r3, [r7, #32]
}
 8001d88:	bf00      	nop
 8001d8a:	e7fe      	b.n	8001d8a <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <xQueueGenericCreateStatic+0x7e>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <xQueueGenericCreateStatic+0x82>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <xQueueGenericCreateStatic+0x84>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10a      	bne.n	8001db8 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	61fb      	str	r3, [r7, #28]
}
 8001db4:	bf00      	nop
 8001db6:	e7fe      	b.n	8001db6 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001db8:	2350      	movs	r3, #80	; 0x50
 8001dba:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b50      	cmp	r3, #80	; 0x50
 8001dc0:	d00a      	beq.n	8001dd8 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	61bb      	str	r3, [r7, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	e7fe      	b.n	8001dd6 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001dd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00d      	beq.n	8001e00 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f805 	bl	8001e0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e002      	b.n	8001e2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e38:	2101      	movs	r1, #1
 8001e3a:	69b8      	ldr	r0, [r7, #24]
 8001e3c:	f7ff ff12 	bl	8001c64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <xQueueGenericSend+0x32>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <xQueueGenericSend+0x40>
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <xQueueGenericSend+0x44>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <xQueueGenericSend+0x46>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <xQueueGenericSend+0x60>
	__asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d103      	bne.n	8001ebe <xQueueGenericSend+0x6e>
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <xQueueGenericSend+0x72>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <xQueueGenericSend+0x74>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <xQueueGenericSend+0x8e>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	623b      	str	r3, [r7, #32]
}
 8001eda:	bf00      	nop
 8001edc:	e7fe      	b.n	8001edc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ede:	f001 f947 	bl	8003170 <xTaskGetSchedulerState>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <xQueueGenericSend+0x9e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <xQueueGenericSend+0xa2>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <xQueueGenericSend+0xa4>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <xQueueGenericSend+0xbe>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	61fb      	str	r3, [r7, #28]
}
 8001f0a:	bf00      	nop
 8001f0c:	e7fe      	b.n	8001f0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f0e:	f001 fe89 	bl	8003c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <xQueueGenericSend+0xd4>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d112      	bne.n	8001f4a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2a:	f000 f9e7 	bl	80022fc <prvCopyDataToQueue>
 8001f2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	3324      	adds	r3, #36	; 0x24
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 ff5b 	bl	8002df8 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f42:	f001 fe9f 	bl	8003c84 <vPortExitCritical>
				return pdPASS;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e062      	b.n	8002010 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d103      	bne.n	8001f58 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f50:	f001 fe98 	bl	8003c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e05b      	b.n	8002010 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 ffac 	bl	8002ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f6c:	f001 fe8a 	bl	8003c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f70:	f000 fd4a 	bl	8002a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f74:	f001 fe56 	bl	8003c24 <vPortEnterCritical>
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d103      	bne.n	8001f8e <xQueueGenericSend+0x13e>
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d103      	bne.n	8001fa4 <xQueueGenericSend+0x154>
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa4:	f001 fe6e 	bl	8003c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fa8:	1d3a      	adds	r2, r7, #4
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 ff9b 	bl	8002eec <xTaskCheckForTimeOut>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d123      	bne.n	8002004 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fbe:	f000 fa95 	bl	80024ec <prvIsQueueFull>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	3310      	adds	r3, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fec1 	bl	8002d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd8:	f000 fa20 	bl	800241c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fdc:	f000 fd22 	bl	8002a24 <xTaskResumeAll>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d193      	bne.n	8001f0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <xQueueGenericSend+0x1c8>)
 8001fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	e78a      	b.n	8001f0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ffa:	f000 fa0f 	bl	800241c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ffe:	f000 fd11 	bl	8002a24 <xTaskResumeAll>
 8002002:	e784      	b.n	8001f0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002006:	f000 fa09 	bl	800241c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800200a:	f000 fd0b 	bl	8002a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800200e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002010:	4618      	mov	r0, r3
 8002012:	3738      	adds	r7, #56	; 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	e000ed04 	.word	0xe000ed04

0800201c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <xQueueGenericSendFromISR+0x3c>
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <xQueueGenericSendFromISR+0x40>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <xQueueGenericSendFromISR+0x42>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <xQueueGenericSendFromISR+0x6a>
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <xQueueGenericSendFromISR+0x6e>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <xQueueGenericSendFromISR+0x70>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	623b      	str	r3, [r7, #32]
}
 80020a2:	bf00      	nop
 80020a4:	e7fe      	b.n	80020a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020a6:	f001 fe9f 	bl	8003de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020aa:	f3ef 8211 	mrs	r2, BASEPRI
 80020ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	61fa      	str	r2, [r7, #28]
 80020c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <xQueueGenericSendFromISR+0xbc>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d12f      	bne.n	8002138 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020ee:	f000 f905 	bl	80022fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d112      	bne.n	8002122 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d016      	beq.n	8002132 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	3324      	adds	r3, #36	; 0x24
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fe75 	bl	8002df8 <xTaskRemoveFromEventList>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00b      	beq.n	8002132 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e007      	b.n	8002132 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002126:	3301      	adds	r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	b25a      	sxtb	r2, r3
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002132:	2301      	movs	r3, #1
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002136:	e001      	b.n	800213c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002146:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800214a:	4618      	mov	r0, r3
 800214c:	3740      	adds	r7, #64	; 0x40
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <xQueueReceive+0x30>
	__asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	623b      	str	r3, [r7, #32]
}
 8002180:	bf00      	nop
 8002182:	e7fe      	b.n	8002182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <xQueueReceive+0x3e>
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <xQueueReceive+0x42>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueReceive+0x44>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueReceive+0x5e>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	61fb      	str	r3, [r7, #28]
}
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021b2:	f000 ffdd 	bl	8003170 <xTaskGetSchedulerState>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <xQueueReceive+0x6e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <xQueueReceive+0x72>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <xQueueReceive+0x74>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xQueueReceive+0x8e>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61bb      	str	r3, [r7, #24]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021e2:	f001 fd1f 	bl	8003c24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d014      	beq.n	800221c <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021f6:	f000 f8eb 	bl	80023d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	3310      	adds	r3, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fdf2 	bl	8002df8 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002214:	f001 fd36 	bl	8003c84 <vPortExitCritical>
				return pdPASS;
 8002218:	2301      	movs	r3, #1
 800221a:	e069      	b.n	80022f0 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002222:	f001 fd2f 	bl	8003c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002226:	2300      	movs	r3, #0
 8002228:	e062      	b.n	80022f0 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fe43 	bl	8002ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800223a:	2301      	movs	r3, #1
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800223e:	f001 fd21 	bl	8003c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002242:	f000 fbe1 	bl	8002a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002246:	f001 fced 	bl	8003c24 <vPortEnterCritical>
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d103      	bne.n	8002260 <xQueueReceive+0x10c>
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002266:	b25b      	sxtb	r3, r3
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d103      	bne.n	8002276 <xQueueReceive+0x122>
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002276:	f001 fd05 	bl	8003c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fe32 	bl	8002eec <xTaskCheckForTimeOut>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d123      	bne.n	80022d6 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800228e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002290:	f000 f916 	bl	80024c0 <prvIsQueueEmpty>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	3324      	adds	r3, #36	; 0x24
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fd58 	bl	8002d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80022a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022aa:	f000 f8b7 	bl	800241c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80022ae:	f000 fbb9 	bl	8002a24 <xTaskResumeAll>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d194      	bne.n	80021e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <xQueueReceive+0x1a4>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	e78b      	b.n	80021e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022cc:	f000 f8a6 	bl	800241c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022d0:	f000 fba8 	bl	8002a24 <xTaskResumeAll>
 80022d4:	e785      	b.n	80021e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f000 f8a0 	bl	800241c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022dc:	f000 fba2 	bl	8002a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e2:	f000 f8ed 	bl	80024c0 <prvIsQueueEmpty>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f43f af7a 	beq.w	80021e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3730      	adds	r7, #48	; 0x30
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d14d      	bne.n	80023be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 ff40 	bl	80031ac <xTaskPriorityDisinherit>
 800232c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e043      	b.n	80023be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d119      	bne.n	8002370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6858      	ldr	r0, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	461a      	mov	r2, r3
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	f001 fffc 	bl	8004344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	441a      	add	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d32b      	bcc.n	80023be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e026      	b.n	80023be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	68d8      	ldr	r0, [r3, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	461a      	mov	r2, r3
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	f001 ffe2 	bl	8004344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	425b      	negs	r3, r3
 800238a:	441a      	add	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	425b      	negs	r3, r3
 80023a6:	441a      	add	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d105      	bne.n	80023be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023c6:	697b      	ldr	r3, [r7, #20]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d018      	beq.n	8002414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	441a      	add	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d303      	bcc.n	8002404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	461a      	mov	r2, r3
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f001 ff98 	bl	8004344 <memcpy>
	}
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002424:	f001 fbfe 	bl	8003c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002430:	e011      	b.n	8002456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fcda 	bl	8002df8 <xTaskRemoveFromEventList>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800244a:	f000 fdb1 	bl	8002fb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	3b01      	subs	r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	dce9      	bgt.n	8002432 <prvUnlockQueue+0x16>
 800245e:	e000      	b.n	8002462 <prvUnlockQueue+0x46>
					break;
 8002460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800246a:	f001 fc0b 	bl	8003c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800246e:	f001 fbd9 	bl	8003c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800247a:	e011      	b.n	80024a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3310      	adds	r3, #16
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fcb5 	bl	8002df8 <xTaskRemoveFromEventList>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002494:	f000 fd8c 	bl	8002fb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	3b01      	subs	r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	dce9      	bgt.n	800247c <prvUnlockQueue+0x60>
 80024a8:	e000      	b.n	80024ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80024aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80024b4:	f001 fbe6 	bl	8003c84 <vPortExitCritical>
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024c8:	f001 fbac 	bl	8003c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e001      	b.n	80024de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024de:	f001 fbd1 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024f4:	f001 fb96 	bl	8003c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	429a      	cmp	r2, r3
 8002502:	d102      	bne.n	800250a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002504:	2301      	movs	r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e001      	b.n	800250e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800250e:	f001 fbb9 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e014      	b.n	8002556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <vQueueAddToRegistry+0x50>)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10b      	bne.n	8002550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <vQueueAddToRegistry+0x50>)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <vQueueAddToRegistry+0x50>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800254e:	e006      	b.n	800255e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3301      	adds	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b07      	cmp	r3, #7
 800255a:	d9e7      	bls.n	800252c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000828 	.word	0x20000828

08002570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002580:	f001 fb50 	bl	8003c24 <vPortEnterCritical>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800258a:	b25b      	sxtb	r3, r3
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d103      	bne.n	800259a <vQueueWaitForMessageRestricted+0x2a>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d103      	bne.n	80025b0 <vQueueWaitForMessageRestricted+0x40>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025b0:	f001 fb68 	bl	8003c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fbeb 	bl	8002da0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f7ff ff26 	bl	800241c <prvUnlockQueue>
	}
 80025d0:	bf00      	nop
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af04      	add	r7, sp, #16
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <xTaskCreateStatic+0x2a>
	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	623b      	str	r3, [r7, #32]
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xTaskCreateStatic+0x46>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	61fb      	str	r3, [r7, #28]
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800261e:	23a8      	movs	r3, #168	; 0xa8
 8002620:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2ba8      	cmp	r3, #168	; 0xa8
 8002626:	d00a      	beq.n	800263e <xTaskCreateStatic+0x66>
	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	61bb      	str	r3, [r7, #24]
}
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800263e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01e      	beq.n	8002684 <xTaskCreateStatic+0xac>
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002654:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	2202      	movs	r2, #2
 800265a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800265e:	2300      	movs	r3, #0
 8002660:	9303      	str	r3, [sp, #12]
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f850 	bl	800271c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800267c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800267e:	f000 f8f3 	bl	8002868 <prvAddNewTaskToReadyList>
 8002682:	e001      	b.n	8002688 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002688:	697b      	ldr	r3, [r7, #20]
	}
 800268a:	4618      	mov	r0, r3
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002692:	b580      	push	{r7, lr}
 8002694:	b08c      	sub	sp, #48	; 0x30
 8002696:	af04      	add	r7, sp, #16
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fbde 	bl	8003e68 <pvPortMalloc>
 80026ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026b4:	20a8      	movs	r0, #168	; 0xa8
 80026b6:	f001 fbd7 	bl	8003e68 <pvPortMalloc>
 80026ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
 80026c8:	e005      	b.n	80026d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f001 fc98 	bl	8004000 <vPortFree>
 80026d0:	e001      	b.n	80026d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9303      	str	r3, [sp, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f80e 	bl	800271c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002700:	69f8      	ldr	r0, [r7, #28]
 8002702:	f000 f8b1 	bl	8002868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e002      	b.n	8002712 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002712:	69bb      	ldr	r3, [r7, #24]
	}
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	21a5      	movs	r1, #165	; 0xa5
 8002736:	f001 fd81 	bl	800423c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002744:	3b01      	subs	r3, #1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <prvInitialiseNewTask+0x58>
	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	617b      	str	r3, [r7, #20]
}
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01f      	beq.n	80027ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e012      	b.n	80027a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	7819      	ldrb	r1, [r3, #0]
 8002788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	3334      	adds	r3, #52	; 0x34
 8002790:	460a      	mov	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	3301      	adds	r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d9e9      	bls.n	8002780 <prvInitialiseNewTask+0x64>
 80027ac:	e000      	b.n	80027b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80027ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b8:	e003      	b.n	80027c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	2b37      	cmp	r3, #55	; 0x37
 80027c6:	d901      	bls.n	80027cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027c8:	2337      	movs	r3, #55	; 0x37
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	3304      	adds	r3, #4
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f9aa 	bl	8001b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	3318      	adds	r3, #24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f9a5 	bl	8001b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	2200      	movs	r2, #0
 800280c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	2200      	movs	r2, #0
 8002814:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3354      	adds	r3, #84	; 0x54
 800281c:	224c      	movs	r2, #76	; 0x4c
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f001 fd0b 	bl	800423c <memset>
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	4a0c      	ldr	r2, [pc, #48]	; (800285c <prvInitialiseNewTask+0x140>)
 800282a:	659a      	str	r2, [r3, #88]	; 0x58
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <prvInitialiseNewTask+0x144>)
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <prvInitialiseNewTask+0x148>)
 8002836:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	69b8      	ldr	r0, [r7, #24]
 800283e:	f001 f8c5 	bl	80039cc <pxPortInitialiseStack>
 8002842:	4602      	mov	r2, r0
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20004abc 	.word	0x20004abc
 8002860:	20004b24 	.word	0x20004b24
 8002864:	20004b8c 	.word	0x20004b8c

08002868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002870:	f001 f9d8 	bl	8003c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <prvAddNewTaskToReadyList+0xa8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	4a25      	ldr	r2, [pc, #148]	; (8002910 <prvAddNewTaskToReadyList+0xa8>)
 800287c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <prvAddNewTaskToReadyList+0xac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002886:	4a23      	ldr	r2, [pc, #140]	; (8002914 <prvAddNewTaskToReadyList+0xac>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <prvAddNewTaskToReadyList+0xa8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d110      	bne.n	80028b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002894:	f000 fbaa 	bl	8002fec <prvInitialiseTaskLists>
 8002898:	e00d      	b.n	80028b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <prvAddNewTaskToReadyList+0xb0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <prvAddNewTaskToReadyList+0xac>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d802      	bhi.n	80028b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <prvAddNewTaskToReadyList+0xac>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <prvAddNewTaskToReadyList+0xb4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <prvAddNewTaskToReadyList+0xb4>)
 80028be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <prvAddNewTaskToReadyList+0xb4>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <prvAddNewTaskToReadyList+0xb8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d903      	bls.n	80028dc <prvAddNewTaskToReadyList+0x74>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <prvAddNewTaskToReadyList+0xb8>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <prvAddNewTaskToReadyList+0xbc>)
 80028ea:	441a      	add	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f7ff f92f 	bl	8001b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028f8:	f001 f9c4 	bl	8003c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <prvAddNewTaskToReadyList+0xb0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <prvAddNewTaskToReadyList+0xac>)
 8002906:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000d3c 	.word	0x20000d3c
 8002914:	20000868 	.word	0x20000868
 8002918:	20000d48 	.word	0x20000d48
 800291c:	20000d58 	.word	0x20000d58
 8002920:	20000d44 	.word	0x20000d44
 8002924:	2000086c 	.word	0x2000086c

08002928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002936:	463a      	mov	r2, r7
 8002938:	1d39      	adds	r1, r7, #4
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8a8 	bl	8001a94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	9202      	str	r2, [sp, #8]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	460a      	mov	r2, r1
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <vTaskStartScheduler+0xc0>)
 8002958:	4824      	ldr	r0, [pc, #144]	; (80029ec <vTaskStartScheduler+0xc4>)
 800295a:	f7ff fe3d 	bl	80025d8 <xTaskCreateStatic>
 800295e:	4603      	mov	r3, r0
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <vTaskStartScheduler+0xc8>)
 8002962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002964:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <vTaskStartScheduler+0xc8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800296c:	2301      	movs	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e001      	b.n	8002976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d102      	bne.n	8002982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800297c:	f000 fcd8 	bl	8003330 <xTimerCreateTimerTask>
 8002980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d11b      	bne.n	80029c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	613b      	str	r3, [r7, #16]
}
 800299a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <vTaskStartScheduler+0xcc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3354      	adds	r3, #84	; 0x54
 80029a2:	4a15      	ldr	r2, [pc, #84]	; (80029f8 <vTaskStartScheduler+0xd0>)
 80029a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <vTaskStartScheduler+0xd4>)
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <vTaskStartScheduler+0xd8>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <vTaskStartScheduler+0xdc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029ba:	f001 f891 	bl	8003ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029be:	e00e      	b.n	80029de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d10a      	bne.n	80029de <vTaskStartScheduler+0xb6>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
}
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <vTaskStartScheduler+0xb4>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08004480 	.word	0x08004480
 80029ec:	08002fc9 	.word	0x08002fc9
 80029f0:	20000d60 	.word	0x20000d60
 80029f4:	20000868 	.word	0x20000868
 80029f8:	2000005c 	.word	0x2000005c
 80029fc:	20000d5c 	.word	0x20000d5c
 8002a00:	20000d48 	.word	0x20000d48
 8002a04:	20000d40 	.word	0x20000d40

08002a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <vTaskSuspendAll+0x18>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <vTaskSuspendAll+0x18>)
 8002a14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	20000d64 	.word	0x20000d64

08002a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <xTaskResumeAll+0x100>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	603b      	str	r3, [r7, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a50:	f001 f8e8 	bl	8003c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <xTaskResumeAll+0x100>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <xTaskResumeAll+0x100>)
 8002a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <xTaskResumeAll+0x100>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d156      	bne.n	8002b14 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <xTaskResumeAll+0x104>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d052      	beq.n	8002b14 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a6e:	e02f      	b.n	8002ad0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a70:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <xTaskResumeAll+0x108>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f8c7 	bl	8001c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f8c2 	bl	8001c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <xTaskResumeAll+0x10c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d903      	bls.n	8002aa0 <xTaskResumeAll+0x7c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <xTaskResumeAll+0x10c>)
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <xTaskResumeAll+0x110>)
 8002aae:	441a      	add	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f7ff f84d 	bl	8001b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <xTaskResumeAll+0x114>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <xTaskResumeAll+0x118>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <xTaskResumeAll+0x108>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1cb      	bne.n	8002a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ade:	f000 fb27 	bl	8003130 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <xTaskResumeAll+0x11c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002aee:	f000 f839 	bl	8002b64 <xTaskIncrementTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <xTaskResumeAll+0x118>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f1      	bne.n	8002aee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <xTaskResumeAll+0x11c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <xTaskResumeAll+0x118>)
 8002b12:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b14:	f001 f8b6 	bl	8003c84 <vPortExitCritical>

	return xAlreadyYielded;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000d64 	.word	0x20000d64
 8002b28:	20000d3c 	.word	0x20000d3c
 8002b2c:	20000cfc 	.word	0x20000cfc
 8002b30:	20000d44 	.word	0x20000d44
 8002b34:	2000086c 	.word	0x2000086c
 8002b38:	20000868 	.word	0x20000868
 8002b3c:	20000d50 	.word	0x20000d50
 8002b40:	20000d4c 	.word	0x20000d4c

08002b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <xTaskGetTickCount+0x1c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000d40 	.word	0x20000d40

08002b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <xTaskIncrementTick+0x108>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d170      	bne.n	8002c58 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <xTaskIncrementTick+0x10c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <xTaskIncrementTick+0x10c>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d120      	bne.n	8002bcc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b8a:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <xTaskIncrementTick+0x110>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <xTaskIncrementTick+0x46>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	603b      	str	r3, [r7, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xTaskIncrementTick+0x44>
 8002baa:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <xTaskIncrementTick+0x110>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <xTaskIncrementTick+0x114>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <xTaskIncrementTick+0x110>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	; (8002c78 <xTaskIncrementTick+0x114>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <xTaskIncrementTick+0x118>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a2d      	ldr	r2, [pc, #180]	; (8002c7c <xTaskIncrementTick+0x118>)
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	f000 fab2 	bl	8003130 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <xTaskIncrementTick+0x11c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d345      	bcc.n	8002c62 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <xTaskIncrementTick+0x110>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <xTaskIncrementTick+0x11c>)
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295
 8002be6:	601a      	str	r2, [r3, #0]
					break;
 8002be8:	e03b      	b.n	8002c62 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <xTaskIncrementTick+0x110>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d203      	bcs.n	8002c0a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <xTaskIncrementTick+0x11c>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c08:	e02b      	b.n	8002c62 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fffe 	bl	8001c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fff5 	bl	8001c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <xTaskIncrementTick+0x120>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d903      	bls.n	8002c3a <xTaskIncrementTick+0xd6>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <xTaskIncrementTick+0x120>)
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <xTaskIncrementTick+0x124>)
 8002c48:	441a      	add	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f7fe ff80 	bl	8001b56 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c56:	e7be      	b.n	8002bd6 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <xTaskIncrementTick+0x128>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <xTaskIncrementTick+0x128>)
 8002c60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c62:	697b      	ldr	r3, [r7, #20]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000d64 	.word	0x20000d64
 8002c70:	20000d40 	.word	0x20000d40
 8002c74:	20000cf4 	.word	0x20000cf4
 8002c78:	20000cf8 	.word	0x20000cf8
 8002c7c:	20000d54 	.word	0x20000d54
 8002c80:	20000d5c 	.word	0x20000d5c
 8002c84:	20000d44 	.word	0x20000d44
 8002c88:	2000086c 	.word	0x2000086c
 8002c8c:	20000d4c 	.word	0x20000d4c

08002c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c96:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <vTaskSwitchContext+0xb0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <vTaskSwitchContext+0xb4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ca4:	e046      	b.n	8002d34 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <vTaskSwitchContext+0xb4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <vTaskSwitchContext+0xb8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e010      	b.n	8002cd6 <vTaskSwitchContext+0x46>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	607b      	str	r3, [r7, #4]
}
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <vTaskSwitchContext+0x3e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	491d      	ldr	r1, [pc, #116]	; (8002d4c <vTaskSwitchContext+0xbc>)
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0e4      	beq.n	8002cb4 <vTaskSwitchContext+0x24>
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <vTaskSwitchContext+0xbc>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d104      	bne.n	8002d1a <vTaskSwitchContext+0x8a>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <vTaskSwitchContext+0xc0>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <vTaskSwitchContext+0xb8>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <vTaskSwitchContext+0xc0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3354      	adds	r3, #84	; 0x54
 8002d30:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <vTaskSwitchContext+0xc4>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	20000d64 	.word	0x20000d64
 8002d44:	20000d50 	.word	0x20000d50
 8002d48:	20000d44 	.word	0x20000d44
 8002d4c:	2000086c 	.word	0x2000086c
 8002d50:	20000868 	.word	0x20000868
 8002d54:	2000005c 	.word	0x2000005c

08002d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <vTaskPlaceOnEventList+0x44>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe ff09 	bl	8001b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	6838      	ldr	r0, [r7, #0]
 8002d90:	f000 fa7a 	bl	8003288 <prvAddCurrentTaskToDelayedList>
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000868 	.word	0x20000868

08002da0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	617b      	str	r3, [r7, #20]
}
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <vTaskPlaceOnEventListRestricted+0x54>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3318      	adds	r3, #24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7fe fec0 	bl	8001b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8002de0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68b8      	ldr	r0, [r7, #8]
 8002de6:	f000 fa4f 	bl	8003288 <prvAddCurrentTaskToDelayedList>
	}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000868 	.word	0x20000868

08002df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	60fb      	str	r3, [r7, #12]
}
 8002e20:	bf00      	nop
 8002e22:	e7fe      	b.n	8002e22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3318      	adds	r3, #24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fef1 	bl	8001c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <xTaskRemoveFromEventList+0xb0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11d      	bne.n	8002e72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fee8 	bl	8001c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <xTaskRemoveFromEventList+0xb4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d903      	bls.n	8002e54 <xTaskRemoveFromEventList+0x5c>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <xTaskRemoveFromEventList+0xb4>)
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <xTaskRemoveFromEventList+0xb8>)
 8002e62:	441a      	add	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f7fe fe73 	bl	8001b56 <vListInsertEnd>
 8002e70:	e005      	b.n	8002e7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	3318      	adds	r3, #24
 8002e76:	4619      	mov	r1, r3
 8002e78:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <xTaskRemoveFromEventList+0xbc>)
 8002e7a:	f7fe fe6c 	bl	8001b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <xTaskRemoveFromEventList+0xc0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d905      	bls.n	8002e98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <xTaskRemoveFromEventList+0xc4>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e001      	b.n	8002e9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e9c:	697b      	ldr	r3, [r7, #20]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000d64 	.word	0x20000d64
 8002eac:	20000d44 	.word	0x20000d44
 8002eb0:	2000086c 	.word	0x2000086c
 8002eb4:	20000cfc 	.word	0x20000cfc
 8002eb8:	20000868 	.word	0x20000868
 8002ebc:	20000d50 	.word	0x20000d50

08002ec0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <vTaskInternalSetTimeOutState+0x24>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <vTaskInternalSetTimeOutState+0x28>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	605a      	str	r2, [r3, #4]
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20000d54 	.word	0x20000d54
 8002ee8:	20000d40 	.word	0x20000d40

08002eec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10a      	bne.n	8002f12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	613b      	str	r3, [r7, #16]
}
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60fb      	str	r3, [r7, #12]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002f2e:	f000 fe79 	bl	8003c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <xTaskCheckForTimeOut+0xbc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d102      	bne.n	8002f52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e023      	b.n	8002f9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <xTaskCheckForTimeOut+0xc0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d007      	beq.n	8002f6e <xTaskCheckForTimeOut+0x82>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e015      	b.n	8002f9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d20b      	bcs.n	8002f90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff9b 	bl	8002ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e004      	b.n	8002f9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f9a:	f000 fe73 	bl	8003c84 <vPortExitCritical>

	return xReturn;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000d40 	.word	0x20000d40
 8002fac:	20000d54 	.word	0x20000d54

08002fb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <vTaskMissedYield+0x14>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20000d50 	.word	0x20000d50

08002fc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002fd0:	f000 f84c 	bl	800306c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <prvIdleTask+0x20>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fe4:	e7f4      	b.n	8002fd0 <prvIdleTask+0x8>
 8002fe6:	bf00      	nop
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	e00c      	b.n	8003012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a12      	ldr	r2, [pc, #72]	; (800304c <prvInitialiseTaskLists+0x60>)
 8003004:	4413      	add	r3, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fd78 	bl	8001afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3301      	adds	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b37      	cmp	r3, #55	; 0x37
 8003016:	d9ef      	bls.n	8002ff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003018:	480d      	ldr	r0, [pc, #52]	; (8003050 <prvInitialiseTaskLists+0x64>)
 800301a:	f7fe fd6f 	bl	8001afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <prvInitialiseTaskLists+0x68>)
 8003020:	f7fe fd6c 	bl	8001afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003024:	480c      	ldr	r0, [pc, #48]	; (8003058 <prvInitialiseTaskLists+0x6c>)
 8003026:	f7fe fd69 	bl	8001afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800302a:	480c      	ldr	r0, [pc, #48]	; (800305c <prvInitialiseTaskLists+0x70>)
 800302c:	f7fe fd66 	bl	8001afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <prvInitialiseTaskLists+0x74>)
 8003032:	f7fe fd63 	bl	8001afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <prvInitialiseTaskLists+0x78>)
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <prvInitialiseTaskLists+0x64>)
 800303a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <prvInitialiseTaskLists+0x7c>)
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <prvInitialiseTaskLists+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000086c 	.word	0x2000086c
 8003050:	20000ccc 	.word	0x20000ccc
 8003054:	20000ce0 	.word	0x20000ce0
 8003058:	20000cfc 	.word	0x20000cfc
 800305c:	20000d10 	.word	0x20000d10
 8003060:	20000d28 	.word	0x20000d28
 8003064:	20000cf4 	.word	0x20000cf4
 8003068:	20000cf8 	.word	0x20000cf8

0800306c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003072:	e019      	b.n	80030a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003074:	f000 fdd6 	bl	8003c24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <prvCheckTasksWaitingTermination+0x50>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fdc3 	bl	8001c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <prvCheckTasksWaitingTermination+0x54>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3b01      	subs	r3, #1
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <prvCheckTasksWaitingTermination+0x54>)
 8003092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 800309c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800309e:	f000 fdf1 	bl	8003c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f810 	bl	80030c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <prvCheckTasksWaitingTermination+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e1      	bne.n	8003074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000d10 	.word	0x20000d10
 80030c0:	20000d3c 	.word	0x20000d3c
 80030c4:	20000d24 	.word	0x20000d24

080030c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3354      	adds	r3, #84	; 0x54
 80030d4:	4618      	mov	r0, r3
 80030d6:	f001 f8b9 	bl	800424c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ff89 	bl	8004000 <vPortFree>
				vPortFree( pxTCB );
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 ff86 	bl	8004000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030f4:	e018      	b.n	8003128 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d103      	bne.n	8003108 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 ff7d 	bl	8004000 <vPortFree>
	}
 8003106:	e00f      	b.n	8003128 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800310e:	2b02      	cmp	r3, #2
 8003110:	d00a      	beq.n	8003128 <prvDeleteTCB+0x60>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60fb      	str	r3, [r7, #12]
}
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <prvDeleteTCB+0x5e>
	}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <prvResetNextTaskUnblockTime+0x38>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <prvResetNextTaskUnblockTime+0x3c>)
 8003142:	f04f 32ff 	mov.w	r2, #4294967295
 8003146:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003148:	e008      	b.n	800315c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <prvResetNextTaskUnblockTime+0x38>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <prvResetNextTaskUnblockTime+0x3c>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	20000cf4 	.word	0x20000cf4
 800316c:	20000d5c 	.word	0x20000d5c

08003170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <xTaskGetSchedulerState+0x34>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800317e:	2301      	movs	r3, #1
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	e008      	b.n	8003196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <xTaskGetSchedulerState+0x38>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800318c:	2302      	movs	r3, #2
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	e001      	b.n	8003196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003196:	687b      	ldr	r3, [r7, #4]
	}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000d48 	.word	0x20000d48
 80031a8:	20000d64 	.word	0x20000d64

080031ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d056      	beq.n	8003270 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031c2:	4b2e      	ldr	r3, [pc, #184]	; (800327c <xTaskPriorityDisinherit+0xd0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d00a      	beq.n	80031e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60fb      	str	r3, [r7, #12]
}
 80031de:	bf00      	nop
 80031e0:	e7fe      	b.n	80031e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	60bb      	str	r3, [r7, #8]
}
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	429a      	cmp	r2, r3
 8003214:	d02c      	beq.n	8003270 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d128      	bne.n	8003270 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	3304      	adds	r3, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fcf4 	bl	8001c10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <xTaskPriorityDisinherit+0xd4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d903      	bls.n	8003250 <xTaskPriorityDisinherit+0xa4>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <xTaskPriorityDisinherit+0xd4>)
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4a09      	ldr	r2, [pc, #36]	; (8003284 <xTaskPriorityDisinherit+0xd8>)
 800325e:	441a      	add	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7fe fc75 	bl	8001b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003270:	697b      	ldr	r3, [r7, #20]
	}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000868 	.word	0x20000868
 8003280:	20000d44 	.word	0x20000d44
 8003284:	2000086c 	.word	0x2000086c

08003288 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <prvAddCurrentTaskToDelayedList+0x90>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <prvAddCurrentTaskToDelayedList+0x94>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fcb6 	bl	8001c10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d10a      	bne.n	80032c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <prvAddCurrentTaskToDelayedList+0x94>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4819      	ldr	r0, [pc, #100]	; (8003320 <prvAddCurrentTaskToDelayedList+0x98>)
 80032bc:	f7fe fc4b 	bl	8001b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032c0:	e026      	b.n	8003310 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <prvAddCurrentTaskToDelayedList+0x94>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d209      	bcs.n	80032ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <prvAddCurrentTaskToDelayedList+0x9c>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <prvAddCurrentTaskToDelayedList+0x94>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe fc59 	bl	8001b9e <vListInsert>
}
 80032ec:	e010      	b.n	8003310 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <prvAddCurrentTaskToDelayedList+0xa0>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <prvAddCurrentTaskToDelayedList+0x94>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f7fe fc4f 	bl	8001b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d202      	bcs.n	8003310 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800330a:	4a08      	ldr	r2, [pc, #32]	; (800332c <prvAddCurrentTaskToDelayedList+0xa4>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000d40 	.word	0x20000d40
 800331c:	20000868 	.word	0x20000868
 8003320:	20000d28 	.word	0x20000d28
 8003324:	20000cf8 	.word	0x20000cf8
 8003328:	20000cf4 	.word	0x20000cf4
 800332c:	20000d5c 	.word	0x20000d5c

08003330 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800333a:	f000 fb07 	bl	800394c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <xTimerCreateTimerTask+0x80>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d021      	beq.n	800338a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800334e:	1d3a      	adds	r2, r7, #4
 8003350:	f107 0108 	add.w	r1, r7, #8
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fbb5 	bl	8001ac8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	9202      	str	r2, [sp, #8]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	2302      	movs	r3, #2
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	460a      	mov	r2, r1
 8003370:	4910      	ldr	r1, [pc, #64]	; (80033b4 <xTimerCreateTimerTask+0x84>)
 8003372:	4811      	ldr	r0, [pc, #68]	; (80033b8 <xTimerCreateTimerTask+0x88>)
 8003374:	f7ff f930 	bl	80025d8 <xTaskCreateStatic>
 8003378:	4603      	mov	r3, r0
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <xTimerCreateTimerTask+0x8c>)
 800337c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <xTimerCreateTimerTask+0x8c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003386:	2301      	movs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10a      	bne.n	80033a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	613b      	str	r3, [r7, #16]
}
 80033a2:	bf00      	nop
 80033a4:	e7fe      	b.n	80033a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80033a6:	697b      	ldr	r3, [r7, #20]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000d98 	.word	0x20000d98
 80033b4:	08004488 	.word	0x08004488
 80033b8:	080034f5 	.word	0x080034f5
 80033bc:	20000d9c 	.word	0x20000d9c

080033c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	623b      	str	r3, [r7, #32]
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <xTimerGenericCommand+0x98>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02a      	beq.n	800344c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	dc18      	bgt.n	800343a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003408:	f7ff feb2 	bl	8003170 <xTaskGetSchedulerState>
 800340c:	4603      	mov	r3, r0
 800340e:	2b02      	cmp	r3, #2
 8003410:	d109      	bne.n	8003426 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <xTimerGenericCommand+0x98>)
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	f107 0110 	add.w	r1, r7, #16
 800341a:	2300      	movs	r3, #0
 800341c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341e:	f7fe fd17 	bl	8001e50 <xQueueGenericSend>
 8003422:	6278      	str	r0, [r7, #36]	; 0x24
 8003424:	e012      	b.n	800344c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <xTimerGenericCommand+0x98>)
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	f107 0110 	add.w	r1, r7, #16
 800342e:	2300      	movs	r3, #0
 8003430:	2200      	movs	r2, #0
 8003432:	f7fe fd0d 	bl	8001e50 <xQueueGenericSend>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24
 8003438:	e008      	b.n	800344c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <xTimerGenericCommand+0x98>)
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	f107 0110 	add.w	r1, r7, #16
 8003442:	2300      	movs	r3, #0
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	f7fe fde9 	bl	800201c <xQueueGenericSendFromISR>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800344e:	4618      	mov	r0, r3
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000d98 	.word	0x20000d98

0800345c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <prvProcessExpiredTimer+0x94>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fbcb 	bl	8001c10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	18d1      	adds	r1, r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	6978      	ldr	r0, [r7, #20]
 8003496:	f000 f8d1 	bl	800363c <prvInsertTimerInActiveList>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01f      	beq.n	80034e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034a0:	2300      	movs	r3, #0
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	2100      	movs	r1, #0
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff88 	bl	80033c0 <xTimerGenericCommand>
 80034b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	6978      	ldr	r0, [r7, #20]
 80034e6:	4798      	blx	r3
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000d90 	.word	0x20000d90

080034f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f857 	bl	80035b4 <prvGetNextExpireTime>
 8003506:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4619      	mov	r1, r3
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f803 	bl	8003518 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003512:	f000 f8d5 	bl	80036c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003516:	e7f1      	b.n	80034fc <prvTimerTask+0x8>

08003518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003522:	f7ff fa71 	bl	8002a08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f866 	bl	80035fc <prvSampleTimeNow>
 8003530:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d130      	bne.n	800359a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <prvProcessTimerOrBlockTask+0x3c>
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	429a      	cmp	r2, r3
 8003544:	d806      	bhi.n	8003554 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003546:	f7ff fa6d 	bl	8002a24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff85 	bl	800345c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003552:	e024      	b.n	800359e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <prvProcessTimerOrBlockTask+0x90>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <prvProcessTimerOrBlockTask+0x50>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <prvProcessTimerOrBlockTask+0x52>
 8003568:	2300      	movs	r3, #0
 800356a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <prvProcessTimerOrBlockTask+0x94>)
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	f7fe fff9 	bl	8002570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800357e:	f7ff fa51 	bl	8002a24 <xTaskResumeAll>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <prvProcessTimerOrBlockTask+0x98>)
 800358a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	f3bf 8f6f 	isb	sy
}
 8003598:	e001      	b.n	800359e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800359a:	f7ff fa43 	bl	8002a24 <xTaskResumeAll>
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000d94 	.word	0x20000d94
 80035ac:	20000d98 	.word	0x20000d98
 80035b0:	e000ed04 	.word	0xe000ed04

080035b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <prvGetNextExpireTime+0x44>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <prvGetNextExpireTime+0x16>
 80035c6:	2201      	movs	r2, #1
 80035c8:	e000      	b.n	80035cc <prvGetNextExpireTime+0x18>
 80035ca:	2200      	movs	r2, #0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <prvGetNextExpireTime+0x44>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e001      	b.n	80035e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000d90 	.word	0x20000d90

080035fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003604:	f7ff fa9e 	bl	8002b44 <xTaskGetTickCount>
 8003608:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <prvSampleTimeNow+0x3c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	d205      	bcs.n	8003620 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003614:	f000 f936 	bl	8003884 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e002      	b.n	8003626 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <prvSampleTimeNow+0x3c>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000da0 	.word	0x20000da0

0800363c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d812      	bhi.n	8003688 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003670:	2301      	movs	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e01b      	b.n	80036ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <prvInsertTimerInActiveList+0x7c>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe fa8c 	bl	8001b9e <vListInsert>
 8003686:	e012      	b.n	80036ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d206      	bcs.n	800369e <prvInsertTimerInActiveList+0x62>
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e007      	b.n	80036ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <prvInsertTimerInActiveList+0x80>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7fe fa78 	bl	8001b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80036ae:	697b      	ldr	r3, [r7, #20]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000d94 	.word	0x20000d94
 80036bc:	20000d90 	.word	0x20000d90

080036c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
 80036c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036c6:	e0ca      	b.n	800385e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da18      	bge.n	8003700 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	3304      	adds	r3, #4
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	61fb      	str	r3, [r7, #28]
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	6850      	ldr	r0, [r2, #4]
 80036f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f2c0 80ab 	blt.w	800385e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fa79 	bl	8001c10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800371e:	463b      	mov	r3, r7
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff6b 	bl	80035fc <prvSampleTimeNow>
 8003726:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b09      	cmp	r3, #9
 800372c:	f200 8096 	bhi.w	800385c <prvProcessReceivedCommands+0x19c>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <prvProcessReceivedCommands+0x78>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003761 	.word	0x08003761
 800373c:	08003761 	.word	0x08003761
 8003740:	08003761 	.word	0x08003761
 8003744:	080037d5 	.word	0x080037d5
 8003748:	080037e9 	.word	0x080037e9
 800374c:	08003833 	.word	0x08003833
 8003750:	08003761 	.word	0x08003761
 8003754:	08003761 	.word	0x08003761
 8003758:	080037d5 	.word	0x080037d5
 800375c:	080037e9 	.word	0x080037e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	18d1      	adds	r1, r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003780:	f7ff ff5c 	bl	800363c <prvInsertTimerInActiveList>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d069      	beq.n	800385e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003790:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05e      	beq.n	800385e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	441a      	add	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b2:	f7ff fe05 	bl	80033c0 <xTimerGenericCommand>
 80037b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d14f      	bne.n	800385e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	61bb      	str	r3, [r7, #24]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80037e6:	e03a      	b.n	800385e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	617b      	str	r3, [r7, #20]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382c:	f7ff ff06 	bl	800363c <prvInsertTimerInActiveList>
					break;
 8003830:	e015      	b.n	800385e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003842:	f000 fbdd 	bl	8004000 <vPortFree>
 8003846:	e00a      	b.n	800385e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800385a:	e000      	b.n	800385e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800385c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <prvProcessReceivedCommands+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1d39      	adds	r1, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fc74 	bl	8002154 <xQueueReceive>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af2a 	bne.w	80036c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3730      	adds	r7, #48	; 0x30
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000d98 	.word	0x20000d98

08003884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800388a:	e048      	b.n	800391e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800388c:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <prvSwitchTimerLists+0xc0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003896:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <prvSwitchTimerLists+0xc0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f9b3 	bl	8001c10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02e      	beq.n	800391e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d90e      	bls.n	80038f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <prvSwitchTimerLists+0xc0>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe f958 	bl	8001b9e <vListInsert>
 80038ee:	e016      	b.n	800391e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038f0:	2300      	movs	r3, #0
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	2100      	movs	r1, #0
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff fd60 	bl	80033c0 <xTimerGenericCommand>
 8003900:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	603b      	str	r3, [r7, #0]
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <prvSwitchTimerLists+0xc0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1b1      	bne.n	800388c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <prvSwitchTimerLists+0xc0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <prvSwitchTimerLists+0xc4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <prvSwitchTimerLists+0xc0>)
 8003934:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <prvSwitchTimerLists+0xc4>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000d90 	.word	0x20000d90
 8003948:	20000d94 	.word	0x20000d94

0800394c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003952:	f000 f967 	bl	8003c24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d120      	bne.n	80039a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800395e:	4814      	ldr	r0, [pc, #80]	; (80039b0 <prvCheckForValidListAndQueue+0x64>)
 8003960:	f7fe f8cc 	bl	8001afc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003964:	4813      	ldr	r0, [pc, #76]	; (80039b4 <prvCheckForValidListAndQueue+0x68>)
 8003966:	f7fe f8c9 	bl	8001afc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <prvCheckForValidListAndQueue+0x6c>)
 800396c:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <prvCheckForValidListAndQueue+0x64>)
 800396e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <prvCheckForValidListAndQueue+0x70>)
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <prvCheckForValidListAndQueue+0x68>)
 8003974:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <prvCheckForValidListAndQueue+0x74>)
 800397c:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <prvCheckForValidListAndQueue+0x78>)
 800397e:	2110      	movs	r1, #16
 8003980:	200a      	movs	r0, #10
 8003982:	f7fe f9ca 	bl	8001d1a <xQueueGenericCreateStatic>
 8003986:	4603      	mov	r3, r0
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 800398a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <prvCheckForValidListAndQueue+0x60>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	490b      	ldr	r1, [pc, #44]	; (80039c8 <prvCheckForValidListAndQueue+0x7c>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fdbe 	bl	800251c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a0:	f000 f970 	bl	8003c84 <vPortExitCritical>
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000d98 	.word	0x20000d98
 80039b0:	20000d68 	.word	0x20000d68
 80039b4:	20000d7c 	.word	0x20000d7c
 80039b8:	20000d90 	.word	0x20000d90
 80039bc:	20000d94 	.word	0x20000d94
 80039c0:	20000e44 	.word	0x20000e44
 80039c4:	20000da4 	.word	0x20000da4
 80039c8:	08004490 	.word	0x08004490

080039cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b04      	subs	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3b04      	subs	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <pxPortInitialiseStack+0x64>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b14      	subs	r3, #20
 8003a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3b04      	subs	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f06f 0202 	mvn.w	r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3b20      	subs	r3, #32
 8003a20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	08003a35 	.word	0x08003a35

08003a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <prvTaskExitError+0x54>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d00a      	beq.n	8003a5e <prvTaskExitError+0x2a>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	60fb      	str	r3, [r7, #12]
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <prvTaskExitError+0x28>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60bb      	str	r3, [r7, #8]
}
 8003a70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a72:	bf00      	nop
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0fc      	beq.n	8003a74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	2000000c 	.word	0x2000000c
 8003a8c:	00000000 	.word	0x00000000

08003a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <pxCurrentTCBConst2>)
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6808      	ldr	r0, [r1, #0]
 8003a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	f380 8809 	msr	PSP, r0
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f380 8811 	msr	BASEPRI, r0
 8003aaa:	4770      	bx	lr
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst2>:
 8003ab0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <prvPortStartFirstTask+0x24>)
 8003aba:	6800      	ldr	r0, [r0, #0]
 8003abc:	6800      	ldr	r0, [r0, #0]
 8003abe:	f380 8808 	msr	MSP, r0
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8814 	msr	CONTROL, r0
 8003aca:	b662      	cpsie	i
 8003acc:	b661      	cpsie	f
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	df00      	svc	0
 8003ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ada:	bf00      	nop
 8003adc:	e000ed08 	.word	0xe000ed08

08003ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <xPortStartScheduler+0x120>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a46      	ldr	r2, [pc, #280]	; (8003c04 <xPortStartScheduler+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10a      	bne.n	8003b06 <xPortStartScheduler+0x26>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	613b      	str	r3, [r7, #16]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <xPortStartScheduler+0x120>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <xPortStartScheduler+0x128>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10a      	bne.n	8003b26 <xPortStartScheduler+0x46>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <xPortStartScheduler+0x12c>)
 8003b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4b31      	ldr	r3, [pc, #196]	; (8003c10 <xPortStartScheduler+0x130>)
 8003b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b4e:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b54:	e009      	b.n	8003b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d0ef      	beq.n	8003b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b76:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1c3 0307 	rsb	r3, r3, #7
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d00a      	beq.n	8003b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	60bb      	str	r3, [r7, #8]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b98:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <xPortStartScheduler+0x134>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <xPortStartScheduler+0x134>)
 8003ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <xPortStartScheduler+0x134>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003baa:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <xPortStartScheduler+0x134>)
 8003bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <xPortStartScheduler+0x138>)
 8003bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003bce:	f000 f8dd 	bl	8003d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <xPortStartScheduler+0x13c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bd8:	f000 f8fc 	bl	8003dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <xPortStartScheduler+0x140>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <xPortStartScheduler+0x140>)
 8003be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003be8:	f7ff ff66 	bl	8003ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bec:	f7ff f850 	bl	8002c90 <vTaskSwitchContext>
	prvTaskExitError();
 8003bf0:	f7ff ff20 	bl	8003a34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed00 	.word	0xe000ed00
 8003c04:	410fc271 	.word	0x410fc271
 8003c08:	410fc270 	.word	0x410fc270
 8003c0c:	e000e400 	.word	0xe000e400
 8003c10:	20000e94 	.word	0x20000e94
 8003c14:	20000e98 	.word	0x20000e98
 8003c18:	e000ed20 	.word	0xe000ed20
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	e000ef34 	.word	0xe000ef34

08003c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	607b      	str	r3, [r7, #4]
}
 8003c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <vPortEnterCritical+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10f      	bne.n	8003c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <vPortEnterCritical+0x5c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	603b      	str	r3, [r7, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <vPortEnterCritical+0x4a>
	}
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <vPortExitCritical+0x50>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <vPortExitCritical+0x24>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	607b      	str	r3, [r7, #4]
}
 8003ca4:	bf00      	nop
 8003ca6:	e7fe      	b.n	8003ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <vPortExitCritical+0x50>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <vPortExitCritical+0x50>)
 8003cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <vPortExitCritical+0x50>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <vPortExitCritical+0x42>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f383 8811 	msr	BASEPRI, r3
}
 8003cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c
	...

08003ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ce0:	f3ef 8009 	mrs	r0, PSP
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <pxCurrentTCBConst>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f01e 0f10 	tst.w	lr, #16
 8003cf0:	bf08      	it	eq
 8003cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	6010      	str	r0, [r2, #0]
 8003cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d04:	f380 8811 	msr	BASEPRI, r0
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f7fe ffbe 	bl	8002c90 <vTaskSwitchContext>
 8003d14:	f04f 0000 	mov.w	r0, #0
 8003d18:	f380 8811 	msr	BASEPRI, r0
 8003d1c:	bc09      	pop	{r0, r3}
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	6808      	ldr	r0, [r1, #0]
 8003d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d26:	f01e 0f10 	tst.w	lr, #16
 8003d2a:	bf08      	it	eq
 8003d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d30:	f380 8809 	msr	PSP, r0
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	f3af 8000 	nop.w

08003d40 <pxCurrentTCBConst>:
 8003d40:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop

08003d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	607b      	str	r3, [r7, #4]
}
 8003d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d62:	f7fe feff 	bl	8002b64 <xTaskIncrementTick>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <xPortSysTickHandler+0x40>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f383 8811 	msr	BASEPRI, r3
}
 8003d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <vPortSetupTimerInterrupt+0x34>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <vPortSetupTimerInterrupt+0x38>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <vPortSetupTimerInterrupt+0x3c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <vPortSetupTimerInterrupt+0x40>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <vPortSetupTimerInterrupt+0x44>)
 8003daa:	3b01      	subs	r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <vPortSetupTimerInterrupt+0x34>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000e010 	.word	0xe000e010
 8003dc4:	e000e018 	.word	0xe000e018
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	10624dd3 	.word	0x10624dd3
 8003dd0:	e000e014 	.word	0xe000e014

08003dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003de4 <vPortEnableVFP+0x10>
 8003dd8:	6801      	ldr	r1, [r0, #0]
 8003dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dde:	6001      	str	r1, [r0, #0]
 8003de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003de2:	bf00      	nop
 8003de4:	e000ed88 	.word	0xe000ed88

08003de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003dee:	f3ef 8305 	mrs	r3, IPSR
 8003df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	d914      	bls.n	8003e24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <vPortValidateInterruptPriority+0x70>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e04:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <vPortValidateInterruptPriority+0x74>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	7afa      	ldrb	r2, [r7, #11]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20a      	bcs.n	8003e24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <vPortValidateInterruptPriority+0x78>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <vPortValidateInterruptPriority+0x7c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d90a      	bls.n	8003e4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	603b      	str	r3, [r7, #0]
}
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <vPortValidateInterruptPriority+0x60>
	}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e3f0 	.word	0xe000e3f0
 8003e5c:	20000e94 	.word	0x20000e94
 8003e60:	e000ed0c 	.word	0xe000ed0c
 8003e64:	20000e98 	.word	0x20000e98

08003e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e74:	f7fe fdc8 	bl	8002a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e78:	4b5b      	ldr	r3, [pc, #364]	; (8003fe8 <pvPortMalloc+0x180>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e80:	f000 f920 	bl	80040c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e84:	4b59      	ldr	r3, [pc, #356]	; (8003fec <pvPortMalloc+0x184>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8093 	bne.w	8003fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01d      	beq.n	8003ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e98:	2208      	movs	r2, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d014      	beq.n	8003ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f023 0307 	bic.w	r3, r3, #7
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	617b      	str	r3, [r7, #20]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d06e      	beq.n	8003fb8 <pvPortMalloc+0x150>
 8003eda:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <pvPortMalloc+0x188>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d869      	bhi.n	8003fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ee4:	4b43      	ldr	r3, [pc, #268]	; (8003ff4 <pvPortMalloc+0x18c>)
 8003ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ee8:	4b42      	ldr	r3, [pc, #264]	; (8003ff4 <pvPortMalloc+0x18c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eee:	e004      	b.n	8003efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d903      	bls.n	8003f0c <pvPortMalloc+0xa4>
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f1      	bne.n	8003ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <pvPortMalloc+0x180>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d050      	beq.n	8003fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	4413      	add	r3, r2
 8003f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	2308      	movs	r3, #8
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d91f      	bls.n	8003f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <pvPortMalloc+0xf8>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	613b      	str	r3, [r7, #16]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	1ad2      	subs	r2, r2, r3
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f72:	69b8      	ldr	r0, [r7, #24]
 8003f74:	f000 f908 	bl	8004188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <pvPortMalloc+0x188>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <pvPortMalloc+0x188>)
 8003f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <pvPortMalloc+0x188>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <pvPortMalloc+0x190>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d203      	bcs.n	8003f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <pvPortMalloc+0x188>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <pvPortMalloc+0x190>)
 8003f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <pvPortMalloc+0x184>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <pvPortMalloc+0x194>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <pvPortMalloc+0x194>)
 8003fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fb8:	f7fe fd34 	bl	8002a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <pvPortMalloc+0x174>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	60fb      	str	r3, [r7, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <pvPortMalloc+0x172>
	return pvReturn;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3728      	adds	r7, #40	; 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20004aa4 	.word	0x20004aa4
 8003fec:	20004ab8 	.word	0x20004ab8
 8003ff0:	20004aa8 	.word	0x20004aa8
 8003ff4:	20004a9c 	.word	0x20004a9c
 8003ff8:	20004aac 	.word	0x20004aac
 8003ffc:	20004ab0 	.word	0x20004ab0

08004000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04d      	beq.n	80040ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004012:	2308      	movs	r3, #8
 8004014:	425b      	negs	r3, r3
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <vPortFree+0xb8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <vPortFree+0x44>
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	60fb      	str	r3, [r7, #12]
}
 8004040:	bf00      	nop
 8004042:	e7fe      	b.n	8004042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <vPortFree+0x62>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	60bb      	str	r3, [r7, #8]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <vPortFree+0xb8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01e      	beq.n	80040ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11a      	bne.n	80040ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <vPortFree+0xb8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004088:	f7fe fcbe 	bl	8002a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <vPortFree+0xbc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4413      	add	r3, r2
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <vPortFree+0xbc>)
 8004098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800409a:	6938      	ldr	r0, [r7, #16]
 800409c:	f000 f874 	bl	8004188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <vPortFree+0xc0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <vPortFree+0xc0>)
 80040a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040aa:	f7fe fcbb 	bl	8002a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20004ab8 	.word	0x20004ab8
 80040bc:	20004aa8 	.word	0x20004aa8
 80040c0:	20004ab4 	.word	0x20004ab4

080040c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <prvHeapInit+0xac>)
 80040d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <prvHeapInit+0xac>)
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <prvHeapInit+0xb0>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <prvHeapInit+0xb0>)
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <prvHeapInit+0xb4>)
 8004124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <prvHeapInit+0xb4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvHeapInit+0xb4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <prvHeapInit+0xb4>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <prvHeapInit+0xb8>)
 8004152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <prvHeapInit+0xbc>)
 800415a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <prvHeapInit+0xc0>)
 800415e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	20000e9c 	.word	0x20000e9c
 8004174:	20004a9c 	.word	0x20004a9c
 8004178:	20004aa4 	.word	0x20004aa4
 800417c:	20004aac 	.word	0x20004aac
 8004180:	20004aa8 	.word	0x20004aa8
 8004184:	20004ab8 	.word	0x20004ab8

08004188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <prvInsertBlockIntoFreeList+0xac>)
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e002      	b.n	800419c <prvInsertBlockIntoFreeList+0x14>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d8f7      	bhi.n	8004196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d108      	bne.n	80041ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d118      	bne.n	8004210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <prvInsertBlockIntoFreeList+0xb0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d00d      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e008      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <prvInsertBlockIntoFreeList+0xb0>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e003      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d002      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20004a9c 	.word	0x20004a9c
 8004238:	20004aa4 	.word	0x20004aa4

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <_reclaim_reent>:
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <_reclaim_reent+0xa8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4283      	cmp	r3, r0
 8004252:	b570      	push	{r4, r5, r6, lr}
 8004254:	4604      	mov	r4, r0
 8004256:	d04b      	beq.n	80042f0 <_reclaim_reent+0xa4>
 8004258:	69c3      	ldr	r3, [r0, #28]
 800425a:	b143      	cbz	r3, 800426e <_reclaim_reent+0x22>
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d144      	bne.n	80042ec <_reclaim_reent+0xa0>
 8004262:	69e3      	ldr	r3, [r4, #28]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	b111      	cbz	r1, 800426e <_reclaim_reent+0x22>
 8004268:	4620      	mov	r0, r4
 800426a:	f000 f879 	bl	8004360 <_free_r>
 800426e:	6961      	ldr	r1, [r4, #20]
 8004270:	b111      	cbz	r1, 8004278 <_reclaim_reent+0x2c>
 8004272:	4620      	mov	r0, r4
 8004274:	f000 f874 	bl	8004360 <_free_r>
 8004278:	69e1      	ldr	r1, [r4, #28]
 800427a:	b111      	cbz	r1, 8004282 <_reclaim_reent+0x36>
 800427c:	4620      	mov	r0, r4
 800427e:	f000 f86f 	bl	8004360 <_free_r>
 8004282:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004284:	b111      	cbz	r1, 800428c <_reclaim_reent+0x40>
 8004286:	4620      	mov	r0, r4
 8004288:	f000 f86a 	bl	8004360 <_free_r>
 800428c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428e:	b111      	cbz	r1, 8004296 <_reclaim_reent+0x4a>
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f865 	bl	8004360 <_free_r>
 8004296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004298:	b111      	cbz	r1, 80042a0 <_reclaim_reent+0x54>
 800429a:	4620      	mov	r0, r4
 800429c:	f000 f860 	bl	8004360 <_free_r>
 80042a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80042a2:	b111      	cbz	r1, 80042aa <_reclaim_reent+0x5e>
 80042a4:	4620      	mov	r0, r4
 80042a6:	f000 f85b 	bl	8004360 <_free_r>
 80042aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042ac:	b111      	cbz	r1, 80042b4 <_reclaim_reent+0x68>
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 f856 	bl	8004360 <_free_r>
 80042b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042b6:	b111      	cbz	r1, 80042be <_reclaim_reent+0x72>
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 f851 	bl	8004360 <_free_r>
 80042be:	6a23      	ldr	r3, [r4, #32]
 80042c0:	b1b3      	cbz	r3, 80042f0 <_reclaim_reent+0xa4>
 80042c2:	4620      	mov	r0, r4
 80042c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042c8:	4718      	bx	r3
 80042ca:	5949      	ldr	r1, [r1, r5]
 80042cc:	b941      	cbnz	r1, 80042e0 <_reclaim_reent+0x94>
 80042ce:	3504      	adds	r5, #4
 80042d0:	69e3      	ldr	r3, [r4, #28]
 80042d2:	2d80      	cmp	r5, #128	; 0x80
 80042d4:	68d9      	ldr	r1, [r3, #12]
 80042d6:	d1f8      	bne.n	80042ca <_reclaim_reent+0x7e>
 80042d8:	4620      	mov	r0, r4
 80042da:	f000 f841 	bl	8004360 <_free_r>
 80042de:	e7c0      	b.n	8004262 <_reclaim_reent+0x16>
 80042e0:	680e      	ldr	r6, [r1, #0]
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 f83c 	bl	8004360 <_free_r>
 80042e8:	4631      	mov	r1, r6
 80042ea:	e7ef      	b.n	80042cc <_reclaim_reent+0x80>
 80042ec:	2500      	movs	r5, #0
 80042ee:	e7ef      	b.n	80042d0 <_reclaim_reent+0x84>
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	bf00      	nop
 80042f4:	2000005c 	.word	0x2000005c

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 f880 	bl	8004410 <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	080044b8 	.word	0x080044b8
 8004334:	080044b8 	.word	0x080044b8
 8004338:	080044b8 	.word	0x080044b8
 800433c:	080044bc 	.word	0x080044bc

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <memcpy>:
 8004344:	440a      	add	r2, r1
 8004346:	4291      	cmp	r1, r2
 8004348:	f100 33ff 	add.w	r3, r0, #4294967295
 800434c:	d100      	bne.n	8004350 <memcpy+0xc>
 800434e:	4770      	bx	lr
 8004350:	b510      	push	{r4, lr}
 8004352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800435a:	4291      	cmp	r1, r2
 800435c:	d1f9      	bne.n	8004352 <memcpy+0xe>
 800435e:	bd10      	pop	{r4, pc}

08004360 <_free_r>:
 8004360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004362:	2900      	cmp	r1, #0
 8004364:	d044      	beq.n	80043f0 <_free_r+0x90>
 8004366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436a:	9001      	str	r0, [sp, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f1a1 0404 	sub.w	r4, r1, #4
 8004372:	bfb8      	it	lt
 8004374:	18e4      	addlt	r4, r4, r3
 8004376:	f000 f83f 	bl	80043f8 <__malloc_lock>
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <_free_r+0x94>)
 800437c:	9801      	ldr	r0, [sp, #4]
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	b933      	cbnz	r3, 8004390 <_free_r+0x30>
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	6014      	str	r4, [r2, #0]
 8004386:	b003      	add	sp, #12
 8004388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800438c:	f000 b83a 	b.w	8004404 <__malloc_unlock>
 8004390:	42a3      	cmp	r3, r4
 8004392:	d908      	bls.n	80043a6 <_free_r+0x46>
 8004394:	6825      	ldr	r5, [r4, #0]
 8004396:	1961      	adds	r1, r4, r5
 8004398:	428b      	cmp	r3, r1
 800439a:	bf01      	itttt	eq
 800439c:	6819      	ldreq	r1, [r3, #0]
 800439e:	685b      	ldreq	r3, [r3, #4]
 80043a0:	1949      	addeq	r1, r1, r5
 80043a2:	6021      	streq	r1, [r4, #0]
 80043a4:	e7ed      	b.n	8004382 <_free_r+0x22>
 80043a6:	461a      	mov	r2, r3
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b10b      	cbz	r3, 80043b0 <_free_r+0x50>
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d9fa      	bls.n	80043a6 <_free_r+0x46>
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	1855      	adds	r5, r2, r1
 80043b4:	42a5      	cmp	r5, r4
 80043b6:	d10b      	bne.n	80043d0 <_free_r+0x70>
 80043b8:	6824      	ldr	r4, [r4, #0]
 80043ba:	4421      	add	r1, r4
 80043bc:	1854      	adds	r4, r2, r1
 80043be:	42a3      	cmp	r3, r4
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	d1e0      	bne.n	8004386 <_free_r+0x26>
 80043c4:	681c      	ldr	r4, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	440c      	add	r4, r1
 80043cc:	6014      	str	r4, [r2, #0]
 80043ce:	e7da      	b.n	8004386 <_free_r+0x26>
 80043d0:	d902      	bls.n	80043d8 <_free_r+0x78>
 80043d2:	230c      	movs	r3, #12
 80043d4:	6003      	str	r3, [r0, #0]
 80043d6:	e7d6      	b.n	8004386 <_free_r+0x26>
 80043d8:	6825      	ldr	r5, [r4, #0]
 80043da:	1961      	adds	r1, r4, r5
 80043dc:	428b      	cmp	r3, r1
 80043de:	bf04      	itt	eq
 80043e0:	6819      	ldreq	r1, [r3, #0]
 80043e2:	685b      	ldreq	r3, [r3, #4]
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	bf04      	itt	eq
 80043e8:	1949      	addeq	r1, r1, r5
 80043ea:	6021      	streq	r1, [r4, #0]
 80043ec:	6054      	str	r4, [r2, #4]
 80043ee:	e7ca      	b.n	8004386 <_free_r+0x26>
 80043f0:	b003      	add	sp, #12
 80043f2:	bd30      	pop	{r4, r5, pc}
 80043f4:	20004bf8 	.word	0x20004bf8

080043f8 <__malloc_lock>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__malloc_lock+0x8>)
 80043fa:	f7ff bfa1 	b.w	8004340 <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	20004bf4 	.word	0x20004bf4

08004404 <__malloc_unlock>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__malloc_unlock+0x8>)
 8004406:	f7ff bf9c 	b.w	8004342 <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	20004bf4 	.word	0x20004bf4

08004410 <_init>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	bf00      	nop
 8004414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004416:	bc08      	pop	{r3}
 8004418:	469e      	mov	lr, r3
 800441a:	4770      	bx	lr

0800441c <_fini>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	bf00      	nop
 8004420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004422:	bc08      	pop	{r3}
 8004424:	469e      	mov	lr, r3
 8004426:	4770      	bx	lr
