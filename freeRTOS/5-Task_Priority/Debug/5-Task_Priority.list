
5-Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000060  08004ecc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  08004ecc  00024c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017183  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000314b  00000000  00000000  00037256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4e  00000000  00000000  0003b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034ab  00000000  00000000  0003c69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015718  00000000  00000000  0003fb49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097733  00000000  00000000  00055261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005600  00000000  00000000  000ec994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  000f1f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dd0 	.word	0x08004dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004dd0 	.word	0x08004dd0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
TaskProfiler RedTaskProfiler,GreenTaskProfiler,YellowTaskProfiler;

TaskHandle_t red_Handle,green_Handle,yellow_Handle;		//Task Handle

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af02      	add	r7, sp, #8
  HAL_Init();	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 80004e2:	f000 fa75 	bl	80009d0 <HAL_Init>
  SystemClock_Config(); 	/* Configure the system clock */
 80004e6:	f000 f85b 	bl	80005a0 <SystemClock_Config>
  MX_GPIO_Init();	/* Initialize all configured peripherals */
 80004ea:	f000 f8ef 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f8c3 	bl	8000678 <MX_USART2_UART_Init>

  xTaskCreate(vRedLEDControllerTask,			//Task1 creation
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x58>)
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	2264      	movs	r2, #100	; 0x64
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <main+0x5c>)
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x60>)
 8000502:	f002 fd5a 	bl	8002fba <xTaskCreate>
		  100,
		  NULL,
		  2,									//Setting Task1 as higher Priority than Task3
		  &red_Handle);

  xTaskCreate(vGreenLEDControllerTask,			//Task2 creation
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x64>)
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	2264      	movs	r2, #100	; 0x64
 8000512:	490c      	ldr	r1, [pc, #48]	; (8000544 <main+0x68>)
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <main+0x6c>)
 8000516:	f002 fd50 	bl	8002fba <xTaskCreate>
		  100,
		  NULL,
		  2,									//Setting Task2 as higher Priority than Task3
		  &green_Handle);

  xTaskCreate(vYellowLEDControllerTask,			//Task3 creation
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <main+0x70>)
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2301      	movs	r3, #1
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	2264      	movs	r2, #100	; 0x64
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <main+0x74>)
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x78>)
 800052a:	f002 fd46 	bl	8002fba <xTaskCreate>
		  100,
		  NULL,
		  1,									//Setting Task3 as lower Priority than Task1 and Task2
		  &yellow_Handle);

  vTaskStartScheduler();
 800052e:	f002 fe9f 	bl	8003270 <vTaskStartScheduler>

  while (1)
 8000532:	e7fe      	b.n	8000532 <main+0x56>
 8000534:	200000cc 	.word	0x200000cc
 8000538:	08004de8 	.word	0x08004de8
 800053c:	08000559 	.word	0x08000559
 8000540:	200000d0 	.word	0x200000d0
 8000544:	08004dfc 	.word	0x08004dfc
 8000548:	08000571 	.word	0x08000571
 800054c:	200000d4 	.word	0x200000d4
 8000550:	08004e14 	.word	0x08004e14
 8000554:	08000589 	.word	0x08000589

08000558 <vRedLEDControllerTask>:
  }

}

void vRedLEDControllerTask(void *pvParameters)		//Task1 Function
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		RedTaskProfiler++;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <vRedLEDControllerTask+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a01      	ldr	r2, [pc, #4]	; (800056c <vRedLEDControllerTask+0x14>)
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	e7f9      	b.n	8000560 <vRedLEDControllerTask+0x8>
 800056c:	200000c0 	.word	0x200000c0

08000570 <vGreenLEDControllerTask>:
	}

}

void vGreenLEDControllerTask(void *pvParameters)		//Task2 Function
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenTaskProfiler++;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <vGreenLEDControllerTask+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a01      	ldr	r2, [pc, #4]	; (8000584 <vGreenLEDControllerTask+0x14>)
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e7f9      	b.n	8000578 <vGreenLEDControllerTask+0x8>
 8000584:	200000c4 	.word	0x200000c4

08000588 <vYellowLEDControllerTask>:
	}

}

void vYellowLEDControllerTask(void *pvParameters)		//Task3 Function
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		YellowTaskProfiler++;
 8000590:	4b02      	ldr	r3, [pc, #8]	; (800059c <vYellowLEDControllerTask+0x14>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a01      	ldr	r2, [pc, #4]	; (800059c <vYellowLEDControllerTask+0x14>)
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	e7f9      	b.n	8000590 <vYellowLEDControllerTask+0x8>
 800059c:	200000c8 	.word	0x200000c8

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fb24 	bl	8004bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000614:	2310      	movs	r3, #16
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800061c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061e:	2304      	movs	r3, #4
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fc78 	bl	8000f20 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000636:	f000 f883 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 feda 	bl	8001410 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000662:	f000 f86d 	bl	8000740 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fb80 	bl	8001db4 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f841 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 f971 	bl	8000a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010000 	.word	0x40010000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_MspInit+0x54>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x54>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x54>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 fa17 	bl	8000bc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12b      	bne.n	800081e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_MspInit+0x88>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_UART_MspInit+0x88>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_UART_MspInit+0x88>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_UART_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <HAL_UART_MspInit+0x88>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_UART_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fe:	230c      	movs	r3, #12
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080e:	2307      	movs	r3, #7
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_UART_MspInit+0x8c>)
 800081a:	f000 f9fd 	bl	8000c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40004400 	.word	0x40004400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_InitTick+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a2d      	ldr	r2, [pc, #180]	; (8000904 <HAL_InitTick+0xd0>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <HAL_InitTick+0xd0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fff0 	bl	8001850 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000870:	f000 ffda 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8000874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <HAL_InitTick+0xd4>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0c9b      	lsrs	r3, r3, #18
 8000880:	3b01      	subs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_InitTick+0xd8>)
 8000886:	4a22      	ldr	r2, [pc, #136]	; (8000910 <HAL_InitTick+0xdc>)
 8000888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_InitTick+0xd8>)
 800088c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <HAL_InitTick+0xd8>)
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_InitTick+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_InitTick+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_InitTick+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008aa:	4818      	ldr	r0, [pc, #96]	; (800090c <HAL_InitTick+0xd8>)
 80008ac:	f001 f802 	bl	80018b4 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11b      	bne.n	80008f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <HAL_InitTick+0xd8>)
 80008c0:	f001 f852 	bl	8001968 <HAL_TIM_Base_Start_IT>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d111      	bne.n	80008f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 f992 	bl	8000bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d808      	bhi.n	80008f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 f96e 	bl	8000bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_InitTick+0xe0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e002      	b.n	80008f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3730      	adds	r7, #48	; 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	200000d8 	.word	0x200000d8
 8000910:	40010000 	.word	0x40010000
 8000914:	20000004 	.word	0x20000004

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800094a:	f001 f86f 	bl	8001a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000d8 	.word	0x200000d8

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffd7 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f004 f985 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd95 	bl	80004dc <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009c0:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 80009c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009c8:	20004c48 	.word	0x20004c48

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f8d8 	bl	8000bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f7ff ff18 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fea2 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000120 	.word	0x20000120

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000120 	.word	0x20000120

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <__NVIC_EnableIRQ+0x38>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ff4c 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd6:	f7ff ff61 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	68b9      	ldr	r1, [r7, #8]
 8000be0:	6978      	ldr	r0, [r7, #20]
 8000be2:	f7ff ffb1 	bl	8000b48 <NVIC_EncodePriority>
 8000be6:	4602      	mov	r2, r0
 8000be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff80 	bl	8000af4 <__NVIC_SetPriority>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff54 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e159      	b.n	8000ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8148 	bne.w	8000ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80a2 	beq.w	8000ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <HAL_GPIO_Init+0x2e8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a56      	ldr	r2, [pc, #344]	; (8000f00 <HAL_GPIO_Init+0x2e8>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b54      	ldr	r3, [pc, #336]	; (8000f00 <HAL_GPIO_Init+0x2e8>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_GPIO_Init+0x2ec>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a49      	ldr	r2, [pc, #292]	; (8000f08 <HAL_GPIO_Init+0x2f0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d019      	beq.n	8000e1a <HAL_GPIO_Init+0x202>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_GPIO_Init+0x2f4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d013      	beq.n	8000e16 <HAL_GPIO_Init+0x1fe>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_GPIO_Init+0x2f8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00d      	beq.n	8000e12 <HAL_GPIO_Init+0x1fa>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <HAL_GPIO_Init+0x2fc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d007      	beq.n	8000e0e <HAL_GPIO_Init+0x1f6>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_GPIO_Init+0x300>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_GPIO_Init+0x1f2>
 8000e06:	2304      	movs	r3, #4
 8000e08:	e008      	b.n	8000e1c <HAL_GPIO_Init+0x204>
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x204>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e004      	b.n	8000e1c <HAL_GPIO_Init+0x204>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e002      	b.n	8000e1c <HAL_GPIO_Init+0x204>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x204>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	f002 0203 	and.w	r2, r2, #3
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4093      	lsls	r3, r2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	4935      	ldr	r1, [pc, #212]	; (8000f04 <HAL_GPIO_Init+0x2ec>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e3a:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e88:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000edc:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f67f aea2 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40013800 	.word	0x40013800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40013c00 	.word	0x40013c00

08000f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e267      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d075      	beq.n	800102a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f3e:	4b88      	ldr	r3, [pc, #544]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d00c      	beq.n	8000f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f4a:	4b85      	ldr	r3, [pc, #532]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d112      	bne.n	8000f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f56:	4b82      	ldr	r3, [pc, #520]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f62:	d10b      	bne.n	8000f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d05b      	beq.n	8001028 <HAL_RCC_OscConfig+0x108>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d157      	bne.n	8001028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e242      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d106      	bne.n	8000f94 <HAL_RCC_OscConfig+0x74>
 8000f86:	4b76      	ldr	r3, [pc, #472]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a75      	ldr	r2, [pc, #468]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0xb0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x98>
 8000f9e:	4b70      	ldr	r3, [pc, #448]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a6f      	ldr	r2, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xb0>
 8000fb8:	4b69      	ldr	r3, [pc, #420]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a68      	ldr	r2, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a65      	ldr	r2, [pc, #404]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd30 	bl	8000a3c <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fd2c 	bl	8000a3c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e207      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	4b5b      	ldr	r3, [pc, #364]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xc0>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fd1c 	bl	8000a3c <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fd18 	bl	8000a3c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1f3      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0xe8>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800104a:	2b08      	cmp	r3, #8
 800104c:	d11c      	bne.n	8001088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d116      	bne.n	8001088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x152>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e1c7      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4937      	ldr	r1, [pc, #220]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	e03a      	b.n	80010fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <HAL_RCC_OscConfig+0x244>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff fcd1 	bl	8000a3c <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff fccd 	bl	8000a3c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1a8      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4925      	ldr	r1, [pc, #148]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d2:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_RCC_OscConfig+0x244>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d8:	f7ff fcb0 	bl	8000a3c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fcac 	bl	8000a3c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e187      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d036      	beq.n	8001178 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d016      	beq.n	8001140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_RCC_OscConfig+0x248>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001118:	f7ff fc90 	bl	8000a3c <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fc8c 	bl	8000a3c <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e167      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_OscConfig+0x240>)
 8001134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x200>
 800113e:	e01b      	b.n	8001178 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_RCC_OscConfig+0x248>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fc79 	bl	8000a3c <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114c:	e00e      	b.n	800116c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff fc75 	bl	8000a3c <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d907      	bls.n	800116c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e150      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
 8001160:	40023800 	.word	0x40023800
 8001164:	42470000 	.word	0x42470000
 8001168:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800116e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ea      	bne.n	800114e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8097 	beq.w	80012b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b81      	ldr	r3, [pc, #516]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10f      	bne.n	80011b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b77      	ldr	r3, [pc, #476]	; (8001394 <HAL_RCC_OscConfig+0x474>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b74      	ldr	r3, [pc, #464]	; (8001394 <HAL_RCC_OscConfig+0x474>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a73      	ldr	r2, [pc, #460]	; (8001394 <HAL_RCC_OscConfig+0x474>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc35 	bl	8000a3c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fc31 	bl	8000a3c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e10c      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b6a      	ldr	r3, [pc, #424]	; (8001394 <HAL_RCC_OscConfig+0x474>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x2ea>
 80011fc:	4b64      	ldr	r3, [pc, #400]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	4a63      	ldr	r2, [pc, #396]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6713      	str	r3, [r2, #112]	; 0x70
 8001208:	e01c      	b.n	8001244 <HAL_RCC_OscConfig+0x324>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b05      	cmp	r3, #5
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x30c>
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001216:	4a5e      	ldr	r2, [pc, #376]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
 800121e:	4b5c      	ldr	r3, [pc, #368]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0x324>
 800122c:	4b58      	ldr	r3, [pc, #352]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	4a57      	ldr	r2, [pc, #348]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
 8001238:	4b55      	ldr	r3, [pc, #340]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	4a54      	ldr	r2, [pc, #336]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800123e:	f023 0304 	bic.w	r3, r3, #4
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d015      	beq.n	8001278 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fbf6 	bl	8000a3c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fbf2 	bl	8000a3c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e0cb      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126a:	4b49      	ldr	r3, [pc, #292]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0ee      	beq.n	8001254 <HAL_RCC_OscConfig+0x334>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff fbe0 	bl	8000a3c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff fbdc 	bl	8000a3c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0b5      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ee      	bne.n	8001280 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80012ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a1 	beq.w	8001400 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d05c      	beq.n	8001384 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d141      	bne.n	8001356 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_RCC_OscConfig+0x478>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fbb0 	bl	8000a3c <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff fbac 	bl	8000a3c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e087      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	3b01      	subs	r3, #1
 8001318:	041b      	lsls	r3, r3, #16
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	491b      	ldr	r1, [pc, #108]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x478>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fb85 	bl	8000a3c <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fb81 	bl	8000a3c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e05c      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x416>
 8001354:	e054      	b.n	8001400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x478>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fb6e 	bl	8000a3c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fb6a 	bl	8000a3c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e045      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_OscConfig+0x470>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x444>
 8001382:	e03d      	b.n	8001400 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d107      	bne.n	800139c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e038      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000
 8001398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_RCC_OscConfig+0x4ec>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d028      	beq.n	80013fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d121      	bne.n	80013fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11a      	bne.n	80013fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013cc:	4013      	ands	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d111      	bne.n	80013fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	3b01      	subs	r3, #1
 80013e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0cc      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d90c      	bls.n	800144c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b8      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a58      	ldr	r2, [pc, #352]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494d      	ldr	r1, [pc, #308]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d044      	beq.n	8001530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d119      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d003      	beq.n	80014ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e067      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4934      	ldr	r1, [pc, #208]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa9c 	bl	8000a3c <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fa98 	bl	8000a3c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e04f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d20c      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e032      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490e      	ldr	r1, [pc, #56]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f821 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159a:	4602      	mov	r2, r0
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f93c 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08004e44 	.word	0x08004e44
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e0:	b094      	sub	sp, #80	; 0x50
 80015e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
 80015e8:	2300      	movs	r3, #0
 80015ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f4:	4b79      	ldr	r3, [pc, #484]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d00d      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x40>
 8001600:	2b08      	cmp	r3, #8
 8001602:	f200 80e1 	bhi.w	80017c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x34>
 800160a:	2b04      	cmp	r3, #4
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x3a>
 800160e:	e0db      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001610:	4b73      	ldr	r3, [pc, #460]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001614:	e0db      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001616:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800161a:	e0d8      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800161c:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001632:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	2200      	movs	r2, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
 800163c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800163e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
 800164a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800164e:	4622      	mov	r2, r4
 8001650:	462b      	mov	r3, r5
 8001652:	f04f 0000 	mov.w	r0, #0
 8001656:	f04f 0100 	mov.w	r1, #0
 800165a:	0159      	lsls	r1, r3, #5
 800165c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001660:	0150      	lsls	r0, r2, #5
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4621      	mov	r1, r4
 8001668:	1a51      	subs	r1, r2, r1
 800166a:	6139      	str	r1, [r7, #16]
 800166c:	4629      	mov	r1, r5
 800166e:	eb63 0301 	sbc.w	r3, r3, r1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001680:	4659      	mov	r1, fp
 8001682:	018b      	lsls	r3, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800168a:	4651      	mov	r1, sl
 800168c:	018a      	lsls	r2, r1, #6
 800168e:	4651      	mov	r1, sl
 8001690:	ebb2 0801 	subs.w	r8, r2, r1
 8001694:	4659      	mov	r1, fp
 8001696:	eb63 0901 	sbc.w	r9, r3, r1
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ae:	4690      	mov	r8, r2
 80016b0:	4699      	mov	r9, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	eb18 0303 	adds.w	r3, r8, r3
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	462b      	mov	r3, r5
 80016bc:	eb49 0303 	adc.w	r3, r9, r3
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016ce:	4629      	mov	r1, r5
 80016d0:	024b      	lsls	r3, r1, #9
 80016d2:	4621      	mov	r1, r4
 80016d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016d8:	4621      	mov	r1, r4
 80016da:	024a      	lsls	r2, r1, #9
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e2:	2200      	movs	r2, #0
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ec:	f7fe fd78 	bl	80001e0 <__aeabi_uldivmod>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4613      	mov	r3, r2
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016f8:	e058      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	099b      	lsrs	r3, r3, #6
 8001700:	2200      	movs	r2, #0
 8001702:	4618      	mov	r0, r3
 8001704:	4611      	mov	r1, r2
 8001706:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001714:	4642      	mov	r2, r8
 8001716:	464b      	mov	r3, r9
 8001718:	f04f 0000 	mov.w	r0, #0
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	0159      	lsls	r1, r3, #5
 8001722:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001726:	0150      	lsls	r0, r2, #5
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4641      	mov	r1, r8
 800172e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001732:	4649      	mov	r1, r9
 8001734:	eb63 0b01 	sbc.w	fp, r3, r1
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001744:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001748:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800174c:	ebb2 040a 	subs.w	r4, r2, sl
 8001750:	eb63 050b 	sbc.w	r5, r3, fp
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	00eb      	lsls	r3, r5, #3
 800175e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001762:	00e2      	lsls	r2, r4, #3
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4643      	mov	r3, r8
 800176a:	18e3      	adds	r3, r4, r3
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	464b      	mov	r3, r9
 8001770:	eb45 0303 	adc.w	r3, r5, r3
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001782:	4629      	mov	r1, r5
 8001784:	028b      	lsls	r3, r1, #10
 8001786:	4621      	mov	r1, r4
 8001788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800178c:	4621      	mov	r1, r4
 800178e:	028a      	lsls	r2, r1, #10
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001796:	2200      	movs	r2, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	61fa      	str	r2, [r7, #28]
 800179c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a0:	f7fe fd1e 	bl	80001e0 <__aeabi_uldivmod>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4613      	mov	r3, r2
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017c6:	e002      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3750      	adds	r7, #80	; 0x50
 80017d4:	46bd      	mov	sp, r7
 80017d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	007a1200 	.word	0x007a1200

080017e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_RCC_GetHCLKFreq+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000

08001800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001804:	f7ff fff0 	bl	80017e8 <HAL_RCC_GetHCLKFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0a9b      	lsrs	r3, r3, #10
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4903      	ldr	r1, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	08004e54 	.word	0x08004e54

08001828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800182c:	f7ff ffdc 	bl	80017e8 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0b5b      	lsrs	r3, r3, #13
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK2Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08004e54 	.word	0x08004e54

08001850 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	220f      	movs	r2, #15
 800185e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <HAL_RCC_GetClockConfig+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0207 	and.w	r2, r3, #7
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	601a      	str	r2, [r3, #0]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40023c00 	.word	0x40023c00

080018b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e041      	b.n	800194a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f839 	bl	8001952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 f9ca 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d001      	beq.n	8001980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e044      	b.n	8001a0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_TIM_Base_Start_IT+0xb0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d018      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x6c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019aa:	d013      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x6c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_TIM_Base_Start_IT+0xb4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00e      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x6c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_TIM_Base_Start_IT+0xb8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x6c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_TIM_Base_Start_IT+0xbc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x6c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_TIM_Base_Start_IT+0xc0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d010      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f6:	e007      	b.n	8001a08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40000c00 	.word	0x40000c00
 8001a28:	40014000 	.word	0x40014000

08001a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d122      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d11b      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0202 	mvn.w	r2, #2
 8001a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8ee 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001a74:	e005      	b.n	8001a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f8e0 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8f1 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d122      	bne.n	8001adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0204 	mvn.w	r2, #4
 8001aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8c4 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8b6 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8c7 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0208 	mvn.w	r2, #8
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f89a 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f88c 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f89d 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0210 	mvn.w	r2, #16
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f870 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f862 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f873 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0201 	mvn.w	r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fdb6 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	2b80      	cmp	r3, #128	; 0x80
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8e2 	bl	8001da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f838 	bl	8001c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d107      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0220 	mvn.w	r2, #32
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ac 	bl	8001d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <TIM_Base_SetConfig+0xe4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00f      	beq.n	8001cc4 <TIM_Base_SetConfig+0x38>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d00b      	beq.n	8001cc4 <TIM_Base_SetConfig+0x38>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <TIM_Base_SetConfig+0xe8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <TIM_Base_SetConfig+0x38>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <TIM_Base_SetConfig+0xec>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <TIM_Base_SetConfig+0x38>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <TIM_Base_SetConfig+0xf0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d108      	bne.n	8001cd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <TIM_Base_SetConfig+0xe4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01b      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d017      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <TIM_Base_SetConfig+0xe8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <TIM_Base_SetConfig+0xec>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00f      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <TIM_Base_SetConfig+0xf0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00b      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <TIM_Base_SetConfig+0xf4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <TIM_Base_SetConfig+0xf8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <TIM_Base_SetConfig+0x8a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <TIM_Base_SetConfig+0xfc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <TIM_Base_SetConfig+0xe4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d103      	bne.n	8001d5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	615a      	str	r2, [r3, #20]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40014000 	.word	0x40014000
 8001d84:	40014400 	.word	0x40014400
 8001d88:	40014800 	.word	0x40014800

08001d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e03f      	b.n	8001e46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe fce2 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f829 	bl	8001e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b0c0      	sub	sp, #256	; 0x100
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6c:	68d9      	ldr	r1, [r3, #12]
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	ea40 0301 	orr.w	r3, r0, r1
 8001e78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ea8:	f021 010c 	bic.w	r1, r1, #12
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eca:	6999      	ldr	r1, [r3, #24]
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	ea40 0301 	orr.w	r3, r0, r1
 8001ed6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b8f      	ldr	r3, [pc, #572]	; (800211c <UART_SetConfig+0x2cc>)
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d005      	beq.n	8001ef0 <UART_SetConfig+0xa0>
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b8d      	ldr	r3, [pc, #564]	; (8002120 <UART_SetConfig+0x2d0>)
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d104      	bne.n	8001efa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ef0:	f7ff fc9a 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8001ef4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ef8:	e003      	b.n	8001f02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001efa:	f7ff fc81 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 8001efe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0c:	f040 810c 	bne.w	8002128 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f22:	4622      	mov	r2, r4
 8001f24:	462b      	mov	r3, r5
 8001f26:	1891      	adds	r1, r2, r2
 8001f28:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f2a:	415b      	adcs	r3, r3
 8001f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f32:	4621      	mov	r1, r4
 8001f34:	eb12 0801 	adds.w	r8, r2, r1
 8001f38:	4629      	mov	r1, r5
 8001f3a:	eb43 0901 	adc.w	r9, r3, r1
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f52:	4690      	mov	r8, r2
 8001f54:	4699      	mov	r9, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	eb18 0303 	adds.w	r3, r8, r3
 8001f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f60:	462b      	mov	r3, r5
 8001f62:	eb49 0303 	adc.w	r3, r9, r3
 8001f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f7e:	460b      	mov	r3, r1
 8001f80:	18db      	adds	r3, r3, r3
 8001f82:	653b      	str	r3, [r7, #80]	; 0x50
 8001f84:	4613      	mov	r3, r2
 8001f86:	eb42 0303 	adc.w	r3, r2, r3
 8001f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f94:	f7fe f924 	bl	80001e0 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4b61      	ldr	r3, [pc, #388]	; (8002124 <UART_SetConfig+0x2d4>)
 8001f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	011c      	lsls	r4, r3, #4
 8001fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001faa:	2200      	movs	r2, #0
 8001fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fb8:	4642      	mov	r2, r8
 8001fba:	464b      	mov	r3, r9
 8001fbc:	1891      	adds	r1, r2, r2
 8001fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fc0:	415b      	adcs	r3, r3
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fc8:	4641      	mov	r1, r8
 8001fca:	eb12 0a01 	adds.w	sl, r2, r1
 8001fce:	4649      	mov	r1, r9
 8001fd0:	eb43 0b01 	adc.w	fp, r3, r1
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fe0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fe8:	4692      	mov	sl, r2
 8001fea:	469b      	mov	fp, r3
 8001fec:	4643      	mov	r3, r8
 8001fee:	eb1a 0303 	adds.w	r3, sl, r3
 8001ff2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	eb4b 0303 	adc.w	r3, fp, r3
 8001ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800200c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002010:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002014:	460b      	mov	r3, r1
 8002016:	18db      	adds	r3, r3, r3
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
 800201a:	4613      	mov	r3, r2
 800201c:	eb42 0303 	adc.w	r3, r2, r3
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
 8002022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002026:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800202a:	f7fe f8d9 	bl	80001e0 <__aeabi_uldivmod>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4611      	mov	r1, r2
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <UART_SetConfig+0x2d4>)
 8002036:	fba3 2301 	umull	r2, r3, r3, r1
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2264      	movs	r2, #100	; 0x64
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	1acb      	subs	r3, r1, r3
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <UART_SetConfig+0x2d4>)
 800204c:	fba3 2302 	umull	r2, r3, r3, r2
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002058:	441c      	add	r4, r3
 800205a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002064:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002068:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800206c:	4642      	mov	r2, r8
 800206e:	464b      	mov	r3, r9
 8002070:	1891      	adds	r1, r2, r2
 8002072:	63b9      	str	r1, [r7, #56]	; 0x38
 8002074:	415b      	adcs	r3, r3
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800207c:	4641      	mov	r1, r8
 800207e:	1851      	adds	r1, r2, r1
 8002080:	6339      	str	r1, [r7, #48]	; 0x30
 8002082:	4649      	mov	r1, r9
 8002084:	414b      	adcs	r3, r1
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002094:	4659      	mov	r1, fp
 8002096:	00cb      	lsls	r3, r1, #3
 8002098:	4651      	mov	r1, sl
 800209a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800209e:	4651      	mov	r1, sl
 80020a0:	00ca      	lsls	r2, r1, #3
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	4642      	mov	r2, r8
 80020aa:	189b      	adds	r3, r3, r2
 80020ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020b0:	464b      	mov	r3, r9
 80020b2:	460a      	mov	r2, r1
 80020b4:	eb42 0303 	adc.w	r3, r2, r3
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020d0:	460b      	mov	r3, r1
 80020d2:	18db      	adds	r3, r3, r3
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d6:	4613      	mov	r3, r2
 80020d8:	eb42 0303 	adc.w	r3, r2, r3
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020e6:	f7fe f87b 	bl	80001e0 <__aeabi_uldivmod>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <UART_SetConfig+0x2d4>)
 80020f0:	fba3 1302 	umull	r1, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	2164      	movs	r1, #100	; 0x64
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	3332      	adds	r3, #50	; 0x32
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <UART_SetConfig+0x2d4>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	f003 0207 	and.w	r2, r3, #7
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4422      	add	r2, r4
 8002116:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002118:	e106      	b.n	8002328 <UART_SetConfig+0x4d8>
 800211a:	bf00      	nop
 800211c:	40011000 	.word	0x40011000
 8002120:	40011400 	.word	0x40011400
 8002124:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800212c:	2200      	movs	r2, #0
 800212e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002136:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800213a:	4642      	mov	r2, r8
 800213c:	464b      	mov	r3, r9
 800213e:	1891      	adds	r1, r2, r2
 8002140:	6239      	str	r1, [r7, #32]
 8002142:	415b      	adcs	r3, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800214a:	4641      	mov	r1, r8
 800214c:	1854      	adds	r4, r2, r1
 800214e:	4649      	mov	r1, r9
 8002150:	eb43 0501 	adc.w	r5, r3, r1
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	00eb      	lsls	r3, r5, #3
 800215e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002162:	00e2      	lsls	r2, r4, #3
 8002164:	4614      	mov	r4, r2
 8002166:	461d      	mov	r5, r3
 8002168:	4643      	mov	r3, r8
 800216a:	18e3      	adds	r3, r4, r3
 800216c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002170:	464b      	mov	r3, r9
 8002172:	eb45 0303 	adc.w	r3, r5, r3
 8002176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800217a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002186:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002196:	4629      	mov	r1, r5
 8002198:	008b      	lsls	r3, r1, #2
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021a0:	4621      	mov	r1, r4
 80021a2:	008a      	lsls	r2, r1, #2
 80021a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021a8:	f7fe f81a 	bl	80001e0 <__aeabi_uldivmod>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <UART_SetConfig+0x4e4>)
 80021b2:	fba3 2302 	umull	r2, r3, r3, r2
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	011c      	lsls	r4, r3, #4
 80021ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	1891      	adds	r1, r2, r2
 80021d2:	61b9      	str	r1, [r7, #24]
 80021d4:	415b      	adcs	r3, r3
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021dc:	4641      	mov	r1, r8
 80021de:	1851      	adds	r1, r2, r1
 80021e0:	6139      	str	r1, [r7, #16]
 80021e2:	4649      	mov	r1, r9
 80021e4:	414b      	adcs	r3, r1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f4:	4659      	mov	r1, fp
 80021f6:	00cb      	lsls	r3, r1, #3
 80021f8:	4651      	mov	r1, sl
 80021fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021fe:	4651      	mov	r1, sl
 8002200:	00ca      	lsls	r2, r1, #3
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	4603      	mov	r3, r0
 8002208:	4642      	mov	r2, r8
 800220a:	189b      	adds	r3, r3, r2
 800220c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002210:	464b      	mov	r3, r9
 8002212:	460a      	mov	r2, r1
 8002214:	eb42 0303 	adc.w	r3, r2, r3
 8002218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	67bb      	str	r3, [r7, #120]	; 0x78
 8002226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002234:	4649      	mov	r1, r9
 8002236:	008b      	lsls	r3, r1, #2
 8002238:	4641      	mov	r1, r8
 800223a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800223e:	4641      	mov	r1, r8
 8002240:	008a      	lsls	r2, r1, #2
 8002242:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002246:	f7fd ffcb 	bl	80001e0 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4611      	mov	r1, r2
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <UART_SetConfig+0x4e4>)
 8002252:	fba3 2301 	umull	r2, r3, r3, r1
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2264      	movs	r2, #100	; 0x64
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	1acb      	subs	r3, r1, r3
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	3332      	adds	r3, #50	; 0x32
 8002264:	4a33      	ldr	r2, [pc, #204]	; (8002334 <UART_SetConfig+0x4e4>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	441c      	add	r4, r3
 8002272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002276:	2200      	movs	r2, #0
 8002278:	673b      	str	r3, [r7, #112]	; 0x70
 800227a:	677a      	str	r2, [r7, #116]	; 0x74
 800227c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002280:	4642      	mov	r2, r8
 8002282:	464b      	mov	r3, r9
 8002284:	1891      	adds	r1, r2, r2
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	415b      	adcs	r3, r3
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002290:	4641      	mov	r1, r8
 8002292:	1851      	adds	r1, r2, r1
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	4649      	mov	r1, r9
 8002298:	414b      	adcs	r3, r1
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022a8:	4659      	mov	r1, fp
 80022aa:	00cb      	lsls	r3, r1, #3
 80022ac:	4651      	mov	r1, sl
 80022ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022b2:	4651      	mov	r1, sl
 80022b4:	00ca      	lsls	r2, r1, #3
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	4642      	mov	r2, r8
 80022be:	189b      	adds	r3, r3, r2
 80022c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80022c2:	464b      	mov	r3, r9
 80022c4:	460a      	mov	r2, r1
 80022c6:	eb42 0303 	adc.w	r3, r2, r3
 80022ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	663b      	str	r3, [r7, #96]	; 0x60
 80022d6:	667a      	str	r2, [r7, #100]	; 0x64
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022e4:	4649      	mov	r1, r9
 80022e6:	008b      	lsls	r3, r1, #2
 80022e8:	4641      	mov	r1, r8
 80022ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ee:	4641      	mov	r1, r8
 80022f0:	008a      	lsls	r2, r1, #2
 80022f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022f6:	f7fd ff73 	bl	80001e0 <__aeabi_uldivmod>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <UART_SetConfig+0x4e4>)
 8002300:	fba3 1302 	umull	r1, r3, r3, r2
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	2164      	movs	r1, #100	; 0x64
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	3332      	adds	r3, #50	; 0x32
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <UART_SetConfig+0x4e4>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4422      	add	r2, r4
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800232e:	46bd      	mov	sp, r7
 8002330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002334:	51eb851f 	.word	0x51eb851f

08002338 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SysTick_Handler+0x1c>)
 800233e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002340:	f001 fbf2 	bl	8003b28 <xTaskGetSchedulerState>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800234a:	f002 f9dd 	bl	8004708 <xPortSysTickHandler>
  }
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <vApplicationGetIdleTaskMemory+0x2c>)
 8002368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <vApplicationGetIdleTaskMemory+0x30>)
 800236e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000124 	.word	0x20000124
 8002388:	200001cc 	.word	0x200001cc

0800238c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800239c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <vApplicationGetTimerTaskMemory+0x30>)
 80023a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200003cc 	.word	0x200003cc
 80023bc:	20000474 	.word	0x20000474

080023c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0208 	add.w	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 0208 	add.w	r2, r3, #8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0208 	add.w	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d103      	bne.n	8002482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e00c      	b.n	800249c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3308      	adds	r3, #8
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e002      	b.n	8002490 <vListInsert+0x2e>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	429a      	cmp	r2, r3
 800249a:	d2f6      	bcs.n	800248a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6892      	ldr	r2, [r2, #8]
 80024ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6852      	ldr	r2, [r2, #4]
 80024f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d103      	bne.n	8002508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002552:	f002 f847 	bl	80045e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	441a      	add	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	3b01      	subs	r3, #1
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	441a      	add	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d114      	bne.n	80025d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01a      	beq.n	80025e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3310      	adds	r3, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f8f5 	bl	80037a4 <xTaskRemoveFromEventList>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <xQueueGenericReset+0xcc>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	e009      	b.n	80025e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3310      	adds	r3, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fef2 	bl	80023c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3324      	adds	r3, #36	; 0x24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff feed 	bl	80023c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025e6:	f002 f82d 	bl	8004644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	; 0x38
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800261e:	bf00      	nop
 8002620:	e7fe      	b.n	8002620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <xQueueGenericCreateStatic+0x52>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <xQueueGenericCreateStatic+0x56>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueGenericCreateStatic+0x58>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	623b      	str	r3, [r7, #32]
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <xQueueGenericCreateStatic+0x7e>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <xQueueGenericCreateStatic+0x82>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <xQueueGenericCreateStatic+0x84>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	61fb      	str	r3, [r7, #28]
}
 8002692:	bf00      	nop
 8002694:	e7fe      	b.n	8002694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002696:	2350      	movs	r3, #80	; 0x50
 8002698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b50      	cmp	r3, #80	; 0x50
 800269e:	d00a      	beq.n	80026b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61bb      	str	r3, [r7, #24]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f805 	bl	80026e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e002      	b.n	800270a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002716:	2101      	movs	r1, #1
 8002718:	69b8      	ldr	r0, [r7, #24]
 800271a:	f7ff ff05 	bl	8002528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueGenericSend+0x32>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <xQueueGenericSend+0x40>
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <xQueueGenericSend+0x44>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <xQueueGenericSend+0x46>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <xQueueGenericSend+0x60>
	__asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x6e>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <xQueueGenericSend+0x72>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xQueueGenericSend+0x74>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericSend+0x8e>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	623b      	str	r3, [r7, #32]
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027be:	f001 f9b3 	bl	8003b28 <xTaskGetSchedulerState>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <xQueueGenericSend+0x9e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <xQueueGenericSend+0xa2>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericSend+0xa4>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericSend+0xbe>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	61fb      	str	r3, [r7, #28]
}
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80027ee:	f001 fef9 	bl	80045e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <xQueueGenericSend+0xd4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d129      	bne.n	8002858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280a:	f000 fa0b 	bl	8002c24 <prvCopyDataToQueue>
 800280e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3324      	adds	r3, #36	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f000 ffc1 	bl	80037a4 <xTaskRemoveFromEventList>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <xQueueGenericSend+0x1f8>)
 800282a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	e00a      	b.n	8002850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002840:	4b39      	ldr	r3, [pc, #228]	; (8002928 <xQueueGenericSend+0x1f8>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002850:	f001 fef8 	bl	8004644 <vPortExitCritical>
				return pdPASS;
 8002854:	2301      	movs	r3, #1
 8002856:	e063      	b.n	8002920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800285e:	f001 fef1 	bl	8004644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002862:	2300      	movs	r3, #0
 8002864:	e05c      	b.n	8002920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fffb 	bl	800386c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002876:	2301      	movs	r3, #1
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800287a:	f001 fee3 	bl	8004644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800287e:	f000 fd67 	bl	8003350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002882:	f001 feaf 	bl	80045e4 <vPortEnterCritical>
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <xQueueGenericSend+0x16c>
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSend+0x182>
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b2:	f001 fec7 	bl	8004644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028b6:	1d3a      	adds	r2, r7, #4
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 ffea 	bl	8003898 <xTaskCheckForTimeOut>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d124      	bne.n	8002914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028cc:	f000 faa2 	bl	8002e14 <prvIsQueueFull>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d018      	beq.n	8002908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	3310      	adds	r3, #16
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 ff10 	bl	8003704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e6:	f000 fa2d 	bl	8002d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028ea:	f000 fd3f 	bl	800336c <xTaskResumeAll>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f47f af7c 	bne.w	80027ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <xQueueGenericSend+0x1f8>)
 80028f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	e772      	b.n	80027ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290a:	f000 fa1b 	bl	8002d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800290e:	f000 fd2d 	bl	800336c <xTaskResumeAll>
 8002912:	e76c      	b.n	80027ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002916:	f000 fa15 	bl	8002d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800291a:	f000 fd27 	bl	800336c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800291e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002920:	4618      	mov	r0, r3
 8002922:	3738      	adds	r7, #56	; 0x38
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b090      	sub	sp, #64	; 0x40
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10a      	bne.n	800295a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d103      	bne.n	8002968 <xQueueGenericSendFromISR+0x3c>
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <xQueueGenericSendFromISR+0x40>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <xQueueGenericSendFromISR+0x42>
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002984:	bf00      	nop
 8002986:	e7fe      	b.n	8002986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d103      	bne.n	8002996 <xQueueGenericSendFromISR+0x6a>
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <xQueueGenericSendFromISR+0x6e>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <xQueueGenericSendFromISR+0x70>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	623b      	str	r3, [r7, #32]
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029b6:	f001 fef7 	bl	80047a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029ba:	f3ef 8211 	mrs	r2, BASEPRI
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	61fa      	str	r2, [r7, #28]
 80029d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <xQueueGenericSendFromISR+0xbc>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d12f      	bne.n	8002a48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029fe:	f000 f911 	bl	8002c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d112      	bne.n	8002a32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d016      	beq.n	8002a42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fec3 	bl	80037a4 <xTaskRemoveFromEventList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e007      	b.n	8002a42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	b25a      	sxtb	r2, r3
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a42:	2301      	movs	r3, #1
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002a46:	e001      	b.n	8002a4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3740      	adds	r7, #64	; 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <xQueueReceive+0x30>
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	623b      	str	r3, [r7, #32]
}
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <xQueueReceive+0x3e>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <xQueueReceive+0x42>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueReceive+0x44>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <xQueueReceive+0x5e>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	61fb      	str	r3, [r7, #28]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac2:	f001 f831 	bl	8003b28 <xTaskGetSchedulerState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <xQueueReceive+0x6e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <xQueueReceive+0x72>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueReceive+0x74>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueReceive+0x8e>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	61bb      	str	r3, [r7, #24]
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af2:	f001 fd77 	bl	80045e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01f      	beq.n	8002b42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b06:	f000 f8f7 	bl	8002cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	3310      	adds	r3, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fe40 	bl	80037a4 <xTaskRemoveFromEventList>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <xQueueReceive+0x1bc>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b3a:	f001 fd83 	bl	8004644 <vPortExitCritical>
				return pdPASS;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e069      	b.n	8002c16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b48:	f001 fd7c 	bl	8004644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e062      	b.n	8002c16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b56:	f107 0310 	add.w	r3, r7, #16
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fe86 	bl	800386c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b64:	f001 fd6e 	bl	8004644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b68:	f000 fbf2 	bl	8003350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b6c:	f001 fd3a 	bl	80045e4 <vPortEnterCritical>
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d103      	bne.n	8002b86 <xQueueReceive+0x122>
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d103      	bne.n	8002b9c <xQueueReceive+0x138>
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b9c:	f001 fd52 	bl	8004644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ba0:	1d3a      	adds	r2, r7, #4
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fe75 	bl	8003898 <xTaskCheckForTimeOut>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d123      	bne.n	8002bfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb6:	f000 f917 	bl	8002de8 <prvIsQueueEmpty>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d017      	beq.n	8002bf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fd9b 	bl	8003704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd0:	f000 f8b8 	bl	8002d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bd4:	f000 fbca 	bl	800336c <xTaskResumeAll>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d189      	bne.n	8002af2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <xQueueReceive+0x1bc>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	e780      	b.n	8002af2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf2:	f000 f8a7 	bl	8002d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bf6:	f000 fbb9 	bl	800336c <xTaskResumeAll>
 8002bfa:	e77a      	b.n	8002af2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bfe:	f000 f8a1 	bl	8002d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c02:	f000 fbb3 	bl	800336c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c08:	f000 f8ee 	bl	8002de8 <prvIsQueueEmpty>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f43f af6f 	beq.w	8002af2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3730      	adds	r7, #48	; 0x30
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14d      	bne.n	8002ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 ff88 	bl	8003b64 <xTaskPriorityDisinherit>
 8002c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	e043      	b.n	8002ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6858      	ldr	r0, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	f002 f848 	bl	8004d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d32b      	bcc.n	8002ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	e026      	b.n	8002ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68d8      	ldr	r0, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68b9      	ldr	r1, [r7, #8]
 8002ca4:	f002 f82e 	bl	8004d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	425b      	negs	r3, r3
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	425b      	negs	r3, r3
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d105      	bne.n	8002ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cee:	697b      	ldr	r3, [r7, #20]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d018      	beq.n	8002d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d303      	bcc.n	8002d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	461a      	mov	r2, r3
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f001 ffe4 	bl	8004d04 <memcpy>
	}
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d4c:	f001 fc4a 	bl	80045e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d58:	e011      	b.n	8002d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3324      	adds	r3, #36	; 0x24
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd1c 	bl	80037a4 <xTaskRemoveFromEventList>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d72:	f000 fdf3 	bl	800395c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	dce9      	bgt.n	8002d5a <prvUnlockQueue+0x16>
 8002d86:	e000      	b.n	8002d8a <prvUnlockQueue+0x46>
					break;
 8002d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d92:	f001 fc57 	bl	8004644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d96:	f001 fc25 	bl	80045e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da2:	e011      	b.n	8002dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3310      	adds	r3, #16
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fcf7 	bl	80037a4 <xTaskRemoveFromEventList>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dbc:	f000 fdce 	bl	800395c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dc0:	7bbb      	ldrb	r3, [r7, #14]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	dce9      	bgt.n	8002da4 <prvUnlockQueue+0x60>
 8002dd0:	e000      	b.n	8002dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ddc:	f001 fc32 	bl	8004644 <vPortExitCritical>
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002df0:	f001 fbf8 	bl	80045e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e001      	b.n	8002e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e06:	f001 fc1d 	bl	8004644 <vPortExitCritical>

	return xReturn;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e1c:	f001 fbe2 	bl	80045e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d102      	bne.n	8002e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e001      	b.n	8002e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e36:	f001 fc05 	bl	8004644 <vPortExitCritical>

	return xReturn;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e014      	b.n	8002e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e54:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <vQueueAddToRegistry+0x50>)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <vQueueAddToRegistry+0x50>)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <vQueueAddToRegistry+0x50>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e76:	e006      	b.n	8002e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d9e7      	bls.n	8002e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000874 	.word	0x20000874

08002e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ea8:	f001 fb9c 	bl	80045e4 <vPortEnterCritical>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d103      	bne.n	8002ec2 <vQueueWaitForMessageRestricted+0x2a>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d103      	bne.n	8002ed8 <vQueueWaitForMessageRestricted+0x40>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed8:	f001 fbb4 	bl	8004644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fc2d 	bl	800374c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff26 	bl	8002d44 <prvUnlockQueue>
	}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08e      	sub	sp, #56	; 0x38
 8002f04:	af04      	add	r7, sp, #16
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	61fb      	str	r3, [r7, #28]
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f46:	23a8      	movs	r3, #168	; 0xa8
 8002f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2ba8      	cmp	r3, #168	; 0xa8
 8002f4e:	d00a      	beq.n	8002f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	61bb      	str	r3, [r7, #24]
}
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01e      	beq.n	8002fac <xTaskCreateStatic+0xac>
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f86:	2300      	movs	r3, #0
 8002f88:	9303      	str	r3, [sp, #12]
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f850 	bl	8003044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa6:	f000 f8f3 	bl	8003190 <prvAddNewTaskToReadyList>
 8002faa:	e001      	b.n	8002fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fb0:	697b      	ldr	r3, [r7, #20]
	}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08c      	sub	sp, #48	; 0x30
 8002fbe:	af04      	add	r7, sp, #16
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fc2a 	bl	8004828 <pvPortMalloc>
 8002fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fdc:	20a8      	movs	r0, #168	; 0xa8
 8002fde:	f001 fc23 	bl	8004828 <pvPortMalloc>
 8002fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff0:	e005      	b.n	8002ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f001 fce4 	bl	80049c0 <vPortFree>
 8002ff8:	e001      	b.n	8002ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	2300      	movs	r3, #0
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	9302      	str	r3, [sp, #8]
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f80e 	bl	8003044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003028:	69f8      	ldr	r0, [r7, #28]
 800302a:	f000 f8b1 	bl	8003190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e002      	b.n	800303a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800303a:	69bb      	ldr	r3, [r7, #24]
	}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	461a      	mov	r2, r3
 800305c:	21a5      	movs	r1, #165	; 0xa5
 800305e:	f001 fdcd 	bl	8004bfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800306c:	3b01      	subs	r3, #1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f023 0307 	bic.w	r3, r3, #7
 800307a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	617b      	str	r3, [r7, #20]
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01f      	beq.n	80030e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e012      	b.n	80030ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	4413      	add	r3, r2
 80030ae:	7819      	ldrb	r1, [r3, #0]
 80030b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	4413      	add	r3, r2
 80030b6:	3334      	adds	r3, #52	; 0x34
 80030b8:	460a      	mov	r2, r1
 80030ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	3301      	adds	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d9e9      	bls.n	80030a8 <prvInitialiseNewTask+0x64>
 80030d4:	e000      	b.n	80030d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80030d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e0:	e003      	b.n	80030ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	2b37      	cmp	r3, #55	; 0x37
 80030ee:	d901      	bls.n	80030f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030f0:	2337      	movs	r3, #55	; 0x37
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2200      	movs	r2, #0
 8003104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	3304      	adds	r3, #4
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f978 	bl	8002400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	3318      	adds	r3, #24
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f973 	bl	8002400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	2200      	movs	r2, #0
 800313c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	3354      	adds	r3, #84	; 0x54
 8003144:	224c      	movs	r2, #76	; 0x4c
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f001 fd57 	bl	8004bfc <memset>
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <prvInitialiseNewTask+0x140>)
 8003152:	659a      	str	r2, [r3, #88]	; 0x58
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <prvInitialiseNewTask+0x144>)
 8003158:	65da      	str	r2, [r3, #92]	; 0x5c
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <prvInitialiseNewTask+0x148>)
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	69b8      	ldr	r0, [r7, #24]
 8003166:	f001 f90d 	bl	8004384 <pxPortInitialiseStack>
 800316a:	4602      	mov	r2, r0
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317c:	bf00      	nop
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20004b08 	.word	0x20004b08
 8003188:	20004b70 	.word	0x20004b70
 800318c:	20004bd8 	.word	0x20004bd8

08003190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003198:	f001 fa24 	bl	80045e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <prvAddNewTaskToReadyList+0xc4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <prvAddNewTaskToReadyList+0xc4>)
 80031a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031a6:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <prvAddNewTaskToReadyList+0xc8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031ae:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <prvAddNewTaskToReadyList+0xc8>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <prvAddNewTaskToReadyList+0xc4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d110      	bne.n	80031de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031bc:	f000 fbf2 	bl	80039a4 <prvInitialiseTaskLists>
 80031c0:	e00d      	b.n	80031de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <prvAddNewTaskToReadyList+0xcc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <prvAddNewTaskToReadyList+0xc8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d802      	bhi.n	80031de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <prvAddNewTaskToReadyList+0xc8>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <prvAddNewTaskToReadyList+0xd0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <prvAddNewTaskToReadyList+0xd0>)
 80031e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <prvAddNewTaskToReadyList+0xd0>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <prvAddNewTaskToReadyList+0xd4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d903      	bls.n	8003204 <prvAddNewTaskToReadyList+0x74>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a18      	ldr	r2, [pc, #96]	; (8003264 <prvAddNewTaskToReadyList+0xd4>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4a15      	ldr	r2, [pc, #84]	; (8003268 <prvAddNewTaskToReadyList+0xd8>)
 8003212:	441a      	add	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7ff f8fd 	bl	800241a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003220:	f001 fa10 	bl	8004644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <prvAddNewTaskToReadyList+0xcc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <prvAddNewTaskToReadyList+0xc8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d207      	bcs.n	800324a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <prvAddNewTaskToReadyList+0xdc>)
 800323c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000d88 	.word	0x20000d88
 8003258:	200008b4 	.word	0x200008b4
 800325c:	20000d94 	.word	0x20000d94
 8003260:	20000da4 	.word	0x20000da4
 8003264:	20000d90 	.word	0x20000d90
 8003268:	200008b8 	.word	0x200008b8
 800326c:	e000ed04 	.word	0xe000ed04

08003270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800327e:	463a      	mov	r2, r7
 8003280:	1d39      	adds	r1, r7, #4
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f866 	bl	8002358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	9202      	str	r2, [sp, #8]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	460a      	mov	r2, r1
 800329e:	4924      	ldr	r1, [pc, #144]	; (8003330 <vTaskStartScheduler+0xc0>)
 80032a0:	4824      	ldr	r0, [pc, #144]	; (8003334 <vTaskStartScheduler+0xc4>)
 80032a2:	f7ff fe2d 	bl	8002f00 <xTaskCreateStatic>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <vTaskStartScheduler+0xc8>)
 80032aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <vTaskStartScheduler+0xc8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e001      	b.n	80032be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032c4:	f000 fd10 	bl	8003ce8 <xTimerCreateTimerTask>
 80032c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d11b      	bne.n	8003308 <vTaskStartScheduler+0x98>
	__asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	613b      	str	r3, [r7, #16]
}
 80032e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <vTaskStartScheduler+0xcc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3354      	adds	r3, #84	; 0x54
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <vTaskStartScheduler+0xd0>)
 80032ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <vTaskStartScheduler+0xd4>)
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <vTaskStartScheduler+0xd8>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <vTaskStartScheduler+0xdc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003302:	f001 f8cd 	bl	80044a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003306:	e00e      	b.n	8003326 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d10a      	bne.n	8003326 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
}
 8003322:	bf00      	nop
 8003324:	e7fe      	b.n	8003324 <vTaskStartScheduler+0xb4>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	08004e2c 	.word	0x08004e2c
 8003334:	08003975 	.word	0x08003975
 8003338:	20000dac 	.word	0x20000dac
 800333c:	200008b4 	.word	0x200008b4
 8003340:	2000005c 	.word	0x2000005c
 8003344:	20000da8 	.word	0x20000da8
 8003348:	20000d94 	.word	0x20000d94
 800334c:	20000d8c 	.word	0x20000d8c

08003350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <vTaskSuspendAll+0x18>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a03      	ldr	r2, [pc, #12]	; (8003368 <vTaskSuspendAll+0x18>)
 800335c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	20000db0 	.word	0x20000db0

0800336c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800337a:	4b42      	ldr	r3, [pc, #264]	; (8003484 <xTaskResumeAll+0x118>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <xTaskResumeAll+0x2c>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	603b      	str	r3, [r7, #0]
}
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003398:	f001 f924 	bl	80045e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <xTaskResumeAll+0x118>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	4a38      	ldr	r2, [pc, #224]	; (8003484 <xTaskResumeAll+0x118>)
 80033a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <xTaskResumeAll+0x118>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d162      	bne.n	8003474 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033ae:	4b36      	ldr	r3, [pc, #216]	; (8003488 <xTaskResumeAll+0x11c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d05e      	beq.n	8003474 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033b6:	e02f      	b.n	8003418 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <xTaskResumeAll+0x120>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3318      	adds	r3, #24
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff f885 	bl	80024d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f880 	bl	80024d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <xTaskResumeAll+0x124>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d903      	bls.n	80033e8 <xTaskResumeAll+0x7c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <xTaskResumeAll+0x124>)
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <xTaskResumeAll+0x128>)
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f7ff f80b 	bl	800241a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	4b23      	ldr	r3, [pc, #140]	; (8003498 <xTaskResumeAll+0x12c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <xTaskResumeAll+0x130>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <xTaskResumeAll+0x120>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1cb      	bne.n	80033b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003426:	f000 fb5f 	bl	8003ae8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <xTaskResumeAll+0x134>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003436:	f000 f847 	bl	80034c8 <xTaskIncrementTick>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <xTaskResumeAll+0x130>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3b01      	subs	r3, #1
 800344a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f1      	bne.n	8003436 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <xTaskResumeAll+0x134>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <xTaskResumeAll+0x130>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <xTaskResumeAll+0x138>)
 8003466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003474:	f001 f8e6 	bl	8004644 <vPortExitCritical>

	return xAlreadyYielded;
 8003478:	68bb      	ldr	r3, [r7, #8]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000db0 	.word	0x20000db0
 8003488:	20000d88 	.word	0x20000d88
 800348c:	20000d48 	.word	0x20000d48
 8003490:	20000d90 	.word	0x20000d90
 8003494:	200008b8 	.word	0x200008b8
 8003498:	200008b4 	.word	0x200008b4
 800349c:	20000d9c 	.word	0x20000d9c
 80034a0:	20000d98 	.word	0x20000d98
 80034a4:	e000ed04 	.word	0xe000ed04

080034a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <xTaskGetTickCount+0x1c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000d8c 	.word	0x20000d8c

080034c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d2:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <xTaskIncrementTick+0x148>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 808f 	bne.w	80035fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034dc:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <xTaskIncrementTick+0x14c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <xTaskIncrementTick+0x14c>)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d120      	bne.n	8003532 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034f0:	4b49      	ldr	r3, [pc, #292]	; (8003618 <xTaskIncrementTick+0x150>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <xTaskIncrementTick+0x48>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	603b      	str	r3, [r7, #0]
}
 800350c:	bf00      	nop
 800350e:	e7fe      	b.n	800350e <xTaskIncrementTick+0x46>
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <xTaskIncrementTick+0x150>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <xTaskIncrementTick+0x154>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <xTaskIncrementTick+0x150>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <xTaskIncrementTick+0x154>)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <xTaskIncrementTick+0x158>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <xTaskIncrementTick+0x158>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	f000 fadb 	bl	8003ae8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003532:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <xTaskIncrementTick+0x15c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d349      	bcc.n	80035d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800353c:	4b36      	ldr	r3, [pc, #216]	; (8003618 <xTaskIncrementTick+0x150>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <xTaskIncrementTick+0x15c>)
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	601a      	str	r2, [r3, #0]
					break;
 800354e:	e03f      	b.n	80035d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003550:	4b31      	ldr	r3, [pc, #196]	; (8003618 <xTaskIncrementTick+0x150>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d203      	bcs.n	8003570 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003568:	4a2e      	ldr	r2, [pc, #184]	; (8003624 <xTaskIncrementTick+0x15c>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800356e:	e02f      	b.n	80035d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe ffad 	bl	80024d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3318      	adds	r3, #24
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe ffa4 	bl	80024d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <xTaskIncrementTick+0x160>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d903      	bls.n	80035a0 <xTaskIncrementTick+0xd8>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	4a22      	ldr	r2, [pc, #136]	; (8003628 <xTaskIncrementTick+0x160>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4a1f      	ldr	r2, [pc, #124]	; (800362c <xTaskIncrementTick+0x164>)
 80035ae:	441a      	add	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7fe ff2f 	bl	800241a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <xTaskIncrementTick+0x168>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3b8      	bcc.n	800353c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ce:	e7b5      	b.n	800353c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <xTaskIncrementTick+0x168>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4915      	ldr	r1, [pc, #84]	; (800362c <xTaskIncrementTick+0x164>)
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d901      	bls.n	80035ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <xTaskIncrementTick+0x16c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e004      	b.n	8003604 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <xTaskIncrementTick+0x170>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <xTaskIncrementTick+0x170>)
 8003602:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003604:	697b      	ldr	r3, [r7, #20]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000db0 	.word	0x20000db0
 8003614:	20000d8c 	.word	0x20000d8c
 8003618:	20000d40 	.word	0x20000d40
 800361c:	20000d44 	.word	0x20000d44
 8003620:	20000da0 	.word	0x20000da0
 8003624:	20000da8 	.word	0x20000da8
 8003628:	20000d90 	.word	0x20000d90
 800362c:	200008b8 	.word	0x200008b8
 8003630:	200008b4 	.word	0x200008b4
 8003634:	20000d9c 	.word	0x20000d9c
 8003638:	20000d98 	.word	0x20000d98

0800363c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003642:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <vTaskSwitchContext+0xb0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <vTaskSwitchContext+0xb4>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003650:	e046      	b.n	80036e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <vTaskSwitchContext+0xb4>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003658:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <vTaskSwitchContext+0xb8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e010      	b.n	8003682 <vTaskSwitchContext+0x46>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <vTaskSwitchContext+0x40>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	607b      	str	r3, [r7, #4]
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <vTaskSwitchContext+0x3e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	491d      	ldr	r1, [pc, #116]	; (80036f8 <vTaskSwitchContext+0xbc>)
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0e4      	beq.n	8003660 <vTaskSwitchContext+0x24>
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <vTaskSwitchContext+0xbc>)
 80036a2:	4413      	add	r3, r2
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	605a      	str	r2, [r3, #4]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3308      	adds	r3, #8
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d104      	bne.n	80036c6 <vTaskSwitchContext+0x8a>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <vTaskSwitchContext+0xc0>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <vTaskSwitchContext+0xb8>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <vTaskSwitchContext+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3354      	adds	r3, #84	; 0x54
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <vTaskSwitchContext+0xc4>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20000db0 	.word	0x20000db0
 80036f0:	20000d9c 	.word	0x20000d9c
 80036f4:	20000d90 	.word	0x20000d90
 80036f8:	200008b8 	.word	0x200008b8
 80036fc:	200008b4 	.word	0x200008b4
 8003700:	2000005c 	.word	0x2000005c

08003704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	60fb      	str	r3, [r7, #12]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <vTaskPlaceOnEventList+0x44>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3318      	adds	r3, #24
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fe95 	bl	8002462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003738:	2101      	movs	r1, #1
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f000 fa80 	bl	8003c40 <prvAddCurrentTaskToDelayedList>
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200008b4 	.word	0x200008b4

0800374c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	617b      	str	r3, [r7, #20]
}
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3318      	adds	r3, #24
 800377a:	4619      	mov	r1, r3
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fe fe4c 	bl	800241a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	68b8      	ldr	r0, [r7, #8]
 8003792:	f000 fa55 	bl	8003c40 <prvAddCurrentTaskToDelayedList>
	}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200008b4 	.word	0x200008b4

080037a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	60fb      	str	r3, [r7, #12]
}
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fe7d 	bl	80024d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <xTaskRemoveFromEventList+0xb0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11d      	bne.n	800381e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fe74 	bl	80024d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <xTaskRemoveFromEventList+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d903      	bls.n	8003800 <xTaskRemoveFromEventList+0x5c>
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	4a16      	ldr	r2, [pc, #88]	; (8003858 <xTaskRemoveFromEventList+0xb4>)
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4a13      	ldr	r2, [pc, #76]	; (800385c <xTaskRemoveFromEventList+0xb8>)
 800380e:	441a      	add	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7fe fdff 	bl	800241a <vListInsertEnd>
 800381c:	e005      	b.n	800382a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3318      	adds	r3, #24
 8003822:	4619      	mov	r1, r3
 8003824:	480e      	ldr	r0, [pc, #56]	; (8003860 <xTaskRemoveFromEventList+0xbc>)
 8003826:	f7fe fdf8 	bl	800241a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <xTaskRemoveFromEventList+0xc0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	429a      	cmp	r2, r3
 8003836:	d905      	bls.n	8003844 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <xTaskRemoveFromEventList+0xc4>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e001      	b.n	8003848 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003848:	697b      	ldr	r3, [r7, #20]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000db0 	.word	0x20000db0
 8003858:	20000d90 	.word	0x20000d90
 800385c:	200008b8 	.word	0x200008b8
 8003860:	20000d48 	.word	0x20000d48
 8003864:	200008b4 	.word	0x200008b4
 8003868:	20000d9c 	.word	0x20000d9c

0800386c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <vTaskInternalSetTimeOutState+0x24>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <vTaskInternalSetTimeOutState+0x28>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	605a      	str	r2, [r3, #4]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20000da0 	.word	0x20000da0
 8003894:	20000d8c 	.word	0x20000d8c

08003898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	613b      	str	r3, [r7, #16]
}
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	60fb      	str	r3, [r7, #12]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038da:	f000 fe83 	bl	80045e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <xTaskCheckForTimeOut+0xbc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d102      	bne.n	80038fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e023      	b.n	8003946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <xTaskCheckForTimeOut+0xc0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d007      	beq.n	800391a <xTaskCheckForTimeOut+0x82>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e015      	b.n	8003946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	d20b      	bcs.n	800393c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	1ad2      	subs	r2, r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff9b 	bl	800386c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e004      	b.n	8003946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003942:	2301      	movs	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003946:	f000 fe7d 	bl	8004644 <vPortExitCritical>

	return xReturn;
 800394a:	69fb      	ldr	r3, [r7, #28]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000d8c 	.word	0x20000d8c
 8003958:	20000da0 	.word	0x20000da0

0800395c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <vTaskMissedYield+0x14>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	20000d9c 	.word	0x20000d9c

08003974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800397c:	f000 f852 	bl	8003a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <prvIdleTask+0x28>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d9f9      	bls.n	800397c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <prvIdleTask+0x2c>)
 800398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003998:	e7f0      	b.n	800397c <prvIdleTask+0x8>
 800399a:	bf00      	nop
 800399c:	200008b8 	.word	0x200008b8
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e00c      	b.n	80039ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <prvInitialiseTaskLists+0x60>)
 80039bc:	4413      	add	r3, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fcfe 	bl	80023c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3301      	adds	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b37      	cmp	r3, #55	; 0x37
 80039ce:	d9ef      	bls.n	80039b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039d0:	480d      	ldr	r0, [pc, #52]	; (8003a08 <prvInitialiseTaskLists+0x64>)
 80039d2:	f7fe fcf5 	bl	80023c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039d6:	480d      	ldr	r0, [pc, #52]	; (8003a0c <prvInitialiseTaskLists+0x68>)
 80039d8:	f7fe fcf2 	bl	80023c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <prvInitialiseTaskLists+0x6c>)
 80039de:	f7fe fcef 	bl	80023c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039e2:	480c      	ldr	r0, [pc, #48]	; (8003a14 <prvInitialiseTaskLists+0x70>)
 80039e4:	f7fe fcec 	bl	80023c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039e8:	480b      	ldr	r0, [pc, #44]	; (8003a18 <prvInitialiseTaskLists+0x74>)
 80039ea:	f7fe fce9 	bl	80023c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <prvInitialiseTaskLists+0x78>)
 80039f0:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <prvInitialiseTaskLists+0x64>)
 80039f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <prvInitialiseTaskLists+0x7c>)
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <prvInitialiseTaskLists+0x68>)
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200008b8 	.word	0x200008b8
 8003a08:	20000d18 	.word	0x20000d18
 8003a0c:	20000d2c 	.word	0x20000d2c
 8003a10:	20000d48 	.word	0x20000d48
 8003a14:	20000d5c 	.word	0x20000d5c
 8003a18:	20000d74 	.word	0x20000d74
 8003a1c:	20000d40 	.word	0x20000d40
 8003a20:	20000d44 	.word	0x20000d44

08003a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2a:	e019      	b.n	8003a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a2c:	f000 fdda 	bl	80045e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <prvCheckTasksWaitingTermination+0x50>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fd49 	bl	80024d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <prvCheckTasksWaitingTermination+0x54>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <prvCheckTasksWaitingTermination+0x54>)
 8003a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvCheckTasksWaitingTermination+0x58>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <prvCheckTasksWaitingTermination+0x58>)
 8003a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a56:	f000 fdf5 	bl	8004644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f810 	bl	8003a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <prvCheckTasksWaitingTermination+0x58>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e1      	bne.n	8003a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000d5c 	.word	0x20000d5c
 8003a78:	20000d88 	.word	0x20000d88
 8003a7c:	20000d70 	.word	0x20000d70

08003a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3354      	adds	r3, #84	; 0x54
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 f8bd 	bl	8004c0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 ff8d 	bl	80049c0 <vPortFree>
				vPortFree( pxTCB );
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 ff8a 	bl	80049c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003aac:	e018      	b.n	8003ae0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d103      	bne.n	8003ac0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 ff81 	bl	80049c0 <vPortFree>
	}
 8003abe:	e00f      	b.n	8003ae0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d00a      	beq.n	8003ae0 <prvDeleteTCB+0x60>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60fb      	str	r3, [r7, #12]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <prvDeleteTCB+0x5e>
	}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aee:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <prvResetNextTaskUnblockTime+0x38>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <prvResetNextTaskUnblockTime+0x3c>)
 8003afa:	f04f 32ff 	mov.w	r2, #4294967295
 8003afe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b00:	e008      	b.n	8003b14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <prvResetNextTaskUnblockTime+0x38>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <prvResetNextTaskUnblockTime+0x3c>)
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000d40 	.word	0x20000d40
 8003b24:	20000da8 	.word	0x20000da8

08003b28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <xTaskGetSchedulerState+0x34>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b36:	2301      	movs	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	e008      	b.n	8003b4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <xTaskGetSchedulerState+0x38>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b44:	2302      	movs	r3, #2
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	e001      	b.n	8003b4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b4e:	687b      	ldr	r3, [r7, #4]
	}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000d94 	.word	0x20000d94
 8003b60:	20000db0 	.word	0x20000db0

08003b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d056      	beq.n	8003c28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b7a:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <xTaskPriorityDisinherit+0xd0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d00a      	beq.n	8003b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60fb      	str	r3, [r7, #12]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	60bb      	str	r3, [r7, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d02c      	beq.n	8003c28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d128      	bne.n	8003c28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fc7a 	bl	80024d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <xTaskPriorityDisinherit+0xd4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d903      	bls.n	8003c08 <xTaskPriorityDisinherit+0xa4>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <xTaskPriorityDisinherit+0xd4>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <xTaskPriorityDisinherit+0xd8>)
 8003c16:	441a      	add	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7fe fbfb 	bl	800241a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c28:	697b      	ldr	r3, [r7, #20]
	}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200008b4 	.word	0x200008b4
 8003c38:	20000d90 	.word	0x20000d90
 8003c3c:	200008b8 	.word	0x200008b8

08003c40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fc3c 	bl	80024d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d10a      	bne.n	8003c7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4819      	ldr	r0, [pc, #100]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003c74:	f7fe fbd1 	bl	800241a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c78:	e026      	b.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d209      	bcs.n	8003ca6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7fe fbdf 	bl	8002462 <vListInsert>
}
 8003ca4:	e010      	b.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f7fe fbd5 	bl	8002462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d202      	bcs.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000d8c 	.word	0x20000d8c
 8003cd4:	200008b4 	.word	0x200008b4
 8003cd8:	20000d74 	.word	0x20000d74
 8003cdc:	20000d44 	.word	0x20000d44
 8003ce0:	20000d40 	.word	0x20000d40
 8003ce4:	20000da8 	.word	0x20000da8

08003ce8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cf2:	f000 fb07 	bl	8004304 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <xTimerCreateTimerTask+0x80>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d021      	beq.n	8003d42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d06:	1d3a      	adds	r2, r7, #4
 8003d08:	f107 0108 	add.w	r1, r7, #8
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fb3b 	bl	800238c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	9202      	str	r2, [sp, #8]
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	2302      	movs	r3, #2
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	460a      	mov	r2, r1
 8003d28:	4910      	ldr	r1, [pc, #64]	; (8003d6c <xTimerCreateTimerTask+0x84>)
 8003d2a:	4811      	ldr	r0, [pc, #68]	; (8003d70 <xTimerCreateTimerTask+0x88>)
 8003d2c:	f7ff f8e8 	bl	8002f00 <xTaskCreateStatic>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <xTimerCreateTimerTask+0x8c>)
 8003d34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <xTimerCreateTimerTask+0x8c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	613b      	str	r3, [r7, #16]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d5e:	697b      	ldr	r3, [r7, #20]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000de4 	.word	0x20000de4
 8003d6c:	08004e34 	.word	0x08004e34
 8003d70:	08003ead 	.word	0x08003ead
 8003d74:	20000de8 	.word	0x20000de8

08003d78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <xTimerGenericCommand+0x98>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02a      	beq.n	8003e04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	dc18      	bgt.n	8003df2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dc0:	f7ff feb2 	bl	8003b28 <xTaskGetSchedulerState>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d109      	bne.n	8003dde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <xTimerGenericCommand+0x98>)
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	f107 0110 	add.w	r1, r7, #16
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	f7fe fcab 	bl	8002730 <xQueueGenericSend>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24
 8003ddc:	e012      	b.n	8003e04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <xTimerGenericCommand+0x98>)
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f107 0110 	add.w	r1, r7, #16
 8003de6:	2300      	movs	r3, #0
 8003de8:	2200      	movs	r2, #0
 8003dea:	f7fe fca1 	bl	8002730 <xQueueGenericSend>
 8003dee:	6278      	str	r0, [r7, #36]	; 0x24
 8003df0:	e008      	b.n	8003e04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <xTimerGenericCommand+0x98>)
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	f107 0110 	add.w	r1, r7, #16
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	f7fe fd95 	bl	800292c <xQueueGenericSendFromISR>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3728      	adds	r7, #40	; 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000de4 	.word	0x20000de4

08003e14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <prvProcessExpiredTimer+0x94>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fb51 	bl	80024d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d022      	beq.n	8003e86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	18d1      	adds	r1, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6978      	ldr	r0, [r7, #20]
 8003e4e:	f000 f8d1 	bl	8003ff4 <prvInsertTimerInActiveList>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01f      	beq.n	8003e98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	2100      	movs	r1, #0
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff88 	bl	8003d78 <xTimerGenericCommand>
 8003e68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d113      	bne.n	8003e98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	4798      	blx	r3
}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000ddc 	.word	0x20000ddc

08003eac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f857 	bl	8003f6c <prvGetNextExpireTime>
 8003ebe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f803 	bl	8003ed0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003eca:	f000 f8d5 	bl	8004078 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ece:	e7f1      	b.n	8003eb4 <prvTimerTask+0x8>

08003ed0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003eda:	f7ff fa39 	bl	8003350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ede:	f107 0308 	add.w	r3, r7, #8
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f866 	bl	8003fb4 <prvSampleTimeNow>
 8003ee8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d130      	bne.n	8003f52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <prvProcessTimerOrBlockTask+0x3c>
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d806      	bhi.n	8003f0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003efe:	f7ff fa35 	bl	800336c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff85 	bl	8003e14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f0a:	e024      	b.n	8003f56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <prvProcessTimerOrBlockTask+0x90>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <prvProcessTimerOrBlockTask+0x50>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <prvProcessTimerOrBlockTask+0x52>
 8003f20:	2300      	movs	r3, #0
 8003f22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <prvProcessTimerOrBlockTask+0x94>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fe ffb1 	bl	8002e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f36:	f7ff fa19 	bl	800336c <xTaskResumeAll>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <prvProcessTimerOrBlockTask+0x98>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
}
 8003f50:	e001      	b.n	8003f56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f52:	f7ff fa0b 	bl	800336c <xTaskResumeAll>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000de0 	.word	0x20000de0
 8003f64:	20000de4 	.word	0x20000de4
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <prvGetNextExpireTime+0x44>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <prvGetNextExpireTime+0x16>
 8003f7e:	2201      	movs	r2, #1
 8003f80:	e000      	b.n	8003f84 <prvGetNextExpireTime+0x18>
 8003f82:	2200      	movs	r2, #0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <prvGetNextExpireTime+0x44>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e001      	b.n	8003fa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000ddc 	.word	0x20000ddc

08003fb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fbc:	f7ff fa74 	bl	80034a8 <xTaskGetTickCount>
 8003fc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <prvSampleTimeNow+0x3c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d205      	bcs.n	8003fd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fcc:	f000 f936 	bl	800423c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e002      	b.n	8003fde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <prvSampleTimeNow+0x3c>)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000dec 	.word	0x20000dec

08003ff4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	429a      	cmp	r2, r3
 8004018:	d812      	bhi.n	8004040 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	429a      	cmp	r2, r3
 8004026:	d302      	bcc.n	800402e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e01b      	b.n	8004066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <prvInsertTimerInActiveList+0x7c>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fe fa12 	bl	8002462 <vListInsert>
 800403e:	e012      	b.n	8004066 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d206      	bcs.n	8004056 <prvInsertTimerInActiveList+0x62>
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e007      	b.n	8004066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <prvInsertTimerInActiveList+0x80>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7fe f9fe 	bl	8002462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004066:	697b      	ldr	r3, [r7, #20]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	20000de0 	.word	0x20000de0
 8004074:	20000ddc 	.word	0x20000ddc

08004078 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	; 0x38
 800407c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800407e:	e0ca      	b.n	8004216 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da18      	bge.n	80040b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	3304      	adds	r3, #4
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	61fb      	str	r3, [r7, #28]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	6850      	ldr	r0, [r2, #4]
 80040b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b2:	6892      	ldr	r2, [r2, #8]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f2c0 80ab 	blt.w	8004216 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe f9ff 	bl	80024d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d6:	463b      	mov	r3, r7
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff6b 	bl	8003fb4 <prvSampleTimeNow>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	f200 8096 	bhi.w	8004214 <prvProcessReceivedCommands+0x19c>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <prvProcessReceivedCommands+0x78>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004119 	.word	0x08004119
 80040fc:	0800418d 	.word	0x0800418d
 8004100:	080041a1 	.word	0x080041a1
 8004104:	080041eb 	.word	0x080041eb
 8004108:	08004119 	.word	0x08004119
 800410c:	08004119 	.word	0x08004119
 8004110:	0800418d 	.word	0x0800418d
 8004114:	080041a1 	.word	0x080041a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	b2da      	uxtb	r2, r3
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	18d1      	adds	r1, r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004138:	f7ff ff5c 	bl	8003ff4 <prvInsertTimerInActiveList>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d069      	beq.n	8004216 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004148:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05e      	beq.n	8004216 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	441a      	add	r2, r3
 8004160:	2300      	movs	r3, #0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	2100      	movs	r1, #0
 8004168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416a:	f7ff fe05 	bl	8003d78 <xTimerGenericCommand>
 800416e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d14f      	bne.n	8004216 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	61bb      	str	r3, [r7, #24]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800419e:	e03a      	b.n	8004216 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	617b      	str	r3, [r7, #20]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	18d1      	adds	r1, r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e4:	f7ff ff06 	bl	8003ff4 <prvInsertTimerInActiveList>
					break;
 80041e8:	e015      	b.n	8004216 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80041f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041fa:	f000 fbe1 	bl	80049c0 <vPortFree>
 80041fe:	e00a      	b.n	8004216 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004212:	e000      	b.n	8004216 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004214:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <prvProcessReceivedCommands+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	1d39      	adds	r1, r7, #4
 800421c:	2200      	movs	r2, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fc20 	bl	8002a64 <xQueueReceive>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	f47f af2a 	bne.w	8004080 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	3730      	adds	r7, #48	; 0x30
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000de4 	.word	0x20000de4

0800423c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004242:	e048      	b.n	80042d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe f939 	bl	80024d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d90e      	bls.n	80042a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <prvSwitchTimerLists+0xc0>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f7fe f8de 	bl	8002462 <vListInsert>
 80042a6:	e016      	b.n	80042d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042a8:	2300      	movs	r3, #0
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2300      	movs	r3, #0
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	2100      	movs	r1, #0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff fd60 	bl	8003d78 <xTimerGenericCommand>
 80042b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	603b      	str	r3, [r7, #0]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1b1      	bne.n	8004244 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <prvSwitchTimerLists+0xc4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <prvSwitchTimerLists+0xc0>)
 80042ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <prvSwitchTimerLists+0xc4>)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000ddc 	.word	0x20000ddc
 8004300:	20000de0 	.word	0x20000de0

08004304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800430a:	f000 f96b 	bl	80045e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d120      	bne.n	8004358 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004316:	4814      	ldr	r0, [pc, #80]	; (8004368 <prvCheckForValidListAndQueue+0x64>)
 8004318:	f7fe f852 	bl	80023c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800431c:	4813      	ldr	r0, [pc, #76]	; (800436c <prvCheckForValidListAndQueue+0x68>)
 800431e:	f7fe f84f 	bl	80023c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <prvCheckForValidListAndQueue+0x6c>)
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <prvCheckForValidListAndQueue+0x64>)
 8004326:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <prvCheckForValidListAndQueue+0x70>)
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <prvCheckForValidListAndQueue+0x68>)
 800432c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800432e:	2300      	movs	r3, #0
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <prvCheckForValidListAndQueue+0x74>)
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <prvCheckForValidListAndQueue+0x78>)
 8004336:	2110      	movs	r1, #16
 8004338:	200a      	movs	r0, #10
 800433a:	f7fe f95d 	bl	80025f8 <xQueueGenericCreateStatic>
 800433e:	4603      	mov	r3, r0
 8004340:	4a08      	ldr	r2, [pc, #32]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 8004342:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <prvCheckForValidListAndQueue+0x60>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	490b      	ldr	r1, [pc, #44]	; (8004380 <prvCheckForValidListAndQueue+0x7c>)
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fd76 	bl	8002e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004358:	f000 f974 	bl	8004644 <vPortExitCritical>
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000de4 	.word	0x20000de4
 8004368:	20000db4 	.word	0x20000db4
 800436c:	20000dc8 	.word	0x20000dc8
 8004370:	20000ddc 	.word	0x20000ddc
 8004374:	20000de0 	.word	0x20000de0
 8004378:	20000e90 	.word	0x20000e90
 800437c:	20000df0 	.word	0x20000df0
 8004380:	08004e3c 	.word	0x08004e3c

08004384 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3b04      	subs	r3, #4
 8004394:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800439c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043b4:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <pxPortInitialiseStack+0x64>)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3b14      	subs	r3, #20
 80043be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f06f 0202 	mvn.w	r2, #2
 80043d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3b20      	subs	r3, #32
 80043d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	080043ed 	.word	0x080043ed

080043ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <prvTaskExitError+0x54>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d00a      	beq.n	8004416 <prvTaskExitError+0x2a>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <prvTaskExitError+0x28>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60bb      	str	r3, [r7, #8]
}
 8004428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800442a:	bf00      	nop
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0fc      	beq.n	800442c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	2000000c 	.word	0x2000000c
	...

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800449a:	bf00      	nop
 800449c:	e000ed08 	.word	0xe000ed08

080044a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044a6:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <xPortStartScheduler+0x120>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a46      	ldr	r2, [pc, #280]	; (80045c4 <xPortStartScheduler+0x124>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10a      	bne.n	80044c6 <xPortStartScheduler+0x26>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	613b      	str	r3, [r7, #16]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <xPortStartScheduler+0x120>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a3f      	ldr	r2, [pc, #252]	; (80045c8 <xPortStartScheduler+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10a      	bne.n	80044e6 <xPortStartScheduler+0x46>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <xPortStartScheduler+0x12c>)
 80044e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <xPortStartScheduler+0x130>)
 800450c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800450e:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <xPortStartScheduler+0x134>)
 8004510:	2207      	movs	r2, #7
 8004512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004514:	e009      	b.n	800452a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004516:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <xPortStartScheduler+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <xPortStartScheduler+0x134>)
 800451e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d0ef      	beq.n	8004516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <xPortStartScheduler+0x134>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1c3 0307 	rsb	r3, r3, #7
 800453e:	2b04      	cmp	r3, #4
 8004540:	d00a      	beq.n	8004558 <xPortStartScheduler+0xb8>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	60bb      	str	r3, [r7, #8]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <xPortStartScheduler+0x134>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <xPortStartScheduler+0x134>)
 8004560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <xPortStartScheduler+0x134>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <xPortStartScheduler+0x134>)
 800456c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <xPortStartScheduler+0x138>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <xPortStartScheduler+0x138>)
 800457c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <xPortStartScheduler+0x138>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <xPortStartScheduler+0x138>)
 8004588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800458c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800458e:	f000 f8dd 	bl	800474c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <xPortStartScheduler+0x13c>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004598:	f000 f8fc 	bl	8004794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <xPortStartScheduler+0x140>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <xPortStartScheduler+0x140>)
 80045a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045a8:	f7ff ff66 	bl	8004478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045ac:	f7ff f846 	bl	800363c <vTaskSwitchContext>
	prvTaskExitError();
 80045b0:	f7ff ff1c 	bl	80043ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	e000ed00 	.word	0xe000ed00
 80045c4:	410fc271 	.word	0x410fc271
 80045c8:	410fc270 	.word	0x410fc270
 80045cc:	e000e400 	.word	0xe000e400
 80045d0:	20000ee0 	.word	0x20000ee0
 80045d4:	20000ee4 	.word	0x20000ee4
 80045d8:	e000ed20 	.word	0xe000ed20
 80045dc:	2000000c 	.word	0x2000000c
 80045e0:	e000ef34 	.word	0xe000ef34

080045e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	607b      	str	r3, [r7, #4]
}
 80045fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <vPortEnterCritical+0x58>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3301      	adds	r3, #1
 8004604:	4a0d      	ldr	r2, [pc, #52]	; (800463c <vPortEnterCritical+0x58>)
 8004606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <vPortEnterCritical+0x58>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10f      	bne.n	8004630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <vPortEnterCritical+0x5c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <vPortEnterCritical+0x4c>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
}
 800462c:	bf00      	nop
 800462e:	e7fe      	b.n	800462e <vPortEnterCritical+0x4a>
	}
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	2000000c 	.word	0x2000000c
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <vPortExitCritical+0x50>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <vPortExitCritical+0x24>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	607b      	str	r3, [r7, #4]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <vPortExitCritical+0x50>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	4a09      	ldr	r2, [pc, #36]	; (8004694 <vPortExitCritical+0x50>)
 8004670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <vPortExitCritical+0x50>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <vPortExitCritical+0x42>
 800467a:	2300      	movs	r3, #0
 800467c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f383 8811 	msr	BASEPRI, r3
}
 8004684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	2000000c 	.word	0x2000000c
	...

080046a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046a0:	f3ef 8009 	mrs	r0, PSP
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <pxCurrentTCBConst>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f01e 0f10 	tst.w	lr, #16
 80046b0:	bf08      	it	eq
 80046b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	6010      	str	r0, [r2, #0]
 80046bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046c4:	f380 8811 	msr	BASEPRI, r0
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f7fe ffb4 	bl	800363c <vTaskSwitchContext>
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f380 8811 	msr	BASEPRI, r0
 80046dc:	bc09      	pop	{r0, r3}
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e6:	f01e 0f10 	tst.w	lr, #16
 80046ea:	bf08      	it	eq
 80046ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046f0:	f380 8809 	msr	PSP, r0
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst>:
 8004700:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
}
 8004720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004722:	f7fe fed1 	bl	80034c8 <xTaskIncrementTick>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <xPortSysTickHandler+0x40>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	2300      	movs	r3, #0
 8004736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f383 8811 	msr	BASEPRI, r3
}
 800473e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <vPortSetupTimerInterrupt+0x34>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <vPortSetupTimerInterrupt+0x38>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <vPortSetupTimerInterrupt+0x3c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0a      	ldr	r2, [pc, #40]	; (800478c <vPortSetupTimerInterrupt+0x40>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <vPortSetupTimerInterrupt+0x44>)
 800476a:	3b01      	subs	r3, #1
 800476c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <vPortSetupTimerInterrupt+0x34>)
 8004770:	2207      	movs	r2, #7
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e010 	.word	0xe000e010
 8004784:	e000e018 	.word	0xe000e018
 8004788:	20000000 	.word	0x20000000
 800478c:	10624dd3 	.word	0x10624dd3
 8004790:	e000e014 	.word	0xe000e014

08004794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047a4 <vPortEnableVFP+0x10>
 8004798:	6801      	ldr	r1, [r0, #0]
 800479a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800479e:	6001      	str	r1, [r0, #0]
 80047a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047a2:	bf00      	nop
 80047a4:	e000ed88 	.word	0xe000ed88

080047a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d914      	bls.n	80047e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ba:	4a17      	ldr	r2, [pc, #92]	; (8004818 <vPortValidateInterruptPriority+0x70>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <vPortValidateInterruptPriority+0x74>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	7afa      	ldrb	r2, [r7, #11]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d20a      	bcs.n	80047e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <vPortValidateInterruptPriority+0x78>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047ec:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <vPortValidateInterruptPriority+0x7c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d90a      	bls.n	800480a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	603b      	str	r3, [r7, #0]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <vPortValidateInterruptPriority+0x60>
	}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	e000e3f0 	.word	0xe000e3f0
 800481c:	20000ee0 	.word	0x20000ee0
 8004820:	e000ed0c 	.word	0xe000ed0c
 8004824:	20000ee4 	.word	0x20000ee4

08004828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004834:	f7fe fd8c 	bl	8003350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004838:	4b5b      	ldr	r3, [pc, #364]	; (80049a8 <pvPortMalloc+0x180>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004840:	f000 f920 	bl	8004a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004844:	4b59      	ldr	r3, [pc, #356]	; (80049ac <pvPortMalloc+0x184>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8093 	bne.w	8004978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01d      	beq.n	8004894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004858:	2208      	movs	r2, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4413      	add	r3, r2
 800485e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <pvPortMalloc+0x6c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	617b      	str	r3, [r7, #20]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06e      	beq.n	8004978 <pvPortMalloc+0x150>
 800489a:	4b45      	ldr	r3, [pc, #276]	; (80049b0 <pvPortMalloc+0x188>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d869      	bhi.n	8004978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <pvPortMalloc+0x18c>)
 80048a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <pvPortMalloc+0x18c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ae:	e004      	b.n	80048ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <pvPortMalloc+0xa4>
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f1      	bne.n	80048b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <pvPortMalloc+0x180>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d050      	beq.n	8004978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2208      	movs	r2, #8
 80048dc:	4413      	add	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	2308      	movs	r3, #8
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d91f      	bls.n	8004938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <pvPortMalloc+0xf8>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	613b      	str	r3, [r7, #16]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 f908 	bl	8004b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <pvPortMalloc+0x188>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <pvPortMalloc+0x188>)
 8004944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <pvPortMalloc+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <pvPortMalloc+0x190>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <pvPortMalloc+0x188>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <pvPortMalloc+0x190>)
 8004958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <pvPortMalloc+0x184>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	431a      	orrs	r2, r3
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <pvPortMalloc+0x194>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <pvPortMalloc+0x194>)
 8004976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004978:	f7fe fcf8 	bl	800336c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <pvPortMalloc+0x174>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	60fb      	str	r3, [r7, #12]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <pvPortMalloc+0x172>
	return pvReturn;
 800499c:	69fb      	ldr	r3, [r7, #28]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20004af0 	.word	0x20004af0
 80049ac:	20004b04 	.word	0x20004b04
 80049b0:	20004af4 	.word	0x20004af4
 80049b4:	20004ae8 	.word	0x20004ae8
 80049b8:	20004af8 	.word	0x20004af8
 80049bc:	20004afc 	.word	0x20004afc

080049c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04d      	beq.n	8004a6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049d2:	2308      	movs	r3, #8
 80049d4:	425b      	negs	r3, r3
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <vPortFree+0xb8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <vPortFree+0x44>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <vPortFree+0x62>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <vPortFree+0xb8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11a      	bne.n	8004a6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <vPortFree+0xb8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a48:	f7fe fc82 	bl	8003350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <vPortFree+0xbc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortFree+0xbc>)
 8004a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a5a:	6938      	ldr	r0, [r7, #16]
 8004a5c:	f000 f874 	bl	8004b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a60:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <vPortFree+0xc0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3301      	adds	r3, #1
 8004a66:	4a06      	ldr	r2, [pc, #24]	; (8004a80 <vPortFree+0xc0>)
 8004a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a6a:	f7fe fc7f 	bl	800336c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a6e:	bf00      	nop
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20004b04 	.word	0x20004b04
 8004a7c:	20004af4 	.word	0x20004af4
 8004a80:	20004b00 	.word	0x20004b00

08004a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <prvHeapInit+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <prvHeapInit+0xac>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004abc:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <prvHeapInit+0xb0>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <prvHeapInit+0xb0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <prvHeapInit+0xb4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <prvHeapInit+0xb4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <prvHeapInit+0xb4>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <prvHeapInit+0xb8>)
 8004b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <prvHeapInit+0xbc>)
 8004b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvHeapInit+0xc0>)
 8004b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000ee8 	.word	0x20000ee8
 8004b34:	20004ae8 	.word	0x20004ae8
 8004b38:	20004af0 	.word	0x20004af0
 8004b3c:	20004af8 	.word	0x20004af8
 8004b40:	20004af4 	.word	0x20004af4
 8004b44:	20004b04 	.word	0x20004b04

08004b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <prvInsertBlockIntoFreeList+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e002      	b.n	8004b5c <prvInsertBlockIntoFreeList+0x14>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d8f7      	bhi.n	8004b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4413      	add	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d108      	bne.n	8004b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d118      	bne.n	8004bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d00d      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e008      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e003      	b.n	8004bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d002      	beq.n	8004be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20004ae8 	.word	0x20004ae8
 8004bf8:	20004af0 	.word	0x20004af0

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <_reclaim_reent>:
 8004c0c:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <_reclaim_reent+0xa8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4283      	cmp	r3, r0
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	d04b      	beq.n	8004cb0 <_reclaim_reent+0xa4>
 8004c18:	69c3      	ldr	r3, [r0, #28]
 8004c1a:	b143      	cbz	r3, 8004c2e <_reclaim_reent+0x22>
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d144      	bne.n	8004cac <_reclaim_reent+0xa0>
 8004c22:	69e3      	ldr	r3, [r4, #28]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	b111      	cbz	r1, 8004c2e <_reclaim_reent+0x22>
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f879 	bl	8004d20 <_free_r>
 8004c2e:	6961      	ldr	r1, [r4, #20]
 8004c30:	b111      	cbz	r1, 8004c38 <_reclaim_reent+0x2c>
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 f874 	bl	8004d20 <_free_r>
 8004c38:	69e1      	ldr	r1, [r4, #28]
 8004c3a:	b111      	cbz	r1, 8004c42 <_reclaim_reent+0x36>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f000 f86f 	bl	8004d20 <_free_r>
 8004c42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c44:	b111      	cbz	r1, 8004c4c <_reclaim_reent+0x40>
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f86a 	bl	8004d20 <_free_r>
 8004c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c4e:	b111      	cbz	r1, 8004c56 <_reclaim_reent+0x4a>
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 f865 	bl	8004d20 <_free_r>
 8004c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c58:	b111      	cbz	r1, 8004c60 <_reclaim_reent+0x54>
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 f860 	bl	8004d20 <_free_r>
 8004c60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004c62:	b111      	cbz	r1, 8004c6a <_reclaim_reent+0x5e>
 8004c64:	4620      	mov	r0, r4
 8004c66:	f000 f85b 	bl	8004d20 <_free_r>
 8004c6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004c6c:	b111      	cbz	r1, 8004c74 <_reclaim_reent+0x68>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f856 	bl	8004d20 <_free_r>
 8004c74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c76:	b111      	cbz	r1, 8004c7e <_reclaim_reent+0x72>
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 f851 	bl	8004d20 <_free_r>
 8004c7e:	6a23      	ldr	r3, [r4, #32]
 8004c80:	b1b3      	cbz	r3, 8004cb0 <_reclaim_reent+0xa4>
 8004c82:	4620      	mov	r0, r4
 8004c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c88:	4718      	bx	r3
 8004c8a:	5949      	ldr	r1, [r1, r5]
 8004c8c:	b941      	cbnz	r1, 8004ca0 <_reclaim_reent+0x94>
 8004c8e:	3504      	adds	r5, #4
 8004c90:	69e3      	ldr	r3, [r4, #28]
 8004c92:	2d80      	cmp	r5, #128	; 0x80
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	d1f8      	bne.n	8004c8a <_reclaim_reent+0x7e>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f841 	bl	8004d20 <_free_r>
 8004c9e:	e7c0      	b.n	8004c22 <_reclaim_reent+0x16>
 8004ca0:	680e      	ldr	r6, [r1, #0]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 f83c 	bl	8004d20 <_free_r>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e7ef      	b.n	8004c8c <_reclaim_reent+0x80>
 8004cac:	2500      	movs	r5, #0
 8004cae:	e7ef      	b.n	8004c90 <_reclaim_reent+0x84>
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000005c 	.word	0x2000005c

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 f880 	bl	8004dd0 <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08004e64 	.word	0x08004e64
 8004cf4:	08004e64 	.word	0x08004e64
 8004cf8:	08004e64 	.word	0x08004e64
 8004cfc:	08004e68 	.word	0x08004e68

08004d00 <__retarget_lock_acquire_recursive>:
 8004d00:	4770      	bx	lr

08004d02 <__retarget_lock_release_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <memcpy>:
 8004d04:	440a      	add	r2, r1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	4770      	bx	lr
 8004d10:	b510      	push	{r4, lr}
 8004d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d1f9      	bne.n	8004d12 <memcpy+0xe>
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <_free_r>:
 8004d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d22:	2900      	cmp	r1, #0
 8004d24:	d044      	beq.n	8004db0 <_free_r+0x90>
 8004d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2a:	9001      	str	r0, [sp, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d32:	bfb8      	it	lt
 8004d34:	18e4      	addlt	r4, r4, r3
 8004d36:	f000 f83f 	bl	8004db8 <__malloc_lock>
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <_free_r+0x94>)
 8004d3c:	9801      	ldr	r0, [sp, #4]
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	b933      	cbnz	r3, 8004d50 <_free_r+0x30>
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6014      	str	r4, [r2, #0]
 8004d46:	b003      	add	sp, #12
 8004d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d4c:	f000 b83a 	b.w	8004dc4 <__malloc_unlock>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x46>
 8004d54:	6825      	ldr	r5, [r4, #0]
 8004d56:	1961      	adds	r1, r4, r5
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1949      	addeq	r1, r1, r5
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	e7ed      	b.n	8004d42 <_free_r+0x22>
 8004d66:	461a      	mov	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b10b      	cbz	r3, 8004d70 <_free_r+0x50>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x46>
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	1855      	adds	r5, r2, r1
 8004d74:	42a5      	cmp	r5, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x70>
 8004d78:	6824      	ldr	r4, [r4, #0]
 8004d7a:	4421      	add	r1, r4
 8004d7c:	1854      	adds	r4, r2, r1
 8004d7e:	42a3      	cmp	r3, r4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	d1e0      	bne.n	8004d46 <_free_r+0x26>
 8004d84:	681c      	ldr	r4, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	440c      	add	r4, r1
 8004d8c:	6014      	str	r4, [r2, #0]
 8004d8e:	e7da      	b.n	8004d46 <_free_r+0x26>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x78>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6003      	str	r3, [r0, #0]
 8004d96:	e7d6      	b.n	8004d46 <_free_r+0x26>
 8004d98:	6825      	ldr	r5, [r4, #0]
 8004d9a:	1961      	adds	r1, r4, r5
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf04      	itt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	bf04      	itt	eq
 8004da8:	1949      	addeq	r1, r1, r5
 8004daa:	6021      	streq	r1, [r4, #0]
 8004dac:	6054      	str	r4, [r2, #4]
 8004dae:	e7ca      	b.n	8004d46 <_free_r+0x26>
 8004db0:	b003      	add	sp, #12
 8004db2:	bd30      	pop	{r4, r5, pc}
 8004db4:	20004c44 	.word	0x20004c44

08004db8 <__malloc_lock>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__malloc_lock+0x8>)
 8004dba:	f7ff bfa1 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20004c40 	.word	0x20004c40

08004dc4 <__malloc_unlock>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__malloc_unlock+0x8>)
 8004dc6:	f7ff bf9c 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20004c40 	.word	0x20004c40

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr
