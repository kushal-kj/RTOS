
27-Interacting_with_Drivers-UARTRx_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f50  08004f50  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000060  08004fb8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c3c  08004fb8  00024c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a5d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000333e  00000000  00000000  00037b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f73  00000000  00000000  0003c250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036b1  00000000  00000000  0003d1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f8e  00000000  00000000  00040874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097760  00000000  00000000  00056802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056b0  00000000  00000000  000edf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  000f3614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ef0 	.word	0x08004ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004ef0 	.word	0x08004ef0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <main>:




int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af02      	add	r7, sp, #8

  HAL_Init();		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 8000572:	f000 fa83 	bl	8000a7c <HAL_Init>
  SystemClock_Config();		/* Configure the system clock */
 8000576:	f000 f87d 	bl	8000674 <SystemClock_Config>
  MX_GPIO_Init();		    /* Initialize all configured peripherals */
 800057a:	f000 f8e7 	bl	800074c <MX_GPIO_Init>




  xTaskCreate(Handlertask,					//create task2
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2303      	movs	r3, #3
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	4907      	ldr	r1, [pc, #28]	; (80005a8 <main+0x3c>)
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <main+0x40>)
 800058e:	f002 fda4 	bl	80030da <xTaskCreate>
		  STACK_SIZE,
		  NULL,
		  tskIDLE_PRIORITY+3,
		  NULL);

  uart2_BytesReceived=xQueueCreate(10,sizeof(char));
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	200a      	movs	r0, #10
 8000598:	f002 f8fc 	bl	8002794 <xQueueGenericCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <main+0x44>)
 80005a0:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 80005a2:	f002 fef5 	bl	8003390 <vTaskStartScheduler>



  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x3a>
 80005a8:	08004f08 	.word	0x08004f08
 80005ac:	080005e5 	.word	0x080005e5
 80005b0:	20000080 	.word	0x20000080

080005b4 <start_rx_interrupt>:
  }

}

void start_rx_interrupt(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	rxInProgress=1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <start_rx_interrupt+0x28>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]

	USART2->CR1 |=0x0020;				//Enable the Rx interrupt
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <start_rx_interrupt+0x2c>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <start_rx_interrupt+0x2c>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(USART2_IRQn,6);
 80005ca:	2106      	movs	r1, #6
 80005cc:	2026      	movs	r0, #38	; 0x26
 80005ce:	f7ff ffa3 	bl	8000518 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80005d2:	2026      	movs	r0, #38	; 0x26
 80005d4:	f7ff ff82 	bl	80004dc <__NVIC_EnableIRQ>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	40004400 	.word	0x40004400

080005e4 <Handlertask>:


char rcvByte;

void Handlertask(void *pvParameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	USART2_UART_RX_Init();
 80005ec:	f000 f9f8 	bl	80009e0 <USART2_UART_RX_Init>
	start_rx_interrupt();
 80005f0:	f7ff ffe0 	bl	80005b4 <start_rx_interrupt>

	while(1)
	{
		xQueueReceive(uart2_BytesReceived, &rcvByte, portMAX_DELAY);
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <Handlertask+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	4903      	ldr	r1, [pc, #12]	; (800060c <Handlertask+0x28>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fac0 	bl	8002b84 <xQueueReceive>
 8000604:	e7f6      	b.n	80005f4 <Handlertask+0x10>
 8000606:	bf00      	nop
 8000608:	20000080 	.word	0x20000080
 800060c:	20000084 	.word	0x20000084

08000610 <USART2_IRQHandler>:

	}
}

void USART2_IRQHandler(void)						//After ISR, continue where you left of and don't run from the  Higher Priority Task
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken=pdFALSE;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]

	if(USART2->SR & 0x0020)
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <USART2_IRQHandler+0x54>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00e      	beq.n	8000644 <USART2_IRQHandler+0x34>
	{
		uint8_t tempVal=(uint8_t)USART2->DR;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <USART2_IRQHandler+0x54>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	70fb      	strb	r3, [r7, #3]

		if(rxInProgress)
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <USART2_IRQHandler+0x58>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <USART2_IRQHandler+0x34>
		{
			xQueueSendFromISR(uart2_BytesReceived,&tempVal,&xHigherPriorityTaskWoken);
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <USART2_IRQHandler+0x5c>)
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	1cf9      	adds	r1, r7, #3
 800063e:	2300      	movs	r3, #0
 8000640:	f002 fa04 	bl	8002a4c <xQueueGenericSendFromISR>
		}

	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <USART2_IRQHandler+0x4a>
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <USART2_IRQHandler+0x60>)
 800064c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	f3bf 8f6f 	isb	sy

}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40004400 	.word	0x40004400
 8000668:	2000007c 	.word	0x2000007c
 800066c:	20000080 	.word	0x20000080
 8000670:	e000ed04 	.word	0xe000ed04

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb4a 	bl	8004d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <SystemClock_Config+0xd0>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <SystemClock_Config+0xd0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd4>)
 80006c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc64 	bl	8000fcc <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070a:	f000 f84b 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fec6 	bl	80014bc <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000736:	f000 f835 	bl	80007a4 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_GPIO_Init+0x30>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <MX_GPIO_Init+0x30>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_GPIO_Init+0x30>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 f995 	bl	8000ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010000 	.word	0x40010000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_MspInit+0x54>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x54>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_MspInit+0x54>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_MspInit+0x54>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fa3b 	bl	8000c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_UART_MspInit+0x84>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d12b      	bne.n	8000882 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_UART_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000862:	230c      	movs	r3, #12
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_UART_MspInit+0x8c>)
 800087e:	f000 fa21 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40004400 	.word	0x40004400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <HAL_InitTick+0xd0>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <HAL_InitTick+0xd0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6453      	str	r3, [r2, #68]	; 0x44
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <HAL_InitTick+0xd0>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c4:	f107 020c 	add.w	r2, r7, #12
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f814 	bl	80018fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008d4:	f000 fffe 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 80008d8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	4a23      	ldr	r2, [pc, #140]	; (800096c <HAL_InitTick+0xd4>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <HAL_InitTick+0xd8>)
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <HAL_InitTick+0xdc>)
 80008ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_InitTick+0xd8>)
 80008f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <HAL_InitTick+0xd8>)
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_InitTick+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_InitTick+0xd8>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_InitTick+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800090e:	4818      	ldr	r0, [pc, #96]	; (8000970 <HAL_InitTick+0xd8>)
 8000910:	f001 f826 	bl	8001960 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <HAL_InitTick+0xd8>)
 8000924:	f001 f876 	bl	8001a14 <HAL_TIM_Base_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000936:	2019      	movs	r0, #25
 8000938:	f000 f9b6 	bl	8000ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d808      	bhi.n	8000954 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000942:	2200      	movs	r2, #0
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	2019      	movs	r0, #25
 8000948:	f000 f992 	bl	8000c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_InitTick+0xe0>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e002      	b.n	800095a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800095e:	4618      	mov	r0, r3
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	431bde83 	.word	0x431bde83
 8000970:	20000088 	.word	0x20000088
 8000974:	40010000 	.word	0x40010000
 8000978:	20000004 	.word	0x20000004

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ae:	f001 f893 	bl	8001ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000088 	.word	0x20000088

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <USART2_UART_RX_Init>:

  }
}

void USART2_UART_RX_Init(void)			//For receiving Data
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <USART2_UART_RX_Init+0x44>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART2_UART_RX_Init+0x40>)
 8000a18:	f001 fa22 	bl	8001e60 <HAL_UART_Init>
  {

  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000d0 	.word	0x200000d0
 8000a24:	40004400 	.word	0x40004400

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a52:	f7ff ffb3 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f004 f9bf 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fd87 	bl	800056c <main>
  bx  lr    
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a6c:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8000a70:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a74:	20004c3c 	.word	0x20004c3c

08000a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_Init+0x40>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_Init+0x40>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x40>)
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f8d8 	bl	8000c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff fef4 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fe7e 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023c00 	.word	0x40023c00

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000114 	.word	0x20000114

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000114 	.word	0x20000114

08000b00 <__NVIC_SetPriorityGrouping>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff4c 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c82:	f7ff ff61 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	68b9      	ldr	r1, [r7, #8]
 8000c8c:	6978      	ldr	r0, [r7, #20]
 8000c8e:	f7ff ffb1 	bl	8000bf4 <NVIC_EncodePriority>
 8000c92:	4602      	mov	r2, r0
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff80 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff54 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	e159      	b.n	8000f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	f040 8148 	bne.w	8000f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d005      	beq.n	8000d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d017      	beq.n	8000db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d123      	bne.n	8000e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0203 	and.w	r2, r3, #3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80a2 	beq.w	8000f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b57      	ldr	r3, [pc, #348]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a56      	ldr	r2, [pc, #344]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b54      	ldr	r3, [pc, #336]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e66:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <HAL_GPIO_Init+0x2ec>)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x2f0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x202>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2f4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x1fe>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a47      	ldr	r2, [pc, #284]	; (8000fbc <HAL_GPIO_Init+0x2f8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x1fa>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_GPIO_Init+0x2fc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x1f6>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <HAL_GPIO_Init+0x300>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x1f2>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x204>
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x204>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x204>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x204>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x204>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <HAL_GPIO_Init+0x2ec>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b38      	ldr	r3, [pc, #224]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a24      	ldr	r2, [pc, #144]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3a:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_GPIO_Init+0x304>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f aea2 	bls.w	8000ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40013c00 	.word	0x40013c00

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e267      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d075      	beq.n	80010d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fea:	4b88      	ldr	r3, [pc, #544]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d00c      	beq.n	8001010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff6:	4b85      	ldr	r3, [pc, #532]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d112      	bne.n	8001028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800100e:	d10b      	bne.n	8001028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	4b7e      	ldr	r3, [pc, #504]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d05b      	beq.n	80010d4 <HAL_RCC_OscConfig+0x108>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d157      	bne.n	80010d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e242      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001030:	d106      	bne.n	8001040 <HAL_RCC_OscConfig+0x74>
 8001032:	4b76      	ldr	r3, [pc, #472]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a75      	ldr	r2, [pc, #468]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e01d      	b.n	800107c <HAL_RCC_OscConfig+0xb0>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x98>
 800104a:	4b70      	ldr	r3, [pc, #448]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a6f      	ldr	r2, [pc, #444]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b6d      	ldr	r3, [pc, #436]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6c      	ldr	r2, [pc, #432]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0xb0>
 8001064:	4b69      	ldr	r3, [pc, #420]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a68      	ldr	r2, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800106a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b66      	ldr	r3, [pc, #408]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a65      	ldr	r2, [pc, #404]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fd30 	bl	8000ae8 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800108c:	f7ff fd2c 	bl	8000ae8 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b64      	cmp	r3, #100	; 0x64
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e207      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0xc0>
 80010aa:	e014      	b.n	80010d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fd1c 	bl	8000ae8 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fd18 	bl	8000ae8 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	; 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e1f3      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0xe8>
 80010d2:	e000      	b.n	80010d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d063      	beq.n	80011aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d11c      	bne.n	8001134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fa:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d116      	bne.n	8001134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <HAL_RCC_OscConfig+0x152>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d001      	beq.n	800111e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e1c7      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4937      	ldr	r1, [pc, #220]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	e03a      	b.n	80011aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113c:	4b34      	ldr	r3, [pc, #208]	; (8001210 <HAL_RCC_OscConfig+0x244>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001142:	f7ff fcd1 	bl	8000ae8 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114a:	f7ff fccd 	bl	8000ae8 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e1a8      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4925      	ldr	r1, [pc, #148]	; (800120c <HAL_RCC_OscConfig+0x240>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e015      	b.n	80011aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x244>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fcb0 	bl	8000ae8 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fcac 	bl	8000ae8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e187      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d036      	beq.n	8001224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d016      	beq.n	80011ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_RCC_OscConfig+0x248>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc90 	bl	8000ae8 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc8c 	bl	8000ae8 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e167      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_RCC_OscConfig+0x240>)
 80011e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x200>
 80011ea:	e01b      	b.n	8001224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RCC_OscConfig+0x248>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fc79 	bl	8000ae8 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	e00e      	b.n	8001218 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc75 	bl	8000ae8 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d907      	bls.n	8001218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e150      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
 800120c:	40023800 	.word	0x40023800
 8001210:	42470000 	.word	0x42470000
 8001214:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b88      	ldr	r3, [pc, #544]	; (800143c <HAL_RCC_OscConfig+0x470>)
 800121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ea      	bne.n	80011fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8097 	beq.w	8001360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b81      	ldr	r3, [pc, #516]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b7d      	ldr	r3, [pc, #500]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a7c      	ldr	r2, [pc, #496]	; (800143c <HAL_RCC_OscConfig+0x470>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b7a      	ldr	r3, [pc, #488]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b77      	ldr	r3, [pc, #476]	; (8001440 <HAL_RCC_OscConfig+0x474>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d118      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b74      	ldr	r3, [pc, #464]	; (8001440 <HAL_RCC_OscConfig+0x474>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a73      	ldr	r2, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x474>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc35 	bl	8000ae8 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff fc31 	bl	8000ae8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e10c      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_RCC_OscConfig+0x474>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x2ea>
 80012a8:	4b64      	ldr	r3, [pc, #400]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ac:	4a63      	ldr	r2, [pc, #396]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6713      	str	r3, [r2, #112]	; 0x70
 80012b4:	e01c      	b.n	80012f0 <HAL_RCC_OscConfig+0x324>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x30c>
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	4a5b      	ldr	r2, [pc, #364]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6713      	str	r3, [r2, #112]	; 0x70
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0x324>
 80012d8:	4b58      	ldr	r3, [pc, #352]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012dc:	4a57      	ldr	r2, [pc, #348]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	6713      	str	r3, [r2, #112]	; 0x70
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e8:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80012ea:	f023 0304 	bic.w	r3, r3, #4
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d015      	beq.n	8001324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff fbf6 	bl	8000ae8 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f7ff fbf2 	bl	8000ae8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e0cb      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001316:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0ee      	beq.n	8001300 <HAL_RCC_OscConfig+0x334>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7ff fbe0 	bl	8000ae8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff fbdc 	bl	8000ae8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0b5      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1ee      	bne.n	800132c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001354:	4b39      	ldr	r3, [pc, #228]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a38      	ldr	r2, [pc, #224]	; (800143c <HAL_RCC_OscConfig+0x470>)
 800135a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a1 	beq.w	80014ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_RCC_OscConfig+0x470>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b08      	cmp	r3, #8
 8001374:	d05c      	beq.n	8001430 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d141      	bne.n	8001402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <HAL_RCC_OscConfig+0x478>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fbb0 	bl	8000ae8 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff fbac 	bl	8000ae8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e087      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69da      	ldr	r2, [r3, #28]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	019b      	lsls	r3, r3, #6
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	085b      	lsrs	r3, r3, #1
 80013c2:	3b01      	subs	r3, #1
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	491b      	ldr	r1, [pc, #108]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <HAL_RCC_OscConfig+0x478>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fb85 	bl	8000ae8 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fb81 	bl	8000ae8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e05c      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_RCC_OscConfig+0x470>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x416>
 8001400:	e054      	b.n	80014ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_RCC_OscConfig+0x478>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb6e 	bl	8000ae8 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff fb6a 	bl	8000ae8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e045      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_RCC_OscConfig+0x470>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x444>
 800142e:	e03d      	b.n	80014ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e038      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000
 8001444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x4ec>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d028      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d121      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d11a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001478:	4013      	ands	r3, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800147e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001480:	4293      	cmp	r3, r2
 8001482:	d111      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	3b01      	subs	r3, #1
 8001492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d107      	bne.n	80014a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0cc      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d90c      	bls.n	80014f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014de:	4b65      	ldr	r3, [pc, #404]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0b8      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d020      	beq.n	8001546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800151a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	494d      	ldr	r1, [pc, #308]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d044      	beq.n	80015dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d119      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e07f      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d003      	beq.n	800157a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	2b03      	cmp	r3, #3
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06f      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e067      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f023 0203 	bic.w	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4934      	ldr	r1, [pc, #208]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ac:	f7ff fa9c 	bl	8000ae8 <HAL_GetTick>
 80015b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b4:	f7ff fa98 	bl	8000ae8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e04f      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 020c 	and.w	r2, r3, #12
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	429a      	cmp	r2, r3
 80015da:	d1eb      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d20c      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e032      	b.n	800166a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4916      	ldr	r1, [pc, #88]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	490e      	ldr	r1, [pc, #56]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001642:	f000 f821 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001646:	4602      	mov	r2, r0
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	490a      	ldr	r1, [pc, #40]	; (800167c <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	fa22 f303 	lsr.w	r3, r2, r3
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1c8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f918 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00
 8001678:	40023800 	.word	0x40023800
 800167c:	08004f30 	.word	0x08004f30
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800168c:	b094      	sub	sp, #80	; 0x50
 800168e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
 8001694:	2300      	movs	r3, #0
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001698:	2300      	movs	r3, #0
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a0:	4b79      	ldr	r3, [pc, #484]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d00d      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x40>
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	f200 80e1 	bhi.w	8001874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_GetSysClockFreq+0x34>
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d003      	beq.n	80016c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016ba:	e0db      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016bc:	4b73      	ldr	r3, [pc, #460]	; (800188c <HAL_RCC_GetSysClockFreq+0x204>)
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80016c0:	e0db      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016c2:	4b73      	ldr	r3, [pc, #460]	; (8001890 <HAL_RCC_GetSysClockFreq+0x208>)
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016c6:	e0d8      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c8:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d2:	4b6d      	ldr	r3, [pc, #436]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d063      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016de:	4b6a      	ldr	r3, [pc, #424]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	099b      	lsrs	r3, r3, #6
 80016e4:	2200      	movs	r2, #0
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80016e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80016ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
 80016f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016fa:	4622      	mov	r2, r4
 80016fc:	462b      	mov	r3, r5
 80016fe:	f04f 0000 	mov.w	r0, #0
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	0159      	lsls	r1, r3, #5
 8001708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170c:	0150      	lsls	r0, r2, #5
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4621      	mov	r1, r4
 8001714:	1a51      	subs	r1, r2, r1
 8001716:	6139      	str	r1, [r7, #16]
 8001718:	4629      	mov	r1, r5
 800171a:	eb63 0301 	sbc.w	r3, r3, r1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800172c:	4659      	mov	r1, fp
 800172e:	018b      	lsls	r3, r1, #6
 8001730:	4651      	mov	r1, sl
 8001732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001736:	4651      	mov	r1, sl
 8001738:	018a      	lsls	r2, r1, #6
 800173a:	4651      	mov	r1, sl
 800173c:	ebb2 0801 	subs.w	r8, r2, r1
 8001740:	4659      	mov	r1, fp
 8001742:	eb63 0901 	sbc.w	r9, r3, r1
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800175a:	4690      	mov	r8, r2
 800175c:	4699      	mov	r9, r3
 800175e:	4623      	mov	r3, r4
 8001760:	eb18 0303 	adds.w	r3, r8, r3
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	462b      	mov	r3, r5
 8001768:	eb49 0303 	adc.w	r3, r9, r3
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800177a:	4629      	mov	r1, r5
 800177c:	024b      	lsls	r3, r1, #9
 800177e:	4621      	mov	r1, r4
 8001780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001784:	4621      	mov	r1, r4
 8001786:	024a      	lsls	r2, r1, #9
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178e:	2200      	movs	r2, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001798:	f7fe fd22 	bl	80001e0 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a4:	e058      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	4611      	mov	r1, r2
 80017b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017c0:	4642      	mov	r2, r8
 80017c2:	464b      	mov	r3, r9
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	0159      	lsls	r1, r3, #5
 80017ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d2:	0150      	lsls	r0, r2, #5
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4641      	mov	r1, r8
 80017da:	ebb2 0a01 	subs.w	sl, r2, r1
 80017de:	4649      	mov	r1, r9
 80017e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017f8:	ebb2 040a 	subs.w	r4, r2, sl
 80017fc:	eb63 050b 	sbc.w	r5, r3, fp
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	00eb      	lsls	r3, r5, #3
 800180a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800180e:	00e2      	lsls	r2, r4, #3
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	4643      	mov	r3, r8
 8001816:	18e3      	adds	r3, r4, r3
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	464b      	mov	r3, r9
 800181c:	eb45 0303 	adc.w	r3, r5, r3
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800182e:	4629      	mov	r1, r5
 8001830:	028b      	lsls	r3, r1, #10
 8001832:	4621      	mov	r1, r4
 8001834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001838:	4621      	mov	r1, r4
 800183a:	028a      	lsls	r2, r1, #10
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001842:	2200      	movs	r2, #0
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	61fa      	str	r2, [r7, #28]
 8001848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800184c:	f7fe fcc8 	bl	80001e0 <__aeabi_uldivmod>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4613      	mov	r3, r2
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_GetSysClockFreq+0x200>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	3301      	adds	r3, #1
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800186a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001872:	e002      	b.n	800187a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_GetSysClockFreq+0x204>)
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800187c:	4618      	mov	r0, r3
 800187e:	3750      	adds	r7, #80	; 0x50
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	00f42400 	.word	0x00f42400
 8001890:	007a1200 	.word	0x007a1200

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b0:	f7ff fff0 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4903      	ldr	r1, [pc, #12]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08004f40 	.word	0x08004f40

080018d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018d8:	f7ff ffdc 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0b5b      	lsrs	r3, r3, #13
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08004f40 	.word	0x08004f40

080018fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	220f      	movs	r2, #15
 800190a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_GetClockConfig+0x5c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_RCC_GetClockConfig+0x60>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0207 	and.w	r2, r3, #7
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e041      	b.n	80019f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f839 	bl	80019fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 f9ca 	bl	8001d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d001      	beq.n	8001a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e044      	b.n	8001ab6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d018      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x6c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a56:	d013      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x6c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00e      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x6c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_TIM_Base_Start_IT+0xb8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d009      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x6c>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d004      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x6c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d111      	bne.n	8001aa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d010      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa2:	e007      	b.n	8001ab4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00
 8001ad4:	40014000 	.word	0x40014000

08001ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d122      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d11b      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0202 	mvn.w	r2, #2
 8001b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8ee 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001b20:	e005      	b.n	8001b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8e0 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8f1 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0204 	mvn.w	r2, #4
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8c4 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8b6 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f8c7 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0208 	mvn.w	r2, #8
 8001bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f89a 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f88c 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f89d 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d122      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d11b      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0210 	mvn.w	r2, #16
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2208      	movs	r2, #8
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f870 	bl	8001cfc <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f862 	bl	8001ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f873 	bl	8001d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0201 	mvn.w	r2, #1
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fd92 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c74:	2b80      	cmp	r3, #128	; 0x80
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8e2 	bl	8001e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d10e      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d107      	bne.n	8001cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f838 	bl	8001d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d107      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0220 	mvn.w	r2, #32
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8ac 	bl	8001e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a34      	ldr	r2, [pc, #208]	; (8001e1c <TIM_Base_SetConfig+0xe4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00f      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d56:	d00b      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a31      	ldr	r2, [pc, #196]	; (8001e20 <TIM_Base_SetConfig+0xe8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <TIM_Base_SetConfig+0xec>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TIM_Base_SetConfig+0x38>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <TIM_Base_SetConfig+0xf0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d108      	bne.n	8001d82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <TIM_Base_SetConfig+0xe4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01b      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d90:	d017      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <TIM_Base_SetConfig+0xe8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <TIM_Base_SetConfig+0xec>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00f      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <TIM_Base_SetConfig+0xf0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00b      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <TIM_Base_SetConfig+0xf4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <TIM_Base_SetConfig+0xf8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <TIM_Base_SetConfig+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <TIM_Base_SetConfig+0xfc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <TIM_Base_SetConfig+0xe4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d103      	bne.n	8001e08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	615a      	str	r2, [r3, #20]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40014800 	.word	0x40014800

08001e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03f      	b.n	8001ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fcbe 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f829 	bl	8001efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f00:	b0c0      	sub	sp, #256	; 0x100
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	68d9      	ldr	r1, [r3, #12]
 8001f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	ea40 0301 	orr.w	r3, r0, r1
 8001f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f54:	f021 010c 	bic.w	r1, r1, #12
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f62:	430b      	orrs	r3, r1
 8001f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f76:	6999      	ldr	r1, [r3, #24]
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	ea40 0301 	orr.w	r3, r0, r1
 8001f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <UART_SetConfig+0x2cc>)
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d005      	beq.n	8001f9c <UART_SetConfig+0xa0>
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b8d      	ldr	r3, [pc, #564]	; (80021cc <UART_SetConfig+0x2d0>)
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d104      	bne.n	8001fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f9c:	f7ff fc9a 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 8001fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001fa4:	e003      	b.n	8001fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fa6:	f7ff fc81 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8001faa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb8:	f040 810c 	bne.w	80021d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	1891      	adds	r1, r2, r2
 8001fd4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fd6:	415b      	adcs	r3, r3
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fde:	4621      	mov	r1, r4
 8001fe0:	eb12 0801 	adds.w	r8, r2, r1
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	eb43 0901 	adc.w	r9, r3, r1
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
 8002002:	4623      	mov	r3, r4
 8002004:	eb18 0303 	adds.w	r3, r8, r3
 8002008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800200c:	462b      	mov	r3, r5
 800200e:	eb49 0303 	adc.w	r3, r9, r3
 8002012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002022:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800202a:	460b      	mov	r3, r1
 800202c:	18db      	adds	r3, r3, r3
 800202e:	653b      	str	r3, [r7, #80]	; 0x50
 8002030:	4613      	mov	r3, r2
 8002032:	eb42 0303 	adc.w	r3, r2, r3
 8002036:	657b      	str	r3, [r7, #84]	; 0x54
 8002038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800203c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002040:	f7fe f8ce 	bl	80001e0 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <UART_SetConfig+0x2d4>)
 800204a:	fba3 2302 	umull	r2, r3, r3, r2
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	011c      	lsls	r4, r3, #4
 8002052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002056:	2200      	movs	r2, #0
 8002058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800205c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002064:	4642      	mov	r2, r8
 8002066:	464b      	mov	r3, r9
 8002068:	1891      	adds	r1, r2, r2
 800206a:	64b9      	str	r1, [r7, #72]	; 0x48
 800206c:	415b      	adcs	r3, r3
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002074:	4641      	mov	r1, r8
 8002076:	eb12 0a01 	adds.w	sl, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb43 0b01 	adc.w	fp, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800208c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002094:	4692      	mov	sl, r2
 8002096:	469b      	mov	fp, r3
 8002098:	4643      	mov	r3, r8
 800209a:	eb1a 0303 	adds.w	r3, sl, r3
 800209e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020a2:	464b      	mov	r3, r9
 80020a4:	eb4b 0303 	adc.w	r3, fp, r3
 80020a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020c0:	460b      	mov	r3, r1
 80020c2:	18db      	adds	r3, r3, r3
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
 80020c6:	4613      	mov	r3, r2
 80020c8:	eb42 0303 	adc.w	r3, r2, r3
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020d6:	f7fe f883 	bl	80001e0 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <UART_SetConfig+0x2d4>)
 80020e2:	fba3 2301 	umull	r2, r3, r3, r1
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2264      	movs	r2, #100	; 0x64
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	1acb      	subs	r3, r1, r3
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <UART_SetConfig+0x2d4>)
 80020f8:	fba3 2302 	umull	r2, r3, r3, r2
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002104:	441c      	add	r4, r3
 8002106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002110:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002118:	4642      	mov	r2, r8
 800211a:	464b      	mov	r3, r9
 800211c:	1891      	adds	r1, r2, r2
 800211e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002120:	415b      	adcs	r3, r3
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002128:	4641      	mov	r1, r8
 800212a:	1851      	adds	r1, r2, r1
 800212c:	6339      	str	r1, [r7, #48]	; 0x30
 800212e:	4649      	mov	r1, r9
 8002130:	414b      	adcs	r3, r1
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002140:	4659      	mov	r1, fp
 8002142:	00cb      	lsls	r3, r1, #3
 8002144:	4651      	mov	r1, sl
 8002146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800214a:	4651      	mov	r1, sl
 800214c:	00ca      	lsls	r2, r1, #3
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	4603      	mov	r3, r0
 8002154:	4642      	mov	r2, r8
 8002156:	189b      	adds	r3, r3, r2
 8002158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800215c:	464b      	mov	r3, r9
 800215e:	460a      	mov	r2, r1
 8002160:	eb42 0303 	adc.w	r3, r2, r3
 8002164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002174:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800217c:	460b      	mov	r3, r1
 800217e:	18db      	adds	r3, r3, r3
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
 8002182:	4613      	mov	r3, r2
 8002184:	eb42 0303 	adc.w	r3, r2, r3
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800218e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002192:	f7fe f825 	bl	80001e0 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <UART_SetConfig+0x2d4>)
 800219c:	fba3 1302 	umull	r1, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	2164      	movs	r1, #100	; 0x64
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	3332      	adds	r3, #50	; 0x32
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <UART_SetConfig+0x2d4>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	f003 0207 	and.w	r2, r3, #7
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4422      	add	r2, r4
 80021c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021c4:	e106      	b.n	80023d4 <UART_SetConfig+0x4d8>
 80021c6:	bf00      	nop
 80021c8:	40011000 	.word	0x40011000
 80021cc:	40011400 	.word	0x40011400
 80021d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021e6:	4642      	mov	r2, r8
 80021e8:	464b      	mov	r3, r9
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	6239      	str	r1, [r7, #32]
 80021ee:	415b      	adcs	r3, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021f6:	4641      	mov	r1, r8
 80021f8:	1854      	adds	r4, r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	eb43 0501 	adc.w	r5, r3, r1
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	00eb      	lsls	r3, r5, #3
 800220a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220e:	00e2      	lsls	r2, r4, #3
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	4643      	mov	r3, r8
 8002216:	18e3      	adds	r3, r4, r3
 8002218:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800221c:	464b      	mov	r3, r9
 800221e:	eb45 0303 	adc.w	r3, r5, r3
 8002222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002242:	4629      	mov	r1, r5
 8002244:	008b      	lsls	r3, r1, #2
 8002246:	4621      	mov	r1, r4
 8002248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800224c:	4621      	mov	r1, r4
 800224e:	008a      	lsls	r2, r1, #2
 8002250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002254:	f7fd ffc4 	bl	80001e0 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <UART_SetConfig+0x4e4>)
 800225e:	fba3 2302 	umull	r2, r3, r3, r2
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	011c      	lsls	r4, r3, #4
 8002266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226a:	2200      	movs	r2, #0
 800226c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002270:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002278:	4642      	mov	r2, r8
 800227a:	464b      	mov	r3, r9
 800227c:	1891      	adds	r1, r2, r2
 800227e:	61b9      	str	r1, [r7, #24]
 8002280:	415b      	adcs	r3, r3
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	4641      	mov	r1, r8
 800228a:	1851      	adds	r1, r2, r1
 800228c:	6139      	str	r1, [r7, #16]
 800228e:	4649      	mov	r1, r9
 8002290:	414b      	adcs	r3, r1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022a0:	4659      	mov	r1, fp
 80022a2:	00cb      	lsls	r3, r1, #3
 80022a4:	4651      	mov	r1, sl
 80022a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022aa:	4651      	mov	r1, sl
 80022ac:	00ca      	lsls	r2, r1, #3
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	4642      	mov	r2, r8
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022bc:	464b      	mov	r3, r9
 80022be:	460a      	mov	r2, r1
 80022c0:	eb42 0303 	adc.w	r3, r2, r3
 80022c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80022d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022e0:	4649      	mov	r1, r9
 80022e2:	008b      	lsls	r3, r1, #2
 80022e4:	4641      	mov	r1, r8
 80022e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ea:	4641      	mov	r1, r8
 80022ec:	008a      	lsls	r2, r1, #2
 80022ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022f2:	f7fd ff75 	bl	80001e0 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <UART_SetConfig+0x4e4>)
 80022fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2264      	movs	r2, #100	; 0x64
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	1acb      	subs	r3, r1, r3
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	3332      	adds	r3, #50	; 0x32
 8002310:	4a33      	ldr	r2, [pc, #204]	; (80023e0 <UART_SetConfig+0x4e4>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	441c      	add	r4, r3
 800231e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002322:	2200      	movs	r2, #0
 8002324:	673b      	str	r3, [r7, #112]	; 0x70
 8002326:	677a      	str	r2, [r7, #116]	; 0x74
 8002328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800232c:	4642      	mov	r2, r8
 800232e:	464b      	mov	r3, r9
 8002330:	1891      	adds	r1, r2, r2
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	415b      	adcs	r3, r3
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800233c:	4641      	mov	r1, r8
 800233e:	1851      	adds	r1, r2, r1
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	4649      	mov	r1, r9
 8002344:	414b      	adcs	r3, r1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002354:	4659      	mov	r1, fp
 8002356:	00cb      	lsls	r3, r1, #3
 8002358:	4651      	mov	r1, sl
 800235a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235e:	4651      	mov	r1, sl
 8002360:	00ca      	lsls	r2, r1, #3
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	4603      	mov	r3, r0
 8002368:	4642      	mov	r2, r8
 800236a:	189b      	adds	r3, r3, r2
 800236c:	66bb      	str	r3, [r7, #104]	; 0x68
 800236e:	464b      	mov	r3, r9
 8002370:	460a      	mov	r2, r1
 8002372:	eb42 0303 	adc.w	r3, r2, r3
 8002376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
 8002382:	667a      	str	r2, [r7, #100]	; 0x64
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002390:	4649      	mov	r1, r9
 8002392:	008b      	lsls	r3, r1, #2
 8002394:	4641      	mov	r1, r8
 8002396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800239a:	4641      	mov	r1, r8
 800239c:	008a      	lsls	r2, r1, #2
 800239e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023a2:	f7fd ff1d 	bl	80001e0 <__aeabi_uldivmod>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <UART_SetConfig+0x4e4>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	2164      	movs	r1, #100	; 0x64
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <UART_SetConfig+0x4e4>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	f003 020f 	and.w	r2, r3, #15
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4422      	add	r2, r4
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023da:	46bd      	mov	sp, r7
 80023dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e0:	51eb851f 	.word	0x51eb851f

080023e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Handler+0x1c>)
 80023ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80023ec:	f001 fc2c 	bl	8003c48 <xTaskGetSchedulerState>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80023f6:	f002 fa17 	bl	8004828 <xPortSysTickHandler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <vApplicationGetIdleTaskMemory+0x2c>)
 8002414:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <vApplicationGetIdleTaskMemory+0x30>)
 800241a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000118 	.word	0x20000118
 8002434:	200001c0 	.word	0x200001c0

08002438 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <vApplicationGetTimerTaskMemory+0x2c>)
 8002448:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <vApplicationGetTimerTaskMemory+0x30>)
 800244e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200003c0 	.word	0x200003c0
 8002468:	20000468 	.word	0x20000468

0800246c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 0208 	add.w	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f103 0208 	add.w	r2, r3, #8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 0208 	add.w	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d103      	bne.n	800252e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e00c      	b.n	8002548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3308      	adds	r3, #8
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e002      	b.n	800253c <vListInsert+0x2e>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d2f6      	bcs.n	8002536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	601a      	str	r2, [r3, #0]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6892      	ldr	r2, [r2, #8]
 8002596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6852      	ldr	r2, [r2, #4]
 80025a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d103      	bne.n	80025b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	1e5a      	subs	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025fe:	f002 f881 	bl	8004704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	3b01      	subs	r3, #1
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	441a      	add	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	22ff      	movs	r2, #255	; 0xff
 8002642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d114      	bne.n	800267e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01a      	beq.n	8002692 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3310      	adds	r3, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f92f 	bl	80038c4 <xTaskRemoveFromEventList>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <xQueueGenericReset+0xcc>)
 800266e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	e009      	b.n	8002692 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3310      	adds	r3, #16
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fef2 	bl	800246c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3324      	adds	r3, #36	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff feed 	bl	800246c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002692:	f002 f867 	bl	8004764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	; 0x38
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026e6:	bf00      	nop
 80026e8:	e7fe      	b.n	80026e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <xQueueGenericCreateStatic+0x52>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <xQueueGenericCreateStatic+0x56>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <xQueueGenericCreateStatic+0x58>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	623b      	str	r3, [r7, #32]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <xQueueGenericCreateStatic+0x7e>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <xQueueGenericCreateStatic+0x82>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueGenericCreateStatic+0x84>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	61fb      	str	r3, [r7, #28]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002742:	2350      	movs	r3, #80	; 0x50
 8002744:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d00a      	beq.n	8002762 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61bb      	str	r3, [r7, #24]
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002762:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002776:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f83f 	bl	8002808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800278c:	4618      	mov	r0, r3
 800278e:	3730      	adds	r7, #48	; 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericCreate+0x2a>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	613b      	str	r3, [r7, #16]
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3350      	adds	r3, #80	; 0x50
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 f8bb 	bl	8004948 <pvPortMalloc>
 80027d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d011      	beq.n	80027fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3350      	adds	r3, #80	; 0x50
 80027e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f805 	bl	8002808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e002      	b.n	800282a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002836:	2101      	movs	r1, #1
 8002838:	69b8      	ldr	r0, [r7, #24]
 800283a:	f7ff fecb 	bl	80025d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08e      	sub	sp, #56	; 0x38
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueGenericSend+0x32>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <xQueueGenericSend+0x40>
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <xQueueGenericSend+0x44>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <xQueueGenericSend+0x46>
 8002894:	2300      	movs	r3, #0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <xQueueGenericSend+0x60>
	__asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028ac:	bf00      	nop
 80028ae:	e7fe      	b.n	80028ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d103      	bne.n	80028be <xQueueGenericSend+0x6e>
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <xQueueGenericSend+0x72>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <xQueueGenericSend+0x74>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueGenericSend+0x8e>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	623b      	str	r3, [r7, #32]
}
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028de:	f001 f9b3 	bl	8003c48 <xTaskGetSchedulerState>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <xQueueGenericSend+0x9e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <xQueueGenericSend+0xa2>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <xQueueGenericSend+0xa4>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericSend+0xbe>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	61fb      	str	r3, [r7, #28]
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800290e:	f001 fef9 	bl	8004704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <xQueueGenericSend+0xd4>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d129      	bne.n	8002978 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292a:	f000 fa0b 	bl	8002d44 <prvCopyDataToQueue>
 800292e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	3324      	adds	r3, #36	; 0x24
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ffc1 	bl	80038c4 <xTaskRemoveFromEventList>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <xQueueGenericSend+0x1f8>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e00a      	b.n	8002970 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <xQueueGenericSend+0x1f8>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002970:	f001 fef8 	bl	8004764 <vPortExitCritical>
				return pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	e063      	b.n	8002a40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800297e:	f001 fef1 	bl	8004764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002982:	2300      	movs	r3, #0
 8002984:	e05c      	b.n	8002a40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fffb 	bl	800398c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800299a:	f001 fee3 	bl	8004764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800299e:	f000 fd67 	bl	8003470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029a2:	f001 feaf 	bl	8004704 <vPortEnterCritical>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d103      	bne.n	80029bc <xQueueGenericSend+0x16c>
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d103      	bne.n	80029d2 <xQueueGenericSend+0x182>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d2:	f001 fec7 	bl	8004764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029d6:	1d3a      	adds	r2, r7, #4
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 ffea 	bl	80039b8 <xTaskCheckForTimeOut>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d124      	bne.n	8002a34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ec:	f000 faa2 	bl	8002f34 <prvIsQueueFull>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	3310      	adds	r3, #16
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff10 	bl	8003824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a06:	f000 fa2d 	bl	8002e64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a0a:	f000 fd3f 	bl	800348c <xTaskResumeAll>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f af7c 	bne.w	800290e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <xQueueGenericSend+0x1f8>)
 8002a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	e772      	b.n	800290e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a2a:	f000 fa1b 	bl	8002e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a2e:	f000 fd2d 	bl	800348c <xTaskResumeAll>
 8002a32:	e76c      	b.n	800290e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a36:	f000 fa15 	bl	8002e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a3a:	f000 fd27 	bl	800348c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3738      	adds	r7, #56	; 0x38
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b090      	sub	sp, #64	; 0x40
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <xQueueGenericSendFromISR+0x3c>
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <xQueueGenericSendFromISR+0x40>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <xQueueGenericSendFromISR+0x42>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d103      	bne.n	8002ab6 <xQueueGenericSendFromISR+0x6a>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <xQueueGenericSendFromISR+0x6e>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <xQueueGenericSendFromISR+0x70>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	623b      	str	r3, [r7, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ad6:	f001 fef7 	bl	80048c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ada:	f3ef 8211 	mrs	r2, BASEPRI
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	61fa      	str	r2, [r7, #28]
 8002af0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002af2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <xQueueGenericSendFromISR+0xbc>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d12f      	bne.n	8002b68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b1e:	f000 f911 	bl	8002d44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d112      	bne.n	8002b52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d016      	beq.n	8002b62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	3324      	adds	r3, #36	; 0x24
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fec3 	bl	80038c4 <xTaskRemoveFromEventList>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b62:	2301      	movs	r3, #1
 8002b64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002b66:	e001      	b.n	8002b6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3740      	adds	r7, #64	; 0x40
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xQueueReceive+0x30>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	623b      	str	r3, [r7, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <xQueueReceive+0x3e>
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueReceive+0x42>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueReceive+0x44>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueReceive+0x5e>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61fb      	str	r3, [r7, #28]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002be2:	f001 f831 	bl	8003c48 <xTaskGetSchedulerState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xQueueReceive+0x6e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <xQueueReceive+0x72>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueReceive+0x74>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueReceive+0x8e>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	61bb      	str	r3, [r7, #24]
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c12:	f001 fd77 	bl	8004704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01f      	beq.n	8002c62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c26:	f000 f8f7 	bl	8002e18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fe40 	bl	80038c4 <xTaskRemoveFromEventList>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <xQueueReceive+0x1bc>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c5a:	f001 fd83 	bl	8004764 <vPortExitCritical>
				return pdPASS;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e069      	b.n	8002d36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d103      	bne.n	8002c70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c68:	f001 fd7c 	bl	8004764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e062      	b.n	8002d36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fe86 	bl	800398c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c84:	f001 fd6e 	bl	8004764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c88:	f000 fbf2 	bl	8003470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8c:	f001 fd3a 	bl	8004704 <vPortEnterCritical>
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d103      	bne.n	8002ca6 <xQueueReceive+0x122>
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d103      	bne.n	8002cbc <xQueueReceive+0x138>
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbc:	f001 fd52 	bl	8004764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cc0:	1d3a      	adds	r2, r7, #4
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fe75 	bl	80039b8 <xTaskCheckForTimeOut>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d123      	bne.n	8002d1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd6:	f000 f917 	bl	8002f08 <prvIsQueueEmpty>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fd9b 	bl	8003824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf0:	f000 f8b8 	bl	8002e64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cf4:	f000 fbca 	bl	800348c <xTaskResumeAll>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d189      	bne.n	8002c12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <xQueueReceive+0x1bc>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	e780      	b.n	8002c12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d12:	f000 f8a7 	bl	8002e64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d16:	f000 fbb9 	bl	800348c <xTaskResumeAll>
 8002d1a:	e77a      	b.n	8002c12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1e:	f000 f8a1 	bl	8002e64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d22:	f000 fbb3 	bl	800348c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d28:	f000 f8ee 	bl	8002f08 <prvIsQueueEmpty>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f43f af6f 	beq.w	8002c12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3730      	adds	r7, #48	; 0x30
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d14d      	bne.n	8002e06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 ff88 	bl	8003c84 <xTaskPriorityDisinherit>
 8002d74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e043      	b.n	8002e06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	f002 f848 	bl	8004e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d32b      	bcc.n	8002e06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e026      	b.n	8002e06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68d8      	ldr	r0, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	f002 f82e 	bl	8004e24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	441a      	add	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d207      	bcs.n	8002df4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	425b      	negs	r3, r3
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d105      	bne.n	8002e06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e0e:	697b      	ldr	r3, [r7, #20]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d303      	bcc.n	8002e4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68d9      	ldr	r1, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	461a      	mov	r2, r3
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	f001 ffe4 	bl	8004e24 <memcpy>
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e6c:	f001 fc4a 	bl	8004704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e78:	e011      	b.n	8002e9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d012      	beq.n	8002ea8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3324      	adds	r3, #36	; 0x24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd1c 	bl	80038c4 <xTaskRemoveFromEventList>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e92:	f000 fdf3 	bl	8003a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	dce9      	bgt.n	8002e7a <prvUnlockQueue+0x16>
 8002ea6:	e000      	b.n	8002eaa <prvUnlockQueue+0x46>
					break;
 8002ea8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002eb2:	f001 fc57 	bl	8004764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002eb6:	f001 fc25 	bl	8004704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ec2:	e011      	b.n	8002ee8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3310      	adds	r3, #16
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fcf7 	bl	80038c4 <xTaskRemoveFromEventList>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002edc:	f000 fdce 	bl	8003a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ee0:	7bbb      	ldrb	r3, [r7, #14]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dce9      	bgt.n	8002ec4 <prvUnlockQueue+0x60>
 8002ef0:	e000      	b.n	8002ef4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ef2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002efc:	f001 fc32 	bl	8004764 <vPortExitCritical>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f10:	f001 fbf8 	bl	8004704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e001      	b.n	8002f26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f26:	f001 fc1d 	bl	8004764 <vPortExitCritical>

	return xReturn;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f3c:	f001 fbe2 	bl	8004704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d102      	bne.n	8002f52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e001      	b.n	8002f56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f56:	f001 fc05 	bl	8004764 <vPortExitCritical>

	return xReturn;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e014      	b.n	8002f9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <vQueueAddToRegistry+0x50>)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <vQueueAddToRegistry+0x50>)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <vQueueAddToRegistry+0x50>)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f96:	e006      	b.n	8002fa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d9e7      	bls.n	8002f74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000868 	.word	0x20000868

08002fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002fc8:	f001 fb9c 	bl	8004704 <vPortEnterCritical>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d103      	bne.n	8002fe2 <vQueueWaitForMessageRestricted+0x2a>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d103      	bne.n	8002ff8 <vQueueWaitForMessageRestricted+0x40>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff8:	f001 fbb4 	bl	8004764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3324      	adds	r3, #36	; 0x24
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fc2d 	bl	800386c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f7ff ff26 	bl	8002e64 <prvUnlockQueue>
	}
 8003018:	bf00      	nop
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af04      	add	r7, sp, #16
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
}
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xTaskCreateStatic+0x46>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61fb      	str	r3, [r7, #28]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003066:	23a8      	movs	r3, #168	; 0xa8
 8003068:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2ba8      	cmp	r3, #168	; 0xa8
 800306e:	d00a      	beq.n	8003086 <xTaskCreateStatic+0x66>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61bb      	str	r3, [r7, #24]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003086:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01e      	beq.n	80030cc <xTaskCreateStatic+0xac>
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800309c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030a6:	2300      	movs	r3, #0
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f850 	bl	8003164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030c6:	f000 f8f3 	bl	80032b0 <prvAddNewTaskToReadyList>
 80030ca:	e001      	b.n	80030d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030d0:	697b      	ldr	r3, [r7, #20]
	}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3728      	adds	r7, #40	; 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b08c      	sub	sp, #48	; 0x30
 80030de:	af04      	add	r7, sp, #16
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 fc2a 	bl	8004948 <pvPortMalloc>
 80030f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030fc:	20a8      	movs	r0, #168	; 0xa8
 80030fe:	f001 fc23 	bl	8004948 <pvPortMalloc>
 8003102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
 8003110:	e005      	b.n	800311e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f001 fce4 	bl	8004ae0 <vPortFree>
 8003118:	e001      	b.n	800311e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d017      	beq.n	8003154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	2300      	movs	r3, #0
 8003130:	9303      	str	r3, [sp, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	9302      	str	r3, [sp, #8]
 8003136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f80e 	bl	8003164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003148:	69f8      	ldr	r0, [r7, #28]
 800314a:	f000 f8b1 	bl	80032b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e002      	b.n	800315a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800315a:	69bb      	ldr	r3, [r7, #24]
	}
 800315c:	4618      	mov	r0, r3
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	461a      	mov	r2, r3
 800317c:	21a5      	movs	r1, #165	; 0xa5
 800317e:	f001 fdcd 	bl	8004d1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800318c:	3b01      	subs	r3, #1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	617b      	str	r3, [r7, #20]
}
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e012      	b.n	80031ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	7819      	ldrb	r1, [r3, #0]
 80031d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	3334      	adds	r3, #52	; 0x34
 80031d8:	460a      	mov	r2, r1
 80031da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d9e9      	bls.n	80031c8 <prvInitialiseNewTask+0x64>
 80031f4:	e000      	b.n	80031f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80031f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	e003      	b.n	800320a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	2b37      	cmp	r3, #55	; 0x37
 800320e:	d901      	bls.n	8003214 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003210:	2337      	movs	r3, #55	; 0x37
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	2200      	movs	r2, #0
 8003224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	3304      	adds	r3, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f93e 	bl	80024ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	3318      	adds	r3, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f939 	bl	80024ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003252:	2200      	movs	r2, #0
 8003254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	3354      	adds	r3, #84	; 0x54
 8003264:	224c      	movs	r2, #76	; 0x4c
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fd57 	bl	8004d1c <memset>
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <prvInitialiseNewTask+0x140>)
 8003272:	659a      	str	r2, [r3, #88]	; 0x58
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	4a0c      	ldr	r2, [pc, #48]	; (80032a8 <prvInitialiseNewTask+0x144>)
 8003278:	65da      	str	r2, [r3, #92]	; 0x5c
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <prvInitialiseNewTask+0x148>)
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	68f9      	ldr	r1, [r7, #12]
 8003284:	69b8      	ldr	r0, [r7, #24]
 8003286:	f001 f90d 	bl	80044a4 <pxPortInitialiseStack>
 800328a:	4602      	mov	r2, r0
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800329c:	bf00      	nop
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20004afc 	.word	0x20004afc
 80032a8:	20004b64 	.word	0x20004b64
 80032ac:	20004bcc 	.word	0x20004bcc

080032b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032b8:	f001 fa24 	bl	8004704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <prvAddNewTaskToReadyList+0xc4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <prvAddNewTaskToReadyList+0xc4>)
 80032c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <prvAddNewTaskToReadyList+0xc8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032ce:	4a2a      	ldr	r2, [pc, #168]	; (8003378 <prvAddNewTaskToReadyList+0xc8>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <prvAddNewTaskToReadyList+0xc4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d110      	bne.n	80032fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032dc:	f000 fbf2 	bl	8003ac4 <prvInitialiseTaskLists>
 80032e0:	e00d      	b.n	80032fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <prvAddNewTaskToReadyList+0xcc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <prvAddNewTaskToReadyList+0xc8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d802      	bhi.n	80032fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032f8:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <prvAddNewTaskToReadyList+0xc8>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <prvAddNewTaskToReadyList+0xd0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <prvAddNewTaskToReadyList+0xd0>)
 8003306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <prvAddNewTaskToReadyList+0xd0>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <prvAddNewTaskToReadyList+0xd4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d903      	bls.n	8003324 <prvAddNewTaskToReadyList+0x74>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <prvAddNewTaskToReadyList+0xd4>)
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <prvAddNewTaskToReadyList+0xd8>)
 8003332:	441a      	add	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f7ff f8c3 	bl	80024c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003340:	f001 fa10 	bl	8004764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <prvAddNewTaskToReadyList+0xcc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvAddNewTaskToReadyList+0xc8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	429a      	cmp	r2, r3
 8003358:	d207      	bcs.n	800336a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <prvAddNewTaskToReadyList+0xdc>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000d7c 	.word	0x20000d7c
 8003378:	200008a8 	.word	0x200008a8
 800337c:	20000d88 	.word	0x20000d88
 8003380:	20000d98 	.word	0x20000d98
 8003384:	20000d84 	.word	0x20000d84
 8003388:	200008ac 	.word	0x200008ac
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800339e:	463a      	mov	r2, r7
 80033a0:	1d39      	adds	r1, r7, #4
 80033a2:	f107 0308 	add.w	r3, r7, #8
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f82c 	bl	8002404 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033ac:	6839      	ldr	r1, [r7, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	9202      	str	r2, [sp, #8]
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2300      	movs	r3, #0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	460a      	mov	r2, r1
 80033be:	4924      	ldr	r1, [pc, #144]	; (8003450 <vTaskStartScheduler+0xc0>)
 80033c0:	4824      	ldr	r0, [pc, #144]	; (8003454 <vTaskStartScheduler+0xc4>)
 80033c2:	f7ff fe2d 	bl	8003020 <xTaskCreateStatic>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <vTaskStartScheduler+0xc8>)
 80033ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <vTaskStartScheduler+0xc8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e001      	b.n	80033de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033e4:	f000 fd10 	bl	8003e08 <xTimerCreateTimerTask>
 80033e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d11b      	bne.n	8003428 <vTaskStartScheduler+0x98>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	613b      	str	r3, [r7, #16]
}
 8003402:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <vTaskStartScheduler+0xcc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3354      	adds	r3, #84	; 0x54
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <vTaskStartScheduler+0xd0>)
 800340c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <vTaskStartScheduler+0xd4>)
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <vTaskStartScheduler+0xd8>)
 8003418:	2201      	movs	r2, #1
 800341a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <vTaskStartScheduler+0xdc>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003422:	f001 f8cd 	bl	80045c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003426:	e00e      	b.n	8003446 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d10a      	bne.n	8003446 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	60fb      	str	r3, [r7, #12]
}
 8003442:	bf00      	nop
 8003444:	e7fe      	b.n	8003444 <vTaskStartScheduler+0xb4>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08004f18 	.word	0x08004f18
 8003454:	08003a95 	.word	0x08003a95
 8003458:	20000da0 	.word	0x20000da0
 800345c:	200008a8 	.word	0x200008a8
 8003460:	2000005c 	.word	0x2000005c
 8003464:	20000d9c 	.word	0x20000d9c
 8003468:	20000d88 	.word	0x20000d88
 800346c:	20000d80 	.word	0x20000d80

08003470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <vTaskSuspendAll+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a03      	ldr	r2, [pc, #12]	; (8003488 <vTaskSuspendAll+0x18>)
 800347c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000da4 	.word	0x20000da4

0800348c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800349a:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <xTaskResumeAll+0x118>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	603b      	str	r3, [r7, #0]
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034b8:	f001 f924 	bl	8004704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <xTaskResumeAll+0x118>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <xTaskResumeAll+0x118>)
 80034c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <xTaskResumeAll+0x118>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d162      	bne.n	8003594 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <xTaskResumeAll+0x11c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d05e      	beq.n	8003594 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d6:	e02f      	b.n	8003538 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <xTaskResumeAll+0x120>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3318      	adds	r3, #24
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f84b 	bl	8002580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f846 	bl	8002580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <xTaskResumeAll+0x124>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d903      	bls.n	8003508 <xTaskResumeAll+0x7c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <xTaskResumeAll+0x124>)
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <xTaskResumeAll+0x128>)
 8003516:	441a      	add	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe ffd1 	bl	80024c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <xTaskResumeAll+0x12c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <xTaskResumeAll+0x130>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <xTaskResumeAll+0x120>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1cb      	bne.n	80034d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003546:	f000 fb5f 	bl	8003c08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <xTaskResumeAll+0x134>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003556:	f000 f847 	bl	80035e8 <xTaskIncrementTick>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <xTaskResumeAll+0x130>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f1      	bne.n	8003556 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <xTaskResumeAll+0x134>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <xTaskResumeAll+0x130>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskResumeAll+0x138>)
 8003586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003594:	f001 f8e6 	bl	8004764 <vPortExitCritical>

	return xAlreadyYielded;
 8003598:	68bb      	ldr	r3, [r7, #8]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000da4 	.word	0x20000da4
 80035a8:	20000d7c 	.word	0x20000d7c
 80035ac:	20000d3c 	.word	0x20000d3c
 80035b0:	20000d84 	.word	0x20000d84
 80035b4:	200008ac 	.word	0x200008ac
 80035b8:	200008a8 	.word	0x200008a8
 80035bc:	20000d90 	.word	0x20000d90
 80035c0:	20000d8c 	.word	0x20000d8c
 80035c4:	e000ed04 	.word	0xe000ed04

080035c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <xTaskGetTickCount+0x1c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000d80 	.word	0x20000d80

080035e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f2:	4b4f      	ldr	r3, [pc, #316]	; (8003730 <xTaskIncrementTick+0x148>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 808f 	bne.w	800371a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <xTaskIncrementTick+0x14c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003604:	4a4b      	ldr	r2, [pc, #300]	; (8003734 <xTaskIncrementTick+0x14c>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d120      	bne.n	8003652 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003610:	4b49      	ldr	r3, [pc, #292]	; (8003738 <xTaskIncrementTick+0x150>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <xTaskIncrementTick+0x48>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	603b      	str	r3, [r7, #0]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <xTaskIncrementTick+0x46>
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <xTaskIncrementTick+0x150>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <xTaskIncrementTick+0x154>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <xTaskIncrementTick+0x150>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4a3f      	ldr	r2, [pc, #252]	; (800373c <xTaskIncrementTick+0x154>)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <xTaskIncrementTick+0x158>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a3d      	ldr	r2, [pc, #244]	; (8003740 <xTaskIncrementTick+0x158>)
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	f000 fadb 	bl	8003c08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003652:	4b3c      	ldr	r3, [pc, #240]	; (8003744 <xTaskIncrementTick+0x15c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	429a      	cmp	r2, r3
 800365a:	d349      	bcc.n	80036f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <xTaskIncrementTick+0x150>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <xTaskIncrementTick+0x15c>)
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	601a      	str	r2, [r3, #0]
					break;
 800366e:	e03f      	b.n	80036f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <xTaskIncrementTick+0x150>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d203      	bcs.n	8003690 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003688:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <xTaskIncrementTick+0x15c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800368e:	e02f      	b.n	80036f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	3304      	adds	r3, #4
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe ff73 	bl	8002580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3318      	adds	r3, #24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe ff6a 	bl	8002580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <xTaskIncrementTick+0x160>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d903      	bls.n	80036c0 <xTaskIncrementTick+0xd8>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <xTaskIncrementTick+0x160>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <xTaskIncrementTick+0x164>)
 80036ce:	441a      	add	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7fe fef5 	bl	80024c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <xTaskIncrementTick+0x168>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d3b8      	bcc.n	800365c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ee:	e7b5      	b.n	800365c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <xTaskIncrementTick+0x168>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4915      	ldr	r1, [pc, #84]	; (800374c <xTaskIncrementTick+0x164>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d901      	bls.n	800370c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <xTaskIncrementTick+0x16c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e004      	b.n	8003724 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <xTaskIncrementTick+0x170>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <xTaskIncrementTick+0x170>)
 8003722:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003724:	697b      	ldr	r3, [r7, #20]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000da4 	.word	0x20000da4
 8003734:	20000d80 	.word	0x20000d80
 8003738:	20000d34 	.word	0x20000d34
 800373c:	20000d38 	.word	0x20000d38
 8003740:	20000d94 	.word	0x20000d94
 8003744:	20000d9c 	.word	0x20000d9c
 8003748:	20000d84 	.word	0x20000d84
 800374c:	200008ac 	.word	0x200008ac
 8003750:	200008a8 	.word	0x200008a8
 8003754:	20000d90 	.word	0x20000d90
 8003758:	20000d8c 	.word	0x20000d8c

0800375c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003762:	4b2a      	ldr	r3, [pc, #168]	; (800380c <vTaskSwitchContext+0xb0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800376a:	4b29      	ldr	r3, [pc, #164]	; (8003810 <vTaskSwitchContext+0xb4>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003770:	e046      	b.n	8003800 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <vTaskSwitchContext+0xb4>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003778:	4b26      	ldr	r3, [pc, #152]	; (8003814 <vTaskSwitchContext+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e010      	b.n	80037a2 <vTaskSwitchContext+0x46>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <vTaskSwitchContext+0x40>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	607b      	str	r3, [r7, #4]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <vTaskSwitchContext+0x3e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	491d      	ldr	r1, [pc, #116]	; (8003818 <vTaskSwitchContext+0xbc>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0e4      	beq.n	8003780 <vTaskSwitchContext+0x24>
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <vTaskSwitchContext+0xbc>)
 80037c2:	4413      	add	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	3308      	adds	r3, #8
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <vTaskSwitchContext+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <vTaskSwitchContext+0xc0>)
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <vTaskSwitchContext+0xb8>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <vTaskSwitchContext+0xc0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3354      	adds	r3, #84	; 0x54
 80037fc:	4a08      	ldr	r2, [pc, #32]	; (8003820 <vTaskSwitchContext+0xc4>)
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000da4 	.word	0x20000da4
 8003810:	20000d90 	.word	0x20000d90
 8003814:	20000d84 	.word	0x20000d84
 8003818:	200008ac 	.word	0x200008ac
 800381c:	200008a8 	.word	0x200008a8
 8003820:	2000005c 	.word	0x2000005c

08003824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60fb      	str	r3, [r7, #12]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <vTaskPlaceOnEventList+0x44>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3318      	adds	r3, #24
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fe5b 	bl	800250e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003858:	2101      	movs	r1, #1
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f000 fa80 	bl	8003d60 <prvAddCurrentTaskToDelayedList>
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200008a8 	.word	0x200008a8

0800386c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	617b      	str	r3, [r7, #20]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3318      	adds	r3, #24
 800389a:	4619      	mov	r1, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7fe fe12 	bl	80024c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80038a8:	f04f 33ff 	mov.w	r3, #4294967295
 80038ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	68b8      	ldr	r0, [r7, #8]
 80038b2:	f000 fa55 	bl	8003d60 <prvAddCurrentTaskToDelayedList>
	}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200008a8 	.word	0x200008a8

080038c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fe43 	bl	8002580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fa:	4b1e      	ldr	r3, [pc, #120]	; (8003974 <xTaskRemoveFromEventList+0xb0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11d      	bne.n	800393e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3304      	adds	r3, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fe3a 	bl	8002580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <xTaskRemoveFromEventList+0xb4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d903      	bls.n	8003920 <xTaskRemoveFromEventList+0x5c>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <xTaskRemoveFromEventList+0xb4>)
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <xTaskRemoveFromEventList+0xb8>)
 800392e:	441a      	add	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7fe fdc5 	bl	80024c6 <vListInsertEnd>
 800393c:	e005      	b.n	800394a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3318      	adds	r3, #24
 8003942:	4619      	mov	r1, r3
 8003944:	480e      	ldr	r0, [pc, #56]	; (8003980 <xTaskRemoveFromEventList+0xbc>)
 8003946:	f7fe fdbe 	bl	80024c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <xTaskRemoveFromEventList+0xc0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	429a      	cmp	r2, r3
 8003956:	d905      	bls.n	8003964 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003958:	2301      	movs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <xTaskRemoveFromEventList+0xc4>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e001      	b.n	8003968 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003968:	697b      	ldr	r3, [r7, #20]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000da4 	.word	0x20000da4
 8003978:	20000d84 	.word	0x20000d84
 800397c:	200008ac 	.word	0x200008ac
 8003980:	20000d3c 	.word	0x20000d3c
 8003984:	200008a8 	.word	0x200008a8
 8003988:	20000d90 	.word	0x20000d90

0800398c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <vTaskInternalSetTimeOutState+0x24>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <vTaskInternalSetTimeOutState+0x28>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000d94 	.word	0x20000d94
 80039b4:	20000d80 	.word	0x20000d80

080039b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	613b      	str	r3, [r7, #16]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60fb      	str	r3, [r7, #12]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80039fa:	f000 fe83 	bl	8004704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <xTaskCheckForTimeOut+0xbc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d102      	bne.n	8003a1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e023      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <xTaskCheckForTimeOut+0xc0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d007      	beq.n	8003a3a <xTaskCheckForTimeOut+0x82>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e015      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d20b      	bcs.n	8003a5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff9b 	bl	800398c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e004      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a66:	f000 fe7d 	bl	8004764 <vPortExitCritical>

	return xReturn;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000d80 	.word	0x20000d80
 8003a78:	20000d94 	.word	0x20000d94

08003a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <vTaskMissedYield+0x14>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20000d90 	.word	0x20000d90

08003a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a9c:	f000 f852 	bl	8003b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvIdleTask+0x28>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d9f9      	bls.n	8003a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <prvIdleTask+0x2c>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ab8:	e7f0      	b.n	8003a9c <prvIdleTask+0x8>
 8003aba:	bf00      	nop
 8003abc:	200008ac 	.word	0x200008ac
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e00c      	b.n	8003aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <prvInitialiseTaskLists+0x60>)
 8003adc:	4413      	add	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fcc4 	bl	800246c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b37      	cmp	r3, #55	; 0x37
 8003aee:	d9ef      	bls.n	8003ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003af0:	480d      	ldr	r0, [pc, #52]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003af2:	f7fe fcbb 	bl	800246c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003af8:	f7fe fcb8 	bl	800246c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <prvInitialiseTaskLists+0x6c>)
 8003afe:	f7fe fcb5 	bl	800246c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <prvInitialiseTaskLists+0x70>)
 8003b04:	f7fe fcb2 	bl	800246c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <prvInitialiseTaskLists+0x74>)
 8003b0a:	f7fe fcaf 	bl	800246c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <prvInitialiseTaskLists+0x78>)
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvInitialiseTaskLists+0x7c>)
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200008ac 	.word	0x200008ac
 8003b28:	20000d0c 	.word	0x20000d0c
 8003b2c:	20000d20 	.word	0x20000d20
 8003b30:	20000d3c 	.word	0x20000d3c
 8003b34:	20000d50 	.word	0x20000d50
 8003b38:	20000d68 	.word	0x20000d68
 8003b3c:	20000d34 	.word	0x20000d34
 8003b40:	20000d38 	.word	0x20000d38

08003b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b4a:	e019      	b.n	8003b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b4c:	f000 fdda 	bl	8004704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <prvCheckTasksWaitingTermination+0x50>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fd0f 	bl	8002580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b76:	f000 fdf5 	bl	8004764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f810 	bl	8003ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e1      	bne.n	8003b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000d50 	.word	0x20000d50
 8003b98:	20000d7c 	.word	0x20000d7c
 8003b9c:	20000d64 	.word	0x20000d64

08003ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3354      	adds	r3, #84	; 0x54
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f8bd 	bl	8004d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ff8d 	bl	8004ae0 <vPortFree>
				vPortFree( pxTCB );
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 ff8a 	bl	8004ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bcc:	e018      	b.n	8003c00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d103      	bne.n	8003be0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 ff81 	bl	8004ae0 <vPortFree>
	}
 8003bde:	e00f      	b.n	8003c00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d00a      	beq.n	8003c00 <prvDeleteTCB+0x60>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <prvDeleteTCB+0x5e>
	}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <prvResetNextTaskUnblockTime+0x38>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <prvResetNextTaskUnblockTime+0x3c>)
 8003c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c20:	e008      	b.n	8003c34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <prvResetNextTaskUnblockTime+0x38>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <prvResetNextTaskUnblockTime+0x3c>)
 8003c32:	6013      	str	r3, [r2, #0]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	20000d34 	.word	0x20000d34
 8003c44:	20000d9c 	.word	0x20000d9c

08003c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <xTaskGetSchedulerState+0x34>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c56:	2301      	movs	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	e008      	b.n	8003c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <xTaskGetSchedulerState+0x38>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c64:	2302      	movs	r3, #2
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	e001      	b.n	8003c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c6e:	687b      	ldr	r3, [r7, #4]
	}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	20000d88 	.word	0x20000d88
 8003c80:	20000da4 	.word	0x20000da4

08003c84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d056      	beq.n	8003d48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <xTaskPriorityDisinherit+0xd0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d00a      	beq.n	8003cba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60fb      	str	r3, [r7, #12]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60bb      	str	r3, [r7, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d02c      	beq.n	8003d48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d128      	bne.n	8003d48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fc40 	bl	8002580 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <xTaskPriorityDisinherit+0xd4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d903      	bls.n	8003d28 <xTaskPriorityDisinherit+0xa4>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <xTaskPriorityDisinherit+0xd4>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <xTaskPriorityDisinherit+0xd8>)
 8003d36:	441a      	add	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f7fe fbc1 	bl	80024c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d48:	697b      	ldr	r3, [r7, #20]
	}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200008a8 	.word	0x200008a8
 8003d58:	20000d84 	.word	0x20000d84
 8003d5c:	200008ac 	.word	0x200008ac

08003d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d6a:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3304      	adds	r3, #4
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fc02 	bl	8002580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d10a      	bne.n	8003d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4819      	ldr	r0, [pc, #100]	; (8003df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d94:	f7fe fb97 	bl	80024c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d98:	e026      	b.n	8003de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d209      	bcs.n	8003dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7fe fba5 	bl	800250e <vListInsert>
}
 8003dc4:	e010      	b.n	8003de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7fe fb9b 	bl	800250e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d202      	bcs.n	8003de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6013      	str	r3, [r2, #0]
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000d80 	.word	0x20000d80
 8003df4:	200008a8 	.word	0x200008a8
 8003df8:	20000d68 	.word	0x20000d68
 8003dfc:	20000d38 	.word	0x20000d38
 8003e00:	20000d34 	.word	0x20000d34
 8003e04:	20000d9c 	.word	0x20000d9c

08003e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e12:	f000 fb07 	bl	8004424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <xTimerCreateTimerTask+0x80>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d021      	beq.n	8003e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e26:	1d3a      	adds	r2, r7, #4
 8003e28:	f107 0108 	add.w	r1, r7, #8
 8003e2c:	f107 030c 	add.w	r3, r7, #12
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fb01 	bl	8002438 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	2302      	movs	r3, #2
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	460a      	mov	r2, r1
 8003e48:	4910      	ldr	r1, [pc, #64]	; (8003e8c <xTimerCreateTimerTask+0x84>)
 8003e4a:	4811      	ldr	r0, [pc, #68]	; (8003e90 <xTimerCreateTimerTask+0x88>)
 8003e4c:	f7ff f8e8 	bl	8003020 <xTaskCreateStatic>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <xTimerCreateTimerTask+0x8c>)
 8003e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <xTimerCreateTimerTask+0x8c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	613b      	str	r3, [r7, #16]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000dd8 	.word	0x20000dd8
 8003e8c:	08004f20 	.word	0x08004f20
 8003e90:	08003fcd 	.word	0x08003fcd
 8003e94:	20000ddc 	.word	0x20000ddc

08003e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	623b      	str	r3, [r7, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ec6:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <xTimerGenericCommand+0x98>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02a      	beq.n	8003f24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	dc18      	bgt.n	8003f12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ee0:	f7ff feb2 	bl	8003c48 <xTaskGetSchedulerState>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d109      	bne.n	8003efe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <xTimerGenericCommand+0x98>)
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	f107 0110 	add.w	r1, r7, #16
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	f7fe fcab 	bl	8002850 <xQueueGenericSend>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24
 8003efc:	e012      	b.n	8003f24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <xTimerGenericCommand+0x98>)
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	f107 0110 	add.w	r1, r7, #16
 8003f06:	2300      	movs	r3, #0
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f7fe fca1 	bl	8002850 <xQueueGenericSend>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f10:	e008      	b.n	8003f24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <xTimerGenericCommand+0x98>)
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	f107 0110 	add.w	r1, r7, #16
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	f7fe fd95 	bl	8002a4c <xQueueGenericSendFromISR>
 8003f22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000dd8 	.word	0x20000dd8

08003f34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <prvProcessExpiredTimer+0x94>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fb17 	bl	8002580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d022      	beq.n	8003fa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	18d1      	adds	r1, r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6978      	ldr	r0, [r7, #20]
 8003f6e:	f000 f8d1 	bl	8004114 <prvInsertTimerInActiveList>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01f      	beq.n	8003fb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	2100      	movs	r1, #0
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff88 	bl	8003e98 <xTimerGenericCommand>
 8003f88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d113      	bne.n	8003fb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	6978      	ldr	r0, [r7, #20]
 8003fbe:	4798      	blx	r3
}
 8003fc0:	bf00      	nop
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000dd0 	.word	0x20000dd0

08003fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f857 	bl	800408c <prvGetNextExpireTime>
 8003fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f803 	bl	8003ff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fea:	f000 f8d5 	bl	8004198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fee:	e7f1      	b.n	8003fd4 <prvTimerTask+0x8>

08003ff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ffa:	f7ff fa39 	bl	8003470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f866 	bl	80040d4 <prvSampleTimeNow>
 8004008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d130      	bne.n	8004072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10a      	bne.n	800402c <prvProcessTimerOrBlockTask+0x3c>
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	429a      	cmp	r2, r3
 800401c:	d806      	bhi.n	800402c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800401e:	f7ff fa35 	bl	800348c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff85 	bl	8003f34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800402a:	e024      	b.n	8004076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <prvProcessTimerOrBlockTask+0x90>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <prvProcessTimerOrBlockTask+0x50>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <prvProcessTimerOrBlockTask+0x52>
 8004040:	2300      	movs	r3, #0
 8004042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <prvProcessTimerOrBlockTask+0x94>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	f7fe ffb1 	bl	8002fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004056:	f7ff fa19 	bl	800348c <xTaskResumeAll>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <prvProcessTimerOrBlockTask+0x98>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
}
 8004070:	e001      	b.n	8004076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004072:	f7ff fa0b 	bl	800348c <xTaskResumeAll>
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000dd4 	.word	0x20000dd4
 8004084:	20000dd8 	.word	0x20000dd8
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <prvGetNextExpireTime+0x44>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <prvGetNextExpireTime+0x16>
 800409e:	2201      	movs	r2, #1
 80040a0:	e000      	b.n	80040a4 <prvGetNextExpireTime+0x18>
 80040a2:	2200      	movs	r2, #0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <prvGetNextExpireTime+0x44>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e001      	b.n	80040c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040c0:	68fb      	ldr	r3, [r7, #12]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000dd0 	.word	0x20000dd0

080040d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040dc:	f7ff fa74 	bl	80035c8 <xTaskGetTickCount>
 80040e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <prvSampleTimeNow+0x3c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d205      	bcs.n	80040f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040ec:	f000 f936 	bl	800435c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e002      	b.n	80040fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <prvSampleTimeNow+0x3c>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000de0 	.word	0x20000de0

08004114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d812      	bhi.n	8004160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e01b      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <prvInsertTimerInActiveList+0x7c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe f9d8 	bl	800250e <vListInsert>
 800415e:	e012      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d206      	bcs.n	8004176 <prvInsertTimerInActiveList+0x62>
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e007      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <prvInsertTimerInActiveList+0x80>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7fe f9c4 	bl	800250e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000dd4 	.word	0x20000dd4
 8004194:	20000dd0 	.word	0x20000dd0

08004198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08e      	sub	sp, #56	; 0x38
 800419c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800419e:	e0ca      	b.n	8004336 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da18      	bge.n	80041d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	3304      	adds	r3, #4
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	61fb      	str	r3, [r7, #28]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ce:	6850      	ldr	r0, [r2, #4]
 80041d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f2c0 80ab 	blt.w	8004336 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	3304      	adds	r3, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fe f9c5 	bl	8002580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041f6:	463b      	mov	r3, r7
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff6b 	bl	80040d4 <prvSampleTimeNow>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b09      	cmp	r3, #9
 8004204:	f200 8096 	bhi.w	8004334 <prvProcessReceivedCommands+0x19c>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <prvProcessReceivedCommands+0x78>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004239 	.word	0x08004239
 8004214:	08004239 	.word	0x08004239
 8004218:	08004239 	.word	0x08004239
 800421c:	080042ad 	.word	0x080042ad
 8004220:	080042c1 	.word	0x080042c1
 8004224:	0800430b 	.word	0x0800430b
 8004228:	08004239 	.word	0x08004239
 800422c:	08004239 	.word	0x08004239
 8004230:	080042ad 	.word	0x080042ad
 8004234:	080042c1 	.word	0x080042c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	18d1      	adds	r1, r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004258:	f7ff ff5c 	bl	8004114 <prvInsertTimerInActiveList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d069      	beq.n	8004336 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d05e      	beq.n	8004336 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	441a      	add	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	2100      	movs	r1, #0
 8004288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428a:	f7ff fe05 	bl	8003e98 <xTimerGenericCommand>
 800428e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d14f      	bne.n	8004336 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	61bb      	str	r3, [r7, #24]
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80042be:	e03a      	b.n	8004336 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	617b      	str	r3, [r7, #20]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	18d1      	adds	r1, r2, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004304:	f7ff ff06 	bl	8004114 <prvInsertTimerInActiveList>
					break;
 8004308:	e015      	b.n	8004336 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800431a:	f000 fbe1 	bl	8004ae0 <vPortFree>
 800431e:	e00a      	b.n	8004336 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	b2da      	uxtb	r2, r3
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004332:	e000      	b.n	8004336 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <prvProcessReceivedCommands+0x1c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	1d39      	adds	r1, r7, #4
 800433c:	2200      	movs	r2, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fc20 	bl	8002b84 <xQueueReceive>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af2a 	bne.w	80041a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3730      	adds	r7, #48	; 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000dd8 	.word	0x20000dd8

0800435c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004362:	e048      	b.n	80043f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <prvSwitchTimerLists+0xc0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436e:	4b2b      	ldr	r3, [pc, #172]	; (800441c <prvSwitchTimerLists+0xc0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe f8ff 	bl	8002580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02e      	beq.n	80043f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90e      	bls.n	80043c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b6:	4b19      	ldr	r3, [pc, #100]	; (800441c <prvSwitchTimerLists+0xc0>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fe f8a4 	bl	800250e <vListInsert>
 80043c6:	e016      	b.n	80043f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2300      	movs	r3, #0
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	2100      	movs	r1, #0
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff fd60 	bl	8003e98 <xTimerGenericCommand>
 80043d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	603b      	str	r3, [r7, #0]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <prvSwitchTimerLists+0xc0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1b1      	bne.n	8004364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <prvSwitchTimerLists+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <prvSwitchTimerLists+0xc4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a04      	ldr	r2, [pc, #16]	; (800441c <prvSwitchTimerLists+0xc0>)
 800440c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800440e:	4a04      	ldr	r2, [pc, #16]	; (8004420 <prvSwitchTimerLists+0xc4>)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000dd0 	.word	0x20000dd0
 8004420:	20000dd4 	.word	0x20000dd4

08004424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800442a:	f000 f96b 	bl	8004704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <prvCheckForValidListAndQueue+0x60>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d120      	bne.n	8004478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004436:	4814      	ldr	r0, [pc, #80]	; (8004488 <prvCheckForValidListAndQueue+0x64>)
 8004438:	f7fe f818 	bl	800246c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800443c:	4813      	ldr	r0, [pc, #76]	; (800448c <prvCheckForValidListAndQueue+0x68>)
 800443e:	f7fe f815 	bl	800246c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <prvCheckForValidListAndQueue+0x6c>)
 8004444:	4a10      	ldr	r2, [pc, #64]	; (8004488 <prvCheckForValidListAndQueue+0x64>)
 8004446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <prvCheckForValidListAndQueue+0x70>)
 800444a:	4a10      	ldr	r2, [pc, #64]	; (800448c <prvCheckForValidListAndQueue+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <prvCheckForValidListAndQueue+0x74>)
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <prvCheckForValidListAndQueue+0x78>)
 8004456:	2110      	movs	r1, #16
 8004458:	200a      	movs	r0, #10
 800445a:	f7fe f923 	bl	80026a4 <xQueueGenericCreateStatic>
 800445e:	4603      	mov	r3, r0
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <prvCheckForValidListAndQueue+0x60>)
 8004462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvCheckForValidListAndQueue+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <prvCheckForValidListAndQueue+0x60>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	490b      	ldr	r1, [pc, #44]	; (80044a0 <prvCheckForValidListAndQueue+0x7c>)
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fd76 	bl	8002f64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004478:	f000 f974 	bl	8004764 <vPortExitCritical>
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000dd8 	.word	0x20000dd8
 8004488:	20000da8 	.word	0x20000da8
 800448c:	20000dbc 	.word	0x20000dbc
 8004490:	20000dd0 	.word	0x20000dd0
 8004494:	20000dd4 	.word	0x20000dd4
 8004498:	20000e84 	.word	0x20000e84
 800449c:	20000de4 	.word	0x20000de4
 80044a0:	08004f28 	.word	0x08004f28

080044a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0201 	bic.w	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3b04      	subs	r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <pxPortInitialiseStack+0x64>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b14      	subs	r3, #20
 80044de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f06f 0202 	mvn.w	r2, #2
 80044f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b20      	subs	r3, #32
 80044f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	0800450d 	.word	0x0800450d

0800450c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <prvTaskExitError+0x54>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d00a      	beq.n	8004536 <prvTaskExitError+0x2a>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <prvTaskExitError+0x28>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	60bb      	str	r3, [r7, #8]
}
 8004548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800454a:	bf00      	nop
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0fc      	beq.n	800454c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000000c 	.word	0x2000000c
	...

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	4770      	bx	lr
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst2>:
 8004590:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <prvPortStartFirstTask+0x24>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8814 	msr	CONTROL, r0
 80045aa:	b662      	cpsie	i
 80045ac:	b661      	cpsie	f
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	df00      	svc	0
 80045b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ba:	bf00      	nop
 80045bc:	e000ed08 	.word	0xe000ed08

080045c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <xPortStartScheduler+0x120>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a46      	ldr	r2, [pc, #280]	; (80046e4 <xPortStartScheduler+0x124>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d10a      	bne.n	80045e6 <xPortStartScheduler+0x26>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <xPortStartScheduler+0x120>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <xPortStartScheduler+0x128>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10a      	bne.n	8004606 <xPortStartScheduler+0x46>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <xPortStartScheduler+0x12c>)
 8004608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <xPortStartScheduler+0x130>)
 800462c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <xPortStartScheduler+0x134>)
 8004630:	2207      	movs	r2, #7
 8004632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004634:	e009      	b.n	800464a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <xPortStartScheduler+0x134>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3b01      	subs	r3, #1
 800463c:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <xPortStartScheduler+0x134>)
 800463e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d0ef      	beq.n	8004636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <xPortStartScheduler+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1c3 0307 	rsb	r3, r3, #7
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00a      	beq.n	8004678 <xPortStartScheduler+0xb8>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60bb      	str	r3, [r7, #8]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <xPortStartScheduler+0x134>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <xPortStartScheduler+0x134>)
 8004680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <xPortStartScheduler+0x134>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800468a:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <xPortStartScheduler+0x134>)
 800468c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004696:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <xPortStartScheduler+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <xPortStartScheduler+0x138>)
 800469c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <xPortStartScheduler+0x138>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <xPortStartScheduler+0x138>)
 80046a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046ae:	f000 f8dd 	bl	800486c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <xPortStartScheduler+0x13c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046b8:	f000 f8fc 	bl	80048b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <xPortStartScheduler+0x140>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0f      	ldr	r2, [pc, #60]	; (8004700 <xPortStartScheduler+0x140>)
 80046c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046c8:	f7ff ff66 	bl	8004598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046cc:	f7ff f846 	bl	800375c <vTaskSwitchContext>
	prvTaskExitError();
 80046d0:	f7ff ff1c 	bl	800450c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed00 	.word	0xe000ed00
 80046e4:	410fc271 	.word	0x410fc271
 80046e8:	410fc270 	.word	0x410fc270
 80046ec:	e000e400 	.word	0xe000e400
 80046f0:	20000ed4 	.word	0x20000ed4
 80046f4:	20000ed8 	.word	0x20000ed8
 80046f8:	e000ed20 	.word	0xe000ed20
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	e000ef34 	.word	0xe000ef34

08004704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	607b      	str	r3, [r7, #4]
}
 800471c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <vPortEnterCritical+0x58>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3301      	adds	r3, #1
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <vPortEnterCritical+0x58>)
 8004726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <vPortEnterCritical+0x58>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10f      	bne.n	8004750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <vPortEnterCritical+0x5c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <vPortEnterCritical+0x4c>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	603b      	str	r3, [r7, #0]
}
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <vPortEnterCritical+0x4a>
	}
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	2000000c 	.word	0x2000000c
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <vPortExitCritical+0x50>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <vPortExitCritical+0x24>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <vPortExitCritical+0x50>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3b01      	subs	r3, #1
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <vPortExitCritical+0x50>)
 8004790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <vPortExitCritical+0x50>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <vPortExitCritical+0x42>
 800479a:	2300      	movs	r3, #0
 800479c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f383 8811 	msr	BASEPRI, r3
}
 80047a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c
	...

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f01e 0f10 	tst.w	lr, #16
 80047d0:	bf08      	it	eq
 80047d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7fe ffb4 	bl	800375c <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004806:	f01e 0f10 	tst.w	lr, #16
 800480a:	bf08      	it	eq
 800480c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004810:	f380 8809 	msr	PSP, r0
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst>:
 8004820:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004842:	f7fe fed1 	bl	80035e8 <xTaskIncrementTick>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <xPortSysTickHandler+0x40>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
}
 800485e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <vPortSetupTimerInterrupt+0x38>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <vPortSetupTimerInterrupt+0x40>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <vPortSetupTimerInterrupt+0x44>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010
 80048a4:	e000e018 	.word	0xe000e018
 80048a8:	20000000 	.word	0x20000000
 80048ac:	10624dd3 	.word	0x10624dd3
 80048b0:	e000e014 	.word	0xe000e014

080048b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048c4 <vPortEnableVFP+0x10>
 80048b8:	6801      	ldr	r1, [r0, #0]
 80048ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048be:	6001      	str	r1, [r0, #0]
 80048c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048c2:	bf00      	nop
 80048c4:	e000ed88 	.word	0xe000ed88

080048c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048ce:	f3ef 8305 	mrs	r3, IPSR
 80048d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d914      	bls.n	8004904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048da:	4a17      	ldr	r2, [pc, #92]	; (8004938 <vPortValidateInterruptPriority+0x70>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048e4:	4b15      	ldr	r3, [pc, #84]	; (800493c <vPortValidateInterruptPriority+0x74>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	7afa      	ldrb	r2, [r7, #11]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d20a      	bcs.n	8004904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	607b      	str	r3, [r7, #4]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <vPortValidateInterruptPriority+0x78>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <vPortValidateInterruptPriority+0x7c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d90a      	bls.n	800492a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	603b      	str	r3, [r7, #0]
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <vPortValidateInterruptPriority+0x60>
	}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000e3f0 	.word	0xe000e3f0
 800493c:	20000ed4 	.word	0x20000ed4
 8004940:	e000ed0c 	.word	0xe000ed0c
 8004944:	20000ed8 	.word	0x20000ed8

08004948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004954:	f7fe fd8c 	bl	8003470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <pvPortMalloc+0x180>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004960:	f000 f920 	bl	8004ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004964:	4b59      	ldr	r3, [pc, #356]	; (8004acc <pvPortMalloc+0x184>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 8093 	bne.w	8004a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01d      	beq.n	80049b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004978:	2208      	movs	r2, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d014      	beq.n	80049b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <pvPortMalloc+0x6c>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	617b      	str	r3, [r7, #20]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d06e      	beq.n	8004a98 <pvPortMalloc+0x150>
 80049ba:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <pvPortMalloc+0x188>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d869      	bhi.n	8004a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049c4:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <pvPortMalloc+0x18c>)
 80049c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049c8:	4b42      	ldr	r3, [pc, #264]	; (8004ad4 <pvPortMalloc+0x18c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ce:	e004      	b.n	80049da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d903      	bls.n	80049ec <pvPortMalloc+0xa4>
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f1      	bne.n	80049d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <pvPortMalloc+0x180>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d050      	beq.n	8004a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2208      	movs	r2, #8
 80049fc:	4413      	add	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad2      	subs	r2, r2, r3
 8004a10:	2308      	movs	r3, #8
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d91f      	bls.n	8004a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <pvPortMalloc+0xf8>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	613b      	str	r3, [r7, #16]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	f000 f908 	bl	8004c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a58:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <pvPortMalloc+0x188>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <pvPortMalloc+0x188>)
 8004a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <pvPortMalloc+0x188>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <pvPortMalloc+0x190>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d203      	bcs.n	8004a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <pvPortMalloc+0x188>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <pvPortMalloc+0x190>)
 8004a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <pvPortMalloc+0x184>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <pvPortMalloc+0x194>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	4a11      	ldr	r2, [pc, #68]	; (8004adc <pvPortMalloc+0x194>)
 8004a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a98:	f7fe fcf8 	bl	800348c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <pvPortMalloc+0x174>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60fb      	str	r3, [r7, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <pvPortMalloc+0x172>
	return pvReturn;
 8004abc:	69fb      	ldr	r3, [r7, #28]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3728      	adds	r7, #40	; 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20004ae4 	.word	0x20004ae4
 8004acc:	20004af8 	.word	0x20004af8
 8004ad0:	20004ae8 	.word	0x20004ae8
 8004ad4:	20004adc 	.word	0x20004adc
 8004ad8:	20004aec 	.word	0x20004aec
 8004adc:	20004af0 	.word	0x20004af0

08004ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04d      	beq.n	8004b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004af2:	2308      	movs	r3, #8
 8004af4:	425b      	negs	r3, r3
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4413      	add	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <vPortFree+0xb8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <vPortFree+0x44>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <vPortFree+0x62>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60bb      	str	r3, [r7, #8]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <vPortFree+0xb8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01e      	beq.n	8004b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d11a      	bne.n	8004b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <vPortFree+0xb8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	401a      	ands	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b68:	f7fe fc82 	bl	8003470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <vPortFree+0xbc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <vPortFree+0xbc>)
 8004b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b7a:	6938      	ldr	r0, [r7, #16]
 8004b7c:	f000 f874 	bl	8004c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <vPortFree+0xc0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <vPortFree+0xc0>)
 8004b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b8a:	f7fe fc7f 	bl	800348c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20004af8 	.word	0x20004af8
 8004b9c:	20004ae8 	.word	0x20004ae8
 8004ba0:	20004af4 	.word	0x20004af4

08004ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004baa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <prvHeapInit+0xac>)
 8004bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <prvHeapInit+0xac>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <prvHeapInit+0xb0>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <prvHeapInit+0xb0>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4413      	add	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <prvHeapInit+0xb4>)
 8004c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prvHeapInit+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <prvHeapInit+0xb4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <prvHeapInit+0xb4>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <prvHeapInit+0xb8>)
 8004c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <prvHeapInit+0xbc>)
 8004c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvHeapInit+0xc0>)
 8004c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	20000edc 	.word	0x20000edc
 8004c54:	20004adc 	.word	0x20004adc
 8004c58:	20004ae4 	.word	0x20004ae4
 8004c5c:	20004aec 	.word	0x20004aec
 8004c60:	20004ae8 	.word	0x20004ae8
 8004c64:	20004af8 	.word	0x20004af8

08004c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c70:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <prvInsertBlockIntoFreeList+0xac>)
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e002      	b.n	8004c7c <prvInsertBlockIntoFreeList+0x14>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d8f7      	bhi.n	8004c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d108      	bne.n	8004caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d118      	bne.n	8004cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d00d      	beq.n	8004ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e008      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e003      	b.n	8004cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d002      	beq.n	8004d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20004adc 	.word	0x20004adc
 8004d18:	20004ae4 	.word	0x20004ae4

08004d1c <memset>:
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <_reclaim_reent>:
 8004d2c:	4b29      	ldr	r3, [pc, #164]	; (8004dd4 <_reclaim_reent+0xa8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4283      	cmp	r3, r0
 8004d32:	b570      	push	{r4, r5, r6, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	d04b      	beq.n	8004dd0 <_reclaim_reent+0xa4>
 8004d38:	69c3      	ldr	r3, [r0, #28]
 8004d3a:	b143      	cbz	r3, 8004d4e <_reclaim_reent+0x22>
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d144      	bne.n	8004dcc <_reclaim_reent+0xa0>
 8004d42:	69e3      	ldr	r3, [r4, #28]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	b111      	cbz	r1, 8004d4e <_reclaim_reent+0x22>
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 f879 	bl	8004e40 <_free_r>
 8004d4e:	6961      	ldr	r1, [r4, #20]
 8004d50:	b111      	cbz	r1, 8004d58 <_reclaim_reent+0x2c>
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f874 	bl	8004e40 <_free_r>
 8004d58:	69e1      	ldr	r1, [r4, #28]
 8004d5a:	b111      	cbz	r1, 8004d62 <_reclaim_reent+0x36>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 f86f 	bl	8004e40 <_free_r>
 8004d62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d64:	b111      	cbz	r1, 8004d6c <_reclaim_reent+0x40>
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f86a 	bl	8004e40 <_free_r>
 8004d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6e:	b111      	cbz	r1, 8004d76 <_reclaim_reent+0x4a>
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 f865 	bl	8004e40 <_free_r>
 8004d76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d78:	b111      	cbz	r1, 8004d80 <_reclaim_reent+0x54>
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f860 	bl	8004e40 <_free_r>
 8004d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d82:	b111      	cbz	r1, 8004d8a <_reclaim_reent+0x5e>
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 f85b 	bl	8004e40 <_free_r>
 8004d8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d8c:	b111      	cbz	r1, 8004d94 <_reclaim_reent+0x68>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 f856 	bl	8004e40 <_free_r>
 8004d94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d96:	b111      	cbz	r1, 8004d9e <_reclaim_reent+0x72>
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 f851 	bl	8004e40 <_free_r>
 8004d9e:	6a23      	ldr	r3, [r4, #32]
 8004da0:	b1b3      	cbz	r3, 8004dd0 <_reclaim_reent+0xa4>
 8004da2:	4620      	mov	r0, r4
 8004da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004da8:	4718      	bx	r3
 8004daa:	5949      	ldr	r1, [r1, r5]
 8004dac:	b941      	cbnz	r1, 8004dc0 <_reclaim_reent+0x94>
 8004dae:	3504      	adds	r5, #4
 8004db0:	69e3      	ldr	r3, [r4, #28]
 8004db2:	2d80      	cmp	r5, #128	; 0x80
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	d1f8      	bne.n	8004daa <_reclaim_reent+0x7e>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f841 	bl	8004e40 <_free_r>
 8004dbe:	e7c0      	b.n	8004d42 <_reclaim_reent+0x16>
 8004dc0:	680e      	ldr	r6, [r1, #0]
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f83c 	bl	8004e40 <_free_r>
 8004dc8:	4631      	mov	r1, r6
 8004dca:	e7ef      	b.n	8004dac <_reclaim_reent+0x80>
 8004dcc:	2500      	movs	r5, #0
 8004dce:	e7ef      	b.n	8004db0 <_reclaim_reent+0x84>
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000005c 	.word	0x2000005c

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4d0d      	ldr	r5, [pc, #52]	; (8004e10 <__libc_init_array+0x38>)
 8004ddc:	4c0d      	ldr	r4, [pc, #52]	; (8004e14 <__libc_init_array+0x3c>)
 8004dde:	1b64      	subs	r4, r4, r5
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	2600      	movs	r6, #0
 8004de4:	42a6      	cmp	r6, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	4d0b      	ldr	r5, [pc, #44]	; (8004e18 <__libc_init_array+0x40>)
 8004dea:	4c0c      	ldr	r4, [pc, #48]	; (8004e1c <__libc_init_array+0x44>)
 8004dec:	f000 f880 	bl	8004ef0 <_init>
 8004df0:	1b64      	subs	r4, r4, r5
 8004df2:	10a4      	asrs	r4, r4, #2
 8004df4:	2600      	movs	r6, #0
 8004df6:	42a6      	cmp	r6, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e00:	4798      	blx	r3
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0a:	4798      	blx	r3
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	08004f50 	.word	0x08004f50
 8004e14:	08004f50 	.word	0x08004f50
 8004e18:	08004f50 	.word	0x08004f50
 8004e1c:	08004f54 	.word	0x08004f54

08004e20 <__retarget_lock_acquire_recursive>:
 8004e20:	4770      	bx	lr

08004e22 <__retarget_lock_release_recursive>:
 8004e22:	4770      	bx	lr

08004e24 <memcpy>:
 8004e24:	440a      	add	r2, r1
 8004e26:	4291      	cmp	r1, r2
 8004e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e2c:	d100      	bne.n	8004e30 <memcpy+0xc>
 8004e2e:	4770      	bx	lr
 8004e30:	b510      	push	{r4, lr}
 8004e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	d1f9      	bne.n	8004e32 <memcpy+0xe>
 8004e3e:	bd10      	pop	{r4, pc}

08004e40 <_free_r>:
 8004e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e42:	2900      	cmp	r1, #0
 8004e44:	d044      	beq.n	8004ed0 <_free_r+0x90>
 8004e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e4a:	9001      	str	r0, [sp, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e52:	bfb8      	it	lt
 8004e54:	18e4      	addlt	r4, r4, r3
 8004e56:	f000 f83f 	bl	8004ed8 <__malloc_lock>
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <_free_r+0x94>)
 8004e5c:	9801      	ldr	r0, [sp, #4]
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	b933      	cbnz	r3, 8004e70 <_free_r+0x30>
 8004e62:	6063      	str	r3, [r4, #4]
 8004e64:	6014      	str	r4, [r2, #0]
 8004e66:	b003      	add	sp, #12
 8004e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e6c:	f000 b83a 	b.w	8004ee4 <__malloc_unlock>
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d908      	bls.n	8004e86 <_free_r+0x46>
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	1961      	adds	r1, r4, r5
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	bf01      	itttt	eq
 8004e7c:	6819      	ldreq	r1, [r3, #0]
 8004e7e:	685b      	ldreq	r3, [r3, #4]
 8004e80:	1949      	addeq	r1, r1, r5
 8004e82:	6021      	streq	r1, [r4, #0]
 8004e84:	e7ed      	b.n	8004e62 <_free_r+0x22>
 8004e86:	461a      	mov	r2, r3
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b10b      	cbz	r3, 8004e90 <_free_r+0x50>
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	d9fa      	bls.n	8004e86 <_free_r+0x46>
 8004e90:	6811      	ldr	r1, [r2, #0]
 8004e92:	1855      	adds	r5, r2, r1
 8004e94:	42a5      	cmp	r5, r4
 8004e96:	d10b      	bne.n	8004eb0 <_free_r+0x70>
 8004e98:	6824      	ldr	r4, [r4, #0]
 8004e9a:	4421      	add	r1, r4
 8004e9c:	1854      	adds	r4, r2, r1
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	d1e0      	bne.n	8004e66 <_free_r+0x26>
 8004ea4:	681c      	ldr	r4, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	6053      	str	r3, [r2, #4]
 8004eaa:	440c      	add	r4, r1
 8004eac:	6014      	str	r4, [r2, #0]
 8004eae:	e7da      	b.n	8004e66 <_free_r+0x26>
 8004eb0:	d902      	bls.n	8004eb8 <_free_r+0x78>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	6003      	str	r3, [r0, #0]
 8004eb6:	e7d6      	b.n	8004e66 <_free_r+0x26>
 8004eb8:	6825      	ldr	r5, [r4, #0]
 8004eba:	1961      	adds	r1, r4, r5
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	bf04      	itt	eq
 8004ec0:	6819      	ldreq	r1, [r3, #0]
 8004ec2:	685b      	ldreq	r3, [r3, #4]
 8004ec4:	6063      	str	r3, [r4, #4]
 8004ec6:	bf04      	itt	eq
 8004ec8:	1949      	addeq	r1, r1, r5
 8004eca:	6021      	streq	r1, [r4, #0]
 8004ecc:	6054      	str	r4, [r2, #4]
 8004ece:	e7ca      	b.n	8004e66 <_free_r+0x26>
 8004ed0:	b003      	add	sp, #12
 8004ed2:	bd30      	pop	{r4, r5, pc}
 8004ed4:	20004c38 	.word	0x20004c38

08004ed8 <__malloc_lock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__malloc_lock+0x8>)
 8004eda:	f7ff bfa1 	b.w	8004e20 <__retarget_lock_acquire_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20004c34 	.word	0x20004c34

08004ee4 <__malloc_unlock>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__malloc_unlock+0x8>)
 8004ee6:	f7ff bf9c 	b.w	8004e22 <__retarget_lock_release_recursive>
 8004eea:	bf00      	nop
 8004eec:	20004c34 	.word	0x20004c34

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
